"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@prisma";
exports.ids = ["vendor-chunks/@prisma"];
exports.modules = {

/***/ "(ssr)/./node_modules/@prisma/client/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@prisma/client/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = {\n    ...__webpack_require__(/*! .prisma/client/index */ \"(ssr)/./node_modules/.prisma/client/index.js\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByaXNtYS9jbGllbnQvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxPQUFPQyxPQUFPLEdBQUc7SUFDZixHQUFHQyxtQkFBT0EsQ0FBQywyRUFBdUI7QUFDcEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudG8vLi9ub2RlX21vZHVsZXMvQHByaXNtYS9jbGllbnQvaW5kZXguanM/MzFiNSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgLi4ucmVxdWlyZSgnLnByaXNtYS9jbGllbnQvaW5kZXgnKSxcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@prisma/client/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@prisma/client/runtime/library.js":
/*!********************************************************!*\
  !*** ./node_modules/@prisma/client/runtime/library.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar xu = Object.create;\nvar Ur = Object.defineProperty;\nvar bu = Object.getOwnPropertyDescriptor;\nvar wu = Object.getOwnPropertyNames;\nvar Eu = Object.getPrototypeOf, Pu = Object.prototype.hasOwnProperty;\nvar K = (e, t)=>()=>(t || e((t = {\n            exports: {}\n        }).exports, t), t.exports), Pt = (e, t)=>{\n    for(var r in t)Ur(e, r, {\n        get: t[r],\n        enumerable: !0\n    });\n}, No = (e, t, r, n)=>{\n    if (t && typeof t == \"object\" || typeof t == \"function\") for (let i of wu(t))!Pu.call(e, i) && i !== r && Ur(e, i, {\n        get: ()=>t[i],\n        enumerable: !(n = bu(t, i)) || n.enumerable\n    });\n    return e;\n};\nvar I = (e, t, r)=>(r = e != null ? xu(Eu(e)) : {}, No(t || !e || !e.__esModule ? Ur(r, \"default\", {\n        value: e,\n        enumerable: !0\n    }) : r, e)), vu = (e)=>No(Ur({}, \"__esModule\", {\n        value: !0\n    }), e);\nvar Go = K((Lf, Qo)=>{\n    \"use strict\";\n    var vt = 1e3, Tt = vt * 60, Ct = Tt * 60, ut = Ct * 24, Tu = ut * 7, Cu = ut * 365.25;\n    Qo.exports = function(e, t) {\n        t = t || {};\n        var r = typeof e;\n        if (r === \"string\" && e.length > 0) return _u(e);\n        if (r === \"number\" && isFinite(e)) return t.long ? Ru(e) : Au(e);\n        throw new Error(\"val is not a non-empty string or a valid number. val=\" + JSON.stringify(e));\n    };\n    function _u(e) {\n        if (e = String(e), !(e.length > 100)) {\n            var t = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);\n            if (t) {\n                var r = parseFloat(t[1]), n = (t[2] || \"ms\").toLowerCase();\n                switch(n){\n                    case \"years\":\n                    case \"year\":\n                    case \"yrs\":\n                    case \"yr\":\n                    case \"y\":\n                        return r * Cu;\n                    case \"weeks\":\n                    case \"week\":\n                    case \"w\":\n                        return r * Tu;\n                    case \"days\":\n                    case \"day\":\n                    case \"d\":\n                        return r * ut;\n                    case \"hours\":\n                    case \"hour\":\n                    case \"hrs\":\n                    case \"hr\":\n                    case \"h\":\n                        return r * Ct;\n                    case \"minutes\":\n                    case \"minute\":\n                    case \"mins\":\n                    case \"min\":\n                    case \"m\":\n                        return r * Tt;\n                    case \"seconds\":\n                    case \"second\":\n                    case \"secs\":\n                    case \"sec\":\n                    case \"s\":\n                        return r * vt;\n                    case \"milliseconds\":\n                    case \"millisecond\":\n                    case \"msecs\":\n                    case \"msec\":\n                    case \"ms\":\n                        return r;\n                    default:\n                        return;\n                }\n            }\n        }\n    }\n    function Au(e) {\n        var t = Math.abs(e);\n        return t >= ut ? Math.round(e / ut) + \"d\" : t >= Ct ? Math.round(e / Ct) + \"h\" : t >= Tt ? Math.round(e / Tt) + \"m\" : t >= vt ? Math.round(e / vt) + \"s\" : e + \"ms\";\n    }\n    function Ru(e) {\n        var t = Math.abs(e);\n        return t >= ut ? Qr(e, t, ut, \"day\") : t >= Ct ? Qr(e, t, Ct, \"hour\") : t >= Tt ? Qr(e, t, Tt, \"minute\") : t >= vt ? Qr(e, t, vt, \"second\") : e + \" ms\";\n    }\n    function Qr(e, t, r, n) {\n        var i = t >= r * 1.5;\n        return Math.round(e / r) + \" \" + n + (i ? \"s\" : \"\");\n    }\n});\nvar ui = K(($f, Jo)=>{\n    \"use strict\";\n    function Mu(e) {\n        r.debug = r, r.default = r, r.coerce = l, r.disable = o, r.enable = i, r.enabled = s, r.humanize = Go(), r.destroy = u, Object.keys(e).forEach((c)=>{\n            r[c] = e[c];\n        }), r.names = [], r.skips = [], r.formatters = {};\n        function t(c) {\n            let p = 0;\n            for(let d = 0; d < c.length; d++)p = (p << 5) - p + c.charCodeAt(d), p |= 0;\n            return r.colors[Math.abs(p) % r.colors.length];\n        }\n        r.selectColor = t;\n        function r(c) {\n            let p, d = null, f, y;\n            function g(...v) {\n                if (!g.enabled) return;\n                let C = g, _ = Number(new Date), b = _ - (p || _);\n                C.diff = b, C.prev = p, C.curr = _, p = _, v[0] = r.coerce(v[0]), typeof v[0] != \"string\" && v.unshift(\"%O\");\n                let M = 0;\n                v[0] = v[0].replace(/%([a-zA-Z%])/g, (X, lt)=>{\n                    if (X === \"%%\") return \"%\";\n                    M++;\n                    let U = r.formatters[lt];\n                    if (typeof U == \"function\") {\n                        let ne = v[M];\n                        X = U.call(C, ne), v.splice(M, 1), M--;\n                    }\n                    return X;\n                }), r.formatArgs.call(C, v), (C.log || r.log).apply(C, v);\n            }\n            return g.namespace = c, g.useColors = r.useColors(), g.color = r.selectColor(c), g.extend = n, g.destroy = r.destroy, Object.defineProperty(g, \"enabled\", {\n                enumerable: !0,\n                configurable: !1,\n                get: ()=>d !== null ? d : (f !== r.namespaces && (f = r.namespaces, y = r.enabled(c)), y),\n                set: (v)=>{\n                    d = v;\n                }\n            }), typeof r.init == \"function\" && r.init(g), g;\n        }\n        function n(c, p) {\n            let d = r(this.namespace + (typeof p > \"u\" ? \":\" : p) + c);\n            return d.log = this.log, d;\n        }\n        function i(c) {\n            r.save(c), r.namespaces = c, r.names = [], r.skips = [];\n            let p, d = (typeof c == \"string\" ? c : \"\").split(/[\\s,]+/), f = d.length;\n            for(p = 0; p < f; p++)d[p] && (c = d[p].replace(/\\*/g, \".*?\"), c[0] === \"-\" ? r.skips.push(new RegExp(\"^\" + c.slice(1) + \"$\")) : r.names.push(new RegExp(\"^\" + c + \"$\")));\n        }\n        function o() {\n            let c = [\n                ...r.names.map(a),\n                ...r.skips.map(a).map((p)=>\"-\" + p)\n            ].join(\",\");\n            return r.enable(\"\"), c;\n        }\n        function s(c) {\n            if (c[c.length - 1] === \"*\") return !0;\n            let p, d;\n            for(p = 0, d = r.skips.length; p < d; p++)if (r.skips[p].test(c)) return !1;\n            for(p = 0, d = r.names.length; p < d; p++)if (r.names[p].test(c)) return !0;\n            return !1;\n        }\n        function a(c) {\n            return c.toString().substring(2, c.toString().length - 2).replace(/\\.\\*\\?$/, \"*\");\n        }\n        function l(c) {\n            return c instanceof Error ? c.stack || c.message : c;\n        }\n        function u() {\n            console.warn(\"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\");\n        }\n        return r.enable(r.load()), r;\n    }\n    Jo.exports = Mu;\n});\nvar Ho = K((ye, Gr)=>{\n    \"use strict\";\n    ye.formatArgs = ku;\n    ye.save = Iu;\n    ye.load = Fu;\n    ye.useColors = Su;\n    ye.storage = Du();\n    ye.destroy = (()=>{\n        let e = !1;\n        return ()=>{\n            e || (e = !0, console.warn(\"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\"));\n        };\n    })();\n    ye.colors = [\n        \"#0000CC\",\n        \"#0000FF\",\n        \"#0033CC\",\n        \"#0033FF\",\n        \"#0066CC\",\n        \"#0066FF\",\n        \"#0099CC\",\n        \"#0099FF\",\n        \"#00CC00\",\n        \"#00CC33\",\n        \"#00CC66\",\n        \"#00CC99\",\n        \"#00CCCC\",\n        \"#00CCFF\",\n        \"#3300CC\",\n        \"#3300FF\",\n        \"#3333CC\",\n        \"#3333FF\",\n        \"#3366CC\",\n        \"#3366FF\",\n        \"#3399CC\",\n        \"#3399FF\",\n        \"#33CC00\",\n        \"#33CC33\",\n        \"#33CC66\",\n        \"#33CC99\",\n        \"#33CCCC\",\n        \"#33CCFF\",\n        \"#6600CC\",\n        \"#6600FF\",\n        \"#6633CC\",\n        \"#6633FF\",\n        \"#66CC00\",\n        \"#66CC33\",\n        \"#9900CC\",\n        \"#9900FF\",\n        \"#9933CC\",\n        \"#9933FF\",\n        \"#99CC00\",\n        \"#99CC33\",\n        \"#CC0000\",\n        \"#CC0033\",\n        \"#CC0066\",\n        \"#CC0099\",\n        \"#CC00CC\",\n        \"#CC00FF\",\n        \"#CC3300\",\n        \"#CC3333\",\n        \"#CC3366\",\n        \"#CC3399\",\n        \"#CC33CC\",\n        \"#CC33FF\",\n        \"#CC6600\",\n        \"#CC6633\",\n        \"#CC9900\",\n        \"#CC9933\",\n        \"#CCCC00\",\n        \"#CCCC33\",\n        \"#FF0000\",\n        \"#FF0033\",\n        \"#FF0066\",\n        \"#FF0099\",\n        \"#FF00CC\",\n        \"#FF00FF\",\n        \"#FF3300\",\n        \"#FF3333\",\n        \"#FF3366\",\n        \"#FF3399\",\n        \"#FF33CC\",\n        \"#FF33FF\",\n        \"#FF6600\",\n        \"#FF6633\",\n        \"#FF9900\",\n        \"#FF9933\",\n        \"#FFCC00\",\n        \"#FFCC33\"\n    ];\n    function Su() {\n        return  false ? 0 : typeof navigator < \"u\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/) ? !1 : typeof document < \"u\" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||  false && (0) || typeof navigator < \"u\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator < \"u\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n    }\n    function ku(e) {\n        if (e[0] = (this.useColors ? \"%c\" : \"\") + this.namespace + (this.useColors ? \" %c\" : \" \") + e[0] + (this.useColors ? \"%c \" : \" \") + \"+\" + Gr.exports.humanize(this.diff), !this.useColors) return;\n        let t = \"color: \" + this.color;\n        e.splice(1, 0, t, \"color: inherit\");\n        let r = 0, n = 0;\n        e[0].replace(/%[a-zA-Z%]/g, (i)=>{\n            i !== \"%%\" && (r++, i === \"%c\" && (n = r));\n        }), e.splice(n, 0, t);\n    }\n    ye.log = console.debug || console.log || (()=>{});\n    function Iu(e) {\n        try {\n            e ? ye.storage.setItem(\"debug\", e) : ye.storage.removeItem(\"debug\");\n        } catch  {}\n    }\n    function Fu() {\n        let e;\n        try {\n            e = ye.storage.getItem(\"debug\");\n        } catch  {}\n        return !e && typeof process < \"u\" && \"env\" in process && (e = process.env.DEBUG), e;\n    }\n    function Du() {\n        try {\n            return localStorage;\n        } catch  {}\n    }\n    Gr.exports = ui()(ye);\n    var { formatters: Ou } = Gr.exports;\n    Ou.j = function(e) {\n        try {\n            return JSON.stringify(e);\n        } catch (t) {\n            return \"[UnexpectedJSONParseError]: \" + t.message;\n        }\n    };\n});\nvar ci = K((qf, Wo)=>{\n    \"use strict\";\n    Wo.exports = (e, t = process.argv)=>{\n        let r = e.startsWith(\"-\") ? \"\" : e.length === 1 ? \"-\" : \"--\", n = t.indexOf(r + e), i = t.indexOf(\"--\");\n        return n !== -1 && (i === -1 || n < i);\n    };\n});\nvar mi = K((jf, Yo)=>{\n    \"use strict\";\n    var Nu = __webpack_require__(/*! os */ \"os\"), zo = __webpack_require__(/*! tty */ \"tty\"), Ee = ci(), { env: H } = process, Ge;\n    Ee(\"no-color\") || Ee(\"no-colors\") || Ee(\"color=false\") || Ee(\"color=never\") ? Ge = 0 : (Ee(\"color\") || Ee(\"colors\") || Ee(\"color=true\") || Ee(\"color=always\")) && (Ge = 1);\n    \"FORCE_COLOR\" in H && (H.FORCE_COLOR === \"true\" ? Ge = 1 : H.FORCE_COLOR === \"false\" ? Ge = 0 : Ge = H.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(H.FORCE_COLOR, 10), 3));\n    function pi(e) {\n        return e === 0 ? !1 : {\n            level: e,\n            hasBasic: !0,\n            has256: e >= 2,\n            has16m: e >= 3\n        };\n    }\n    function di(e, t) {\n        if (Ge === 0) return 0;\n        if (Ee(\"color=16m\") || Ee(\"color=full\") || Ee(\"color=truecolor\")) return 3;\n        if (Ee(\"color=256\")) return 2;\n        if (e && !t && Ge === void 0) return 0;\n        let r = Ge || 0;\n        if (H.TERM === \"dumb\") return r;\n        if (process.platform === \"win32\") {\n            let n = Nu.release().split(\".\");\n            return Number(n[0]) >= 10 && Number(n[2]) >= 10586 ? Number(n[2]) >= 14931 ? 3 : 2 : 1;\n        }\n        if (\"CI\" in H) return [\n            \"TRAVIS\",\n            \"CIRCLECI\",\n            \"APPVEYOR\",\n            \"GITLAB_CI\",\n            \"GITHUB_ACTIONS\",\n            \"BUILDKITE\"\n        ].some((n)=>n in H) || H.CI_NAME === \"codeship\" ? 1 : r;\n        if (\"TEAMCITY_VERSION\" in H) return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(H.TEAMCITY_VERSION) ? 1 : 0;\n        if (H.COLORTERM === \"truecolor\") return 3;\n        if (\"TERM_PROGRAM\" in H) {\n            let n = parseInt((H.TERM_PROGRAM_VERSION || \"\").split(\".\")[0], 10);\n            switch(H.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return n >= 3 ? 3 : 2;\n                case \"Apple_Terminal\":\n                    return 2;\n            }\n        }\n        return /-256(color)?$/i.test(H.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(H.TERM) || \"COLORTERM\" in H ? 1 : r;\n    }\n    function Lu(e) {\n        let t = di(e, e && e.isTTY);\n        return pi(t);\n    }\n    Yo.exports = {\n        supportsColor: Lu,\n        stdout: pi(di(!0, zo.isatty(1))),\n        stderr: pi(di(!0, zo.isatty(2)))\n    };\n});\nvar Xo = K((ee, Hr)=>{\n    \"use strict\";\n    var $u = __webpack_require__(/*! tty */ \"tty\"), Jr = __webpack_require__(/*! util */ \"util\");\n    ee.init = Qu;\n    ee.log = Bu;\n    ee.formatArgs = ju;\n    ee.save = Uu;\n    ee.load = Ku;\n    ee.useColors = qu;\n    ee.destroy = Jr.deprecate(()=>{}, \"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\");\n    ee.colors = [\n        6,\n        2,\n        3,\n        4,\n        5,\n        1\n    ];\n    try {\n        let e = mi();\n        e && (e.stderr || e).level >= 2 && (ee.colors = [\n            20,\n            21,\n            26,\n            27,\n            32,\n            33,\n            38,\n            39,\n            40,\n            41,\n            42,\n            43,\n            44,\n            45,\n            56,\n            57,\n            62,\n            63,\n            68,\n            69,\n            74,\n            75,\n            76,\n            77,\n            78,\n            79,\n            80,\n            81,\n            92,\n            93,\n            98,\n            99,\n            112,\n            113,\n            128,\n            129,\n            134,\n            135,\n            148,\n            149,\n            160,\n            161,\n            162,\n            163,\n            164,\n            165,\n            166,\n            167,\n            168,\n            169,\n            170,\n            171,\n            172,\n            173,\n            178,\n            179,\n            184,\n            185,\n            196,\n            197,\n            198,\n            199,\n            200,\n            201,\n            202,\n            203,\n            204,\n            205,\n            206,\n            207,\n            208,\n            209,\n            214,\n            215,\n            220,\n            221\n        ]);\n    } catch  {}\n    ee.inspectOpts = Object.keys(process.env).filter((e)=>/^debug_/i.test(e)).reduce((e, t)=>{\n        let r = t.substring(6).toLowerCase().replace(/_([a-z])/g, (i, o)=>o.toUpperCase()), n = process.env[t];\n        return /^(yes|on|true|enabled)$/i.test(n) ? n = !0 : /^(no|off|false|disabled)$/i.test(n) ? n = !1 : n === \"null\" ? n = null : n = Number(n), e[r] = n, e;\n    }, {});\n    function qu() {\n        return \"colors\" in ee.inspectOpts ? !!ee.inspectOpts.colors : $u.isatty(process.stderr.fd);\n    }\n    function ju(e) {\n        let { namespace: t, useColors: r } = this;\n        if (r) {\n            let n = this.color, i = \"\\x1b[3\" + (n < 8 ? n : \"8;5;\" + n), o = `  ${i};1m${t} \\x1B[0m`;\n            e[0] = o + e[0].split(`\n`).join(`\n` + o), e.push(i + \"m+\" + Hr.exports.humanize(this.diff) + \"\\x1b[0m\");\n        } else e[0] = Vu() + t + \" \" + e[0];\n    }\n    function Vu() {\n        return ee.inspectOpts.hideDate ? \"\" : new Date().toISOString() + \" \";\n    }\n    function Bu(...e) {\n        return process.stderr.write(Jr.format(...e) + `\n`);\n    }\n    function Uu(e) {\n        e ? process.env.DEBUG = e : delete process.env.DEBUG;\n    }\n    function Ku() {\n        return process.env.DEBUG;\n    }\n    function Qu(e) {\n        e.inspectOpts = {};\n        let t = Object.keys(ee.inspectOpts);\n        for(let r = 0; r < t.length; r++)e.inspectOpts[t[r]] = ee.inspectOpts[t[r]];\n    }\n    Hr.exports = ui()(ee);\n    var { formatters: Zo } = Hr.exports;\n    Zo.o = function(e) {\n        return this.inspectOpts.colors = this.useColors, Jr.inspect(e, this.inspectOpts).split(`\n`).map((t)=>t.trim()).join(\" \");\n    };\n    Zo.O = function(e) {\n        return this.inspectOpts.colors = this.useColors, Jr.inspect(e, this.inspectOpts);\n    };\n});\nvar es = K((Vf, fi)=>{\n    \"use strict\";\n    typeof process > \"u\" || process.type === \"renderer\" || false === !0 || process.__nwjs ? fi.exports = Ho() : fi.exports = Xo();\n});\nvar cs = K((bg, Pi)=>{\n    \"use strict\";\n    var R = Pi.exports;\n    Pi.exports.default = R;\n    var D = \"\\x1b[\", Xt = \"\\x1b]\", Rt = \"\\x07\", en = \";\", us = process.env.TERM_PROGRAM === \"Apple_Terminal\";\n    R.cursorTo = (e, t)=>{\n        if (typeof e != \"number\") throw new TypeError(\"The `x` argument is required\");\n        return typeof t != \"number\" ? D + (e + 1) + \"G\" : D + (t + 1) + \";\" + (e + 1) + \"H\";\n    };\n    R.cursorMove = (e, t)=>{\n        if (typeof e != \"number\") throw new TypeError(\"The `x` argument is required\");\n        let r = \"\";\n        return e < 0 ? r += D + -e + \"D\" : e > 0 && (r += D + e + \"C\"), t < 0 ? r += D + -t + \"A\" : t > 0 && (r += D + t + \"B\"), r;\n    };\n    R.cursorUp = (e = 1)=>D + e + \"A\";\n    R.cursorDown = (e = 1)=>D + e + \"B\";\n    R.cursorForward = (e = 1)=>D + e + \"C\";\n    R.cursorBackward = (e = 1)=>D + e + \"D\";\n    R.cursorLeft = D + \"G\";\n    R.cursorSavePosition = us ? \"\\x1b7\" : D + \"s\";\n    R.cursorRestorePosition = us ? \"\\x1b8\" : D + \"u\";\n    R.cursorGetPosition = D + \"6n\";\n    R.cursorNextLine = D + \"E\";\n    R.cursorPrevLine = D + \"F\";\n    R.cursorHide = D + \"?25l\";\n    R.cursorShow = D + \"?25h\";\n    R.eraseLines = (e)=>{\n        let t = \"\";\n        for(let r = 0; r < e; r++)t += R.eraseLine + (r < e - 1 ? R.cursorUp() : \"\");\n        return e && (t += R.cursorLeft), t;\n    };\n    R.eraseEndLine = D + \"K\";\n    R.eraseStartLine = D + \"1K\";\n    R.eraseLine = D + \"2K\";\n    R.eraseDown = D + \"J\";\n    R.eraseUp = D + \"1J\";\n    R.eraseScreen = D + \"2J\";\n    R.scrollUp = D + \"S\";\n    R.scrollDown = D + \"T\";\n    R.clearScreen = \"\\x1bc\";\n    R.clearTerminal = process.platform === \"win32\" ? `${R.eraseScreen}${D}0f` : `${R.eraseScreen}${D}3J${D}H`;\n    R.beep = Rt;\n    R.link = (e, t)=>[\n            Xt,\n            \"8\",\n            en,\n            en,\n            t,\n            Rt,\n            e,\n            Xt,\n            \"8\",\n            en,\n            en,\n            Rt\n        ].join(\"\");\n    R.image = (e, t = {})=>{\n        let r = `${Xt}1337;File=inline=1`;\n        return t.width && (r += `;width=${t.width}`), t.height && (r += `;height=${t.height}`), t.preserveAspectRatio === !1 && (r += \";preserveAspectRatio=0\"), r + \":\" + e.toString(\"base64\") + Rt;\n    };\n    R.iTerm = {\n        setCwd: (e = process.cwd())=>`${Xt}50;CurrentDir=${e}${Rt}`,\n        annotation: (e, t = {})=>{\n            let r = `${Xt}1337;`, n = typeof t.x < \"u\", i = typeof t.y < \"u\";\n            if ((n || i) && !(n && i && typeof t.length < \"u\")) throw new Error(\"`x`, `y` and `length` must be defined when `x` or `y` is defined\");\n            return e = e.replace(/\\|/g, \"\"), r += t.isHidden ? \"AddHiddenAnnotation=\" : \"AddAnnotation=\", t.length > 0 ? r += (n ? [\n                e,\n                t.length,\n                t.x,\n                t.y\n            ] : [\n                t.length,\n                e\n            ]).join(\"|\") : r += e, r + Rt;\n        }\n    };\n});\nvar ms = K((wg, ds)=>{\n    \"use strict\";\n    var Zu = mi(), Mt = ci();\n    function ps(e) {\n        if (/^\\d{3,4}$/.test(e)) {\n            let r = /(\\d{1,2})(\\d{2})/.exec(e);\n            return {\n                major: 0,\n                minor: parseInt(r[1], 10),\n                patch: parseInt(r[2], 10)\n            };\n        }\n        let t = (e || \"\").split(\".\").map((r)=>parseInt(r, 10));\n        return {\n            major: t[0],\n            minor: t[1],\n            patch: t[2]\n        };\n    }\n    function vi(e) {\n        let { env: t } = process;\n        if (\"FORCE_HYPERLINK\" in t) return !(t.FORCE_HYPERLINK.length > 0 && parseInt(t.FORCE_HYPERLINK, 10) === 0);\n        if (Mt(\"no-hyperlink\") || Mt(\"no-hyperlinks\") || Mt(\"hyperlink=false\") || Mt(\"hyperlink=never\")) return !1;\n        if (Mt(\"hyperlink=true\") || Mt(\"hyperlink=always\") || \"NETLIFY\" in t) return !0;\n        if (!Zu.supportsColor(e) || e && !e.isTTY || process.platform === \"win32\" || \"CI\" in t || \"TEAMCITY_VERSION\" in t) return !1;\n        if (\"TERM_PROGRAM\" in t) {\n            let r = ps(t.TERM_PROGRAM_VERSION);\n            switch(t.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return r.major === 3 ? r.minor >= 1 : r.major > 3;\n                case \"WezTerm\":\n                    return r.major >= 20200620;\n                case \"vscode\":\n                    return r.major > 1 || r.major === 1 && r.minor >= 72;\n            }\n        }\n        if (\"VTE_VERSION\" in t) {\n            if (t.VTE_VERSION === \"0.50.0\") return !1;\n            let r = ps(t.VTE_VERSION);\n            return r.major > 0 || r.minor >= 50;\n        }\n        return !1;\n    }\n    ds.exports = {\n        supportsHyperlink: vi,\n        stdout: vi(process.stdout),\n        stderr: vi(process.stderr)\n    };\n});\nvar gs = K((Eg, er)=>{\n    \"use strict\";\n    var Xu = cs(), Ti = ms(), fs = (e, t, { target: r = \"stdout\", ...n } = {})=>Ti[r] ? Xu.link(e, t) : n.fallback === !1 ? e : typeof n.fallback == \"function\" ? n.fallback(e, t) : `${e} (\\u200B${t}\\u200B)`;\n    er.exports = (e, t, r = {})=>fs(e, t, r);\n    er.exports.stderr = (e, t, r = {})=>fs(e, t, {\n            target: \"stderr\",\n            ...r\n        });\n    er.exports.isSupported = Ti.stdout;\n    er.exports.stderr.isSupported = Ti.stderr;\n});\nvar Cs = K((qg, fc)=>{\n    fc.exports = {\n        name: \"dotenv\",\n        version: \"16.0.3\",\n        description: \"Loads environment variables from .env file\",\n        main: \"lib/main.js\",\n        types: \"lib/main.d.ts\",\n        exports: {\n            \".\": {\n                require: \"./lib/main.js\",\n                types: \"./lib/main.d.ts\",\n                default: \"./lib/main.js\"\n            },\n            \"./config\": \"./config.js\",\n            \"./config.js\": \"./config.js\",\n            \"./lib/env-options\": \"./lib/env-options.js\",\n            \"./lib/env-options.js\": \"./lib/env-options.js\",\n            \"./lib/cli-options\": \"./lib/cli-options.js\",\n            \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n            \"./package.json\": \"./package.json\"\n        },\n        scripts: {\n            \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n            lint: \"standard\",\n            \"lint-readme\": \"standard-markdown\",\n            pretest: \"npm run lint && npm run dts-check\",\n            test: \"tap tests/*.js --100 -Rspec\",\n            prerelease: \"npm test\",\n            release: \"standard-version\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/motdotla/dotenv.git\"\n        },\n        keywords: [\n            \"dotenv\",\n            \"env\",\n            \".env\",\n            \"environment\",\n            \"variables\",\n            \"config\",\n            \"settings\"\n        ],\n        readmeFilename: \"README.md\",\n        license: \"BSD-2-Clause\",\n        devDependencies: {\n            \"@types/node\": \"^17.0.9\",\n            decache: \"^4.6.1\",\n            dtslint: \"^3.7.0\",\n            sinon: \"^12.0.1\",\n            standard: \"^16.0.4\",\n            \"standard-markdown\": \"^7.1.0\",\n            \"standard-version\": \"^9.3.2\",\n            tap: \"^15.1.6\",\n            tar: \"^6.1.11\",\n            typescript: \"^4.5.4\"\n        },\n        engines: {\n            node: \">=12\"\n        }\n    };\n});\nvar As = K((jg, sn)=>{\n    \"use strict\";\n    var gc = __webpack_require__(/*! fs */ \"fs\"), _s = __webpack_require__(/*! path */ \"path\"), yc = __webpack_require__(/*! os */ \"os\"), hc = Cs(), xc = hc.version, bc = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg;\n    function wc(e) {\n        let t = {}, r = e.toString();\n        r = r.replace(/\\r\\n?/mg, `\n`);\n        let n;\n        for(; (n = bc.exec(r)) != null;){\n            let i = n[1], o = n[2] || \"\";\n            o = o.trim();\n            let s = o[0];\n            o = o.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, \"$2\"), s === '\"' && (o = o.replace(/\\\\n/g, `\n`), o = o.replace(/\\\\r/g, \"\\r\")), t[i] = o;\n        }\n        return t;\n    }\n    function Ri(e) {\n        console.log(`[dotenv@${xc}][DEBUG] ${e}`);\n    }\n    function Ec(e) {\n        return e[0] === \"~\" ? _s.join(yc.homedir(), e.slice(1)) : e;\n    }\n    function Pc(e) {\n        let t = _s.resolve(process.cwd(), \".env\"), r = \"utf8\", n = !!(e && e.debug), i = !!(e && e.override);\n        e && (e.path != null && (t = Ec(e.path)), e.encoding != null && (r = e.encoding));\n        try {\n            let o = on.parse(gc.readFileSync(t, {\n                encoding: r\n            }));\n            return Object.keys(o).forEach(function(s) {\n                Object.prototype.hasOwnProperty.call(process.env, s) ? (i === !0 && (process.env[s] = o[s]), n && Ri(i === !0 ? `\"${s}\" is already defined in \\`process.env\\` and WAS overwritten` : `\"${s}\" is already defined in \\`process.env\\` and was NOT overwritten`)) : process.env[s] = o[s];\n            }), {\n                parsed: o\n            };\n        } catch (o) {\n            return n && Ri(`Failed to load ${t} ${o.message}`), {\n                error: o\n            };\n        }\n    }\n    var on = {\n        config: Pc,\n        parse: wc\n    };\n    sn.exports.config = on.config;\n    sn.exports.parse = on.parse;\n    sn.exports = on;\n});\nvar Fs = K((Jg, Is)=>{\n    \"use strict\";\n    Is.exports = (e)=>{\n        let t = e.match(/^[ \\t]*(?=\\S)/gm);\n        return t ? t.reduce((r, n)=>Math.min(r, n.length), 1 / 0) : 0;\n    };\n});\nvar Os = K((Hg, Ds)=>{\n    \"use strict\";\n    var _c = Fs();\n    Ds.exports = (e)=>{\n        let t = _c(e);\n        if (t === 0) return e;\n        let r = new RegExp(`^[ \\\\t]{${t}}`, \"gm\");\n        return e.replace(r, \"\");\n    };\n});\nvar Ns = K((Wg, Ac)=>{\n    Ac.exports = {\n        name: \"@prisma/engines-version\",\n        version: \"5.6.0-32.e95e739751f42d8ca026f6b910f5a2dc5adeaeee\",\n        main: \"index.js\",\n        types: \"index.d.ts\",\n        license: \"Apache-2.0\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        prisma: {\n            enginesVersion: \"e95e739751f42d8ca026f6b910f5a2dc5adeaeee\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/engines-wrapper.git\",\n            directory: \"packages/engines-version\"\n        },\n        devDependencies: {\n            \"@types/node\": \"18.18.9\",\n            typescript: \"4.9.5\"\n        },\n        files: [\n            \"index.js\",\n            \"index.d.ts\"\n        ],\n        scripts: {\n            build: \"tsc -d\"\n        }\n    };\n});\nvar ki = K((ln)=>{\n    \"use strict\";\n    Object.defineProperty(ln, \"__esModule\", {\n        value: !0\n    });\n    ln.enginesVersion = void 0;\n    ln.enginesVersion = Ns().prisma.enginesVersion;\n});\nvar Ni = K((ly, qs)=>{\n    \"use strict\";\n    qs.exports = (e, t = 1, r)=>{\n        if (r = {\n            indent: \" \",\n            includeEmptyLines: !1,\n            ...r\n        }, typeof e != \"string\") throw new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof e}\\``);\n        if (typeof t != \"number\") throw new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof t}\\``);\n        if (typeof r.indent != \"string\") throw new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof r.indent}\\``);\n        if (t === 0) return e;\n        let n = r.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n        return e.replace(n, r.indent.repeat(t));\n    };\n});\nvar Us = K((py, Bs)=>{\n    \"use strict\";\n    Bs.exports = ({ onlyFirst: e = !1 } = {})=>{\n        let t = [\n            \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n            \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))\"\n        ].join(\"|\");\n        return new RegExp(t, e ? void 0 : \"g\");\n    };\n});\nvar ji = K((dy, Ks)=>{\n    \"use strict\";\n    var Lc = Us();\n    Ks.exports = (e)=>typeof e == \"string\" ? e.replace(Lc(), \"\") : e;\n});\nvar Qs = K((gy, cn)=>{\n    \"use strict\";\n    cn.exports = (e = {})=>{\n        let t;\n        if (e.repoUrl) t = e.repoUrl;\n        else if (e.user && e.repo) t = `https://github.com/${e.user}/${e.repo}`;\n        else throw new Error(\"You need to specify either the `repoUrl` option or both the `user` and `repo` options\");\n        let r = new URL(`${t}/issues/new`), n = [\n            \"body\",\n            \"title\",\n            \"labels\",\n            \"template\",\n            \"milestone\",\n            \"assignee\",\n            \"projects\"\n        ];\n        for (let i of n){\n            let o = e[i];\n            if (o !== void 0) {\n                if (i === \"labels\" || i === \"projects\") {\n                    if (!Array.isArray(o)) throw new TypeError(`The \\`${i}\\` option should be an array`);\n                    o = o.join(\",\");\n                }\n                r.searchParams.set(i, o);\n            }\n        }\n        return r.toString();\n    };\n    cn.exports.default = cn.exports;\n});\nvar _o = K((Y0, Cl)=>{\n    \"use strict\";\n    Cl.exports = function() {\n        function e(t, r, n, i, o) {\n            return t < r || n < r ? t > n ? n + 1 : t + 1 : i === o ? r : r + 1;\n        }\n        return function(t, r) {\n            if (t === r) return 0;\n            if (t.length > r.length) {\n                var n = t;\n                t = r, r = n;\n            }\n            for(var i = t.length, o = r.length; i > 0 && t.charCodeAt(i - 1) === r.charCodeAt(o - 1);)i--, o--;\n            for(var s = 0; s < i && t.charCodeAt(s) === r.charCodeAt(s);)s++;\n            if (i -= s, o -= s, i === 0 || o < 3) return o;\n            var a = 0, l, u, c, p, d, f, y, g, v, C, _, b, M = [];\n            for(l = 0; l < i; l++)M.push(l + 1), M.push(t.charCodeAt(s + l));\n            for(var be = M.length - 1; a < o - 3;)for(v = r.charCodeAt(s + (u = a)), C = r.charCodeAt(s + (c = a + 1)), _ = r.charCodeAt(s + (p = a + 2)), b = r.charCodeAt(s + (d = a + 3)), f = a += 4, l = 0; l < be; l += 2)y = M[l], g = M[l + 1], u = e(y, u, c, v, g), c = e(u, c, p, C, g), p = e(c, p, d, _, g), f = e(p, d, f, b, g), M[l] = f, d = p, p = c, c = u, u = y;\n            for(; a < o;)for(v = r.charCodeAt(s + (u = a)), f = ++a, l = 0; l < be; l += 2)y = M[l], M[l] = f = e(y, u, f, v, M[l + 1]), u = y;\n            return f;\n        };\n    }();\n});\nvar Cf = {};\nPt(Cf, {\n    DMMF: ()=>we,\n    DMMFClass: ()=>Kr,\n    Debug: ()=>gi,\n    Decimal: ()=>Oe,\n    Extensions: ()=>oi,\n    MetricsClient: ()=>Ft,\n    NotFoundError: ()=>Ve,\n    ObjectEnumValue: ()=>ke,\n    PrismaClientInitializationError: ()=>k,\n    PrismaClientKnownRequestError: ()=>W,\n    PrismaClientRustPanicError: ()=>he,\n    PrismaClientUnknownRequestError: ()=>z,\n    PrismaClientValidationError: ()=>se,\n    Public: ()=>si,\n    Sql: ()=>me,\n    Types: ()=>ai,\n    defineDmmfProperty: ()=>Js,\n    empty: ()=>Ws,\n    getPrismaClient: ()=>gu,\n    itxClientDenyList: ()=>Fo,\n    join: ()=>Hs,\n    makeStrictEnum: ()=>yu,\n    objectEnumNames: ()=>qc,\n    objectEnumValues: ()=>dn,\n    raw: ()=>Wi,\n    sqltag: ()=>zi,\n    warnEnvConflicts: ()=>hu,\n    warnOnce: ()=>ar\n});\nmodule.exports = vu(Cf);\nvar oi = {};\nPt(oi, {\n    defineExtension: ()=>Lo,\n    getExtensionContext: ()=>$o\n});\nfunction Lo(e) {\n    return typeof e == \"function\" ? e : (t)=>t.$extends(e);\n}\nfunction $o(e) {\n    return e;\n}\nvar si = {};\nPt(si, {\n    validator: ()=>qo\n});\nfunction qo(...e) {\n    return (t)=>t;\n}\nvar ai = {};\nPt(ai, {\n    Extensions: ()=>jo,\n    Public: ()=>Vo,\n    Result: ()=>Bo,\n    Utils: ()=>Uo\n});\nvar jo = {};\nvar Vo = {};\nvar Bo = {};\nvar Uo = {};\nvar Qe = (e, t)=>{\n    let r = {};\n    for (let n of e){\n        let i = n[t];\n        r[i] = n;\n    }\n    return r;\n};\nfunction Ko(e) {\n    return e.substring(0, 1).toLowerCase() + e.substring(1);\n}\nvar Kr = class {\n    constructor(t){\n        this.document = t;\n        this.compositeNames = new Set(this.datamodel.types.map((r)=>r.name)), this.typeAndModelMap = this.buildTypeModelMap(), this.mappingsMap = this.buildMappingsMap(), this.outputTypeMap = this.buildMergedOutputTypeMap(), this.rootFieldMap = this.buildRootFieldMap(), this.inputTypesByName = this.buildInputTypesMap();\n    }\n    get datamodel() {\n        return this.document.datamodel;\n    }\n    get mappings() {\n        return this.document.mappings;\n    }\n    get schema() {\n        return this.document.schema;\n    }\n    get inputObjectTypes() {\n        return this.schema.inputObjectTypes;\n    }\n    get outputObjectTypes() {\n        return this.schema.outputObjectTypes;\n    }\n    isComposite(t) {\n        return this.compositeNames.has(t);\n    }\n    getOtherOperationNames() {\n        return [\n            Object.values(this.mappings.otherOperations.write),\n            Object.values(this.mappings.otherOperations.read)\n        ].flat();\n    }\n    hasEnumInNamespace(t, r) {\n        return this.schema.enumTypes[r]?.find((n)=>n.name === t) !== void 0;\n    }\n    resolveInputObjectType(t) {\n        return this.inputTypesByName.get(li(t.type, t.namespace));\n    }\n    resolveOutputObjectType(t) {\n        if (t.location === \"outputObjectTypes\") return this.outputObjectTypes[t.namespace ?? \"prisma\"].find((r)=>r.name === t.type);\n    }\n    buildModelMap() {\n        return Qe(this.datamodel.models, \"name\");\n    }\n    buildTypeMap() {\n        return Qe(this.datamodel.types, \"name\");\n    }\n    buildTypeModelMap() {\n        return {\n            ...this.buildTypeMap(),\n            ...this.buildModelMap()\n        };\n    }\n    buildMappingsMap() {\n        return Qe(this.mappings.modelOperations, \"model\");\n    }\n    buildMergedOutputTypeMap() {\n        return {\n            model: Qe(this.schema.outputObjectTypes.model, \"name\"),\n            prisma: Qe(this.schema.outputObjectTypes.prisma, \"name\")\n        };\n    }\n    buildRootFieldMap() {\n        return {\n            ...Qe(this.outputTypeMap.prisma.Query.fields, \"name\"),\n            ...Qe(this.outputTypeMap.prisma.Mutation.fields, \"name\")\n        };\n    }\n    buildInputTypesMap() {\n        let t = new Map;\n        for (let r of this.inputObjectTypes.prisma)t.set(li(r.name, \"prisma\"), r);\n        if (!this.inputObjectTypes.model) return t;\n        for (let r of this.inputObjectTypes.model)t.set(li(r.name, \"model\"), r);\n        return t;\n    }\n};\nfunction li(e, t) {\n    return t ? `${t}.${e}` : e;\n}\nvar we;\n((t)=>{\n    let e;\n    ((b)=>(b.findUnique = \"findUnique\", b.findUniqueOrThrow = \"findUniqueOrThrow\", b.findFirst = \"findFirst\", b.findFirstOrThrow = \"findFirstOrThrow\", b.findMany = \"findMany\", b.create = \"create\", b.createMany = \"createMany\", b.update = \"update\", b.updateMany = \"updateMany\", b.upsert = \"upsert\", b.delete = \"delete\", b.deleteMany = \"deleteMany\", b.groupBy = \"groupBy\", b.count = \"count\", b.aggregate = \"aggregate\", b.findRaw = \"findRaw\", b.aggregateRaw = \"aggregateRaw\"))(e = t.ModelAction || (t.ModelAction = {}));\n})(we || (we = {}));\nvar Wr = I(es()), Gu = 100, Yt = [];\ntypeof process < \"u\" && typeof process.stderr?.write != \"function\" && (Wr.default.log = console.debug ?? console.log);\nfunction Ju(e) {\n    let t = (0, Wr.default)(e), r = Object.assign((...n)=>(t.log = r.log, n.length !== 0 && Yt.push([\n            e,\n            ...n\n        ]), Yt.length > Gu && Yt.shift(), t(\"\", ...n)), t);\n    return r;\n}\nvar gi = Object.assign(Ju, Wr.default);\nfunction ts(e = 7500) {\n    let t = Yt.map((r)=>r.map((n)=>typeof n == \"string\" ? n : JSON.stringify(n)).join(\" \")).join(`\n`);\n    return t.length < e ? t : t.slice(-e);\n}\nfunction rs() {\n    Yt.length = 0;\n}\nvar L = gi;\nvar yi, ns, is, os, ss = !0;\ntypeof process < \"u\" && ({ FORCE_COLOR: yi, NODE_DISABLE_COLORS: ns, NO_COLOR: is, TERM: os } = process.env || {}, ss = process.stdout && process.stdout.isTTY);\nvar Hu = {\n    enabled: !ns && is == null && os !== \"dumb\" && (yi != null && yi !== \"0\" || ss)\n};\nfunction $(e, t) {\n    let r = new RegExp(`\\\\x1b\\\\[${t}m`, \"g\"), n = `\\x1B[${e}m`, i = `\\x1B[${t}m`;\n    return function(o) {\n        return !Hu.enabled || o == null ? o : n + (~(\"\" + o).indexOf(i) ? o.replace(r, i + n) : o) + i;\n    };\n}\nvar Uf = $(0, 0), pe = $(1, 22), Je = $(2, 22), Kf = $(3, 23), le = $(4, 24), Qf = $(7, 27), Gf = $(8, 28), Jf = $(9, 29), Hf = $(30, 39), Pe = $(31, 39), ct = $(32, 39), Ae = $(33, 39), _t = $(34, 39), Wf = $(35, 39), He = $(36, 39), zf = $(37, 39), zr = $(90, 39), Yf = $(90, 39), Zf = $(40, 49), Xf = $(41, 49), eg = $(42, 49), tg = $(43, 49), rg = $(44, 49), ng = $(45, 49), ig = $(46, 49), og = $(47, 49);\nvar as = I(__webpack_require__(/*! fs */ \"fs\"));\nfunction hi() {\n    let e = process.env.PRISMA_QUERY_ENGINE_LIBRARY;\n    if (!(e && as.default.existsSync(e)) && process.arch === \"ia32\") throw new Error('The default query engine type (Node-API, \"library\") is currently not supported for 32bit Node. Please set `engineType = \"binary\"` in the \"generator\" block of your \"schema.prisma\" file (or use the environment variables \"PRISMA_CLIENT_ENGINE_TYPE=binary\" and/or \"PRISMA_CLI_QUERY_ENGINE_TYPE=binary\".)');\n}\nvar Yr = \"libquery_engine\";\nfunction xi(e, t) {\n    let r = t === \"url\";\n    return e.includes(\"windows\") ? r ? \"query_engine.dll.node\" : `query_engine-${e}.dll.node` : e.includes(\"darwin\") ? r ? `${Yr}.dylib.node` : `${Yr}-${e}.dylib.node` : r ? `${Yr}.so.node` : `${Yr}-${e}.so.node`;\n}\nvar bs = I(__webpack_require__(/*! child_process */ \"child_process\")), Ci = I(__webpack_require__(/*! fs/promises */ \"fs/promises\")), rn = I(__webpack_require__(/*! os */ \"os\"));\nvar je = Symbol.for(\"@ts-pattern/matcher\"), Wu = Symbol.for(\"@ts-pattern/isVariadic\"), Xr = \"@ts-pattern/anonymous-select-key\", bi = (e)=>!!(e && typeof e == \"object\"), Zr = (e)=>e && !!e[je], Se = (e, t, r)=>{\n    if (Zr(e)) {\n        let n = e[je](), { matched: i, selections: o } = n.match(t);\n        return i && o && Object.keys(o).forEach((s)=>r(s, o[s])), i;\n    }\n    if (bi(e)) {\n        if (!bi(t)) return !1;\n        if (Array.isArray(e)) {\n            if (!Array.isArray(t)) return !1;\n            let n = [], i = [], o = [];\n            for (let s of e.keys()){\n                let a = e[s];\n                Zr(a) && a[Wu] ? o.push(a) : o.length ? i.push(a) : n.push(a);\n            }\n            if (o.length) {\n                if (o.length > 1) throw new Error(\"Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.\");\n                if (t.length < n.length + i.length) return !1;\n                let s = t.slice(0, n.length), a = i.length === 0 ? [] : t.slice(-i.length), l = t.slice(n.length, i.length === 0 ? 1 / 0 : -i.length);\n                return n.every((u, c)=>Se(u, s[c], r)) && i.every((u, c)=>Se(u, a[c], r)) && (o.length === 0 || Se(o[0], l, r));\n            }\n            return e.length === t.length && e.every((s, a)=>Se(s, t[a], r));\n        }\n        return Object.keys(e).every((n)=>{\n            let i = e[n];\n            return (n in t || Zr(o = i) && o[je]().matcherType === \"optional\") && Se(i, t[n], r);\n            var o;\n        });\n    }\n    return Object.is(t, e);\n}, Ye = (e)=>{\n    var t, r, n;\n    return bi(e) ? Zr(e) ? (t = (r = (n = e[je]()).getSelectionKeys) == null ? void 0 : r.call(n)) != null ? t : [] : Array.isArray(e) ? Zt(e, Ye) : Zt(Object.values(e), Ye) : [];\n}, Zt = (e, t)=>e.reduce((r, n)=>r.concat(t(n)), []);\nfunction ve(e) {\n    return Object.assign(e, {\n        optional: ()=>zu(e),\n        and: (t)=>V(e, t),\n        or: (t)=>Yu(e, t),\n        select: (t)=>t === void 0 ? ls(e) : ls(t, e)\n    });\n}\nfunction zu(e) {\n    return ve({\n        [je]: ()=>({\n                match: (t)=>{\n                    let r = {}, n = (i, o)=>{\n                        r[i] = o;\n                    };\n                    return t === void 0 ? (Ye(e).forEach((i)=>n(i, void 0)), {\n                        matched: !0,\n                        selections: r\n                    }) : {\n                        matched: Se(e, t, n),\n                        selections: r\n                    };\n                },\n                getSelectionKeys: ()=>Ye(e),\n                matcherType: \"optional\"\n            })\n    });\n}\nfunction V(...e) {\n    return ve({\n        [je]: ()=>({\n                match: (t)=>{\n                    let r = {}, n = (i, o)=>{\n                        r[i] = o;\n                    };\n                    return {\n                        matched: e.every((i)=>Se(i, t, n)),\n                        selections: r\n                    };\n                },\n                getSelectionKeys: ()=>Zt(e, Ye),\n                matcherType: \"and\"\n            })\n    });\n}\nfunction Yu(...e) {\n    return ve({\n        [je]: ()=>({\n                match: (t)=>{\n                    let r = {}, n = (i, o)=>{\n                        r[i] = o;\n                    };\n                    return Zt(e, Ye).forEach((i)=>n(i, void 0)), {\n                        matched: e.some((i)=>Se(i, t, n)),\n                        selections: r\n                    };\n                },\n                getSelectionKeys: ()=>Zt(e, Ye),\n                matcherType: \"or\"\n            })\n    });\n}\nfunction F(e) {\n    return {\n        [je]: ()=>({\n                match: (t)=>({\n                        matched: !!e(t)\n                    })\n            })\n    };\n}\nfunction ls(...e) {\n    let t = typeof e[0] == \"string\" ? e[0] : void 0, r = e.length === 2 ? e[1] : typeof e[0] == \"string\" ? void 0 : e[0];\n    return ve({\n        [je]: ()=>({\n                match: (n)=>{\n                    let i = {\n                        [t ?? Xr]: n\n                    };\n                    return {\n                        matched: r === void 0 || Se(r, n, (o, s)=>{\n                            i[o] = s;\n                        }),\n                        selections: i\n                    };\n                },\n                getSelectionKeys: ()=>[\n                        t ?? Xr\n                    ].concat(r === void 0 ? [] : Ye(r))\n            })\n    });\n}\nfunction Re(e) {\n    return typeof e == \"number\";\n}\nfunction pt(e) {\n    return typeof e == \"string\";\n}\nfunction We(e) {\n    return typeof e == \"bigint\";\n}\nvar pg = ve(F(function(e) {\n    return !0;\n}));\nvar dt = (e)=>Object.assign(ve(e), {\n        startsWith: (t)=>{\n            return dt(V(e, (r = t, F((n)=>pt(n) && n.startsWith(r)))));\n            var r;\n        },\n        endsWith: (t)=>{\n            return dt(V(e, (r = t, F((n)=>pt(n) && n.endsWith(r)))));\n            var r;\n        },\n        minLength: (t)=>dt(V(e, ((r)=>F((n)=>pt(n) && n.length >= r))(t))),\n        maxLength: (t)=>dt(V(e, ((r)=>F((n)=>pt(n) && n.length <= r))(t))),\n        includes: (t)=>{\n            return dt(V(e, (r = t, F((n)=>pt(n) && n.includes(r)))));\n            var r;\n        },\n        regex: (t)=>{\n            return dt(V(e, (r = t, F((n)=>pt(n) && !!n.match(r)))));\n            var r;\n        }\n    }), dg = dt(F(pt)), Me = (e)=>Object.assign(ve(e), {\n        between: (t, r)=>Me(V(e, ((n, i)=>F((o)=>Re(o) && n <= o && i >= o))(t, r))),\n        lt: (t)=>Me(V(e, ((r)=>F((n)=>Re(n) && n < r))(t))),\n        gt: (t)=>Me(V(e, ((r)=>F((n)=>Re(n) && n > r))(t))),\n        lte: (t)=>Me(V(e, ((r)=>F((n)=>Re(n) && n <= r))(t))),\n        gte: (t)=>Me(V(e, ((r)=>F((n)=>Re(n) && n >= r))(t))),\n        int: ()=>Me(V(e, F((t)=>Re(t) && Number.isInteger(t)))),\n        finite: ()=>Me(V(e, F((t)=>Re(t) && Number.isFinite(t)))),\n        positive: ()=>Me(V(e, F((t)=>Re(t) && t > 0))),\n        negative: ()=>Me(V(e, F((t)=>Re(t) && t < 0)))\n    }), mg = Me(F(Re)), ze = (e)=>Object.assign(ve(e), {\n        between: (t, r)=>ze(V(e, ((n, i)=>F((o)=>We(o) && n <= o && i >= o))(t, r))),\n        lt: (t)=>ze(V(e, ((r)=>F((n)=>We(n) && n < r))(t))),\n        gt: (t)=>ze(V(e, ((r)=>F((n)=>We(n) && n > r))(t))),\n        lte: (t)=>ze(V(e, ((r)=>F((n)=>We(n) && n <= r))(t))),\n        gte: (t)=>ze(V(e, ((r)=>F((n)=>We(n) && n >= r))(t))),\n        positive: ()=>ze(V(e, F((t)=>We(t) && t > 0))),\n        negative: ()=>ze(V(e, F((t)=>We(t) && t < 0)))\n    }), fg = ze(F(We)), gg = ve(F(function(e) {\n    return typeof e == \"boolean\";\n})), yg = ve(F(function(e) {\n    return typeof e == \"symbol\";\n})), hg = ve(F(function(e) {\n    return e == null;\n}));\nvar wi = {\n    matched: !1,\n    value: void 0\n};\nfunction At(e) {\n    return new Ei(e, wi);\n}\nvar Ei = class e {\n    constructor(t, r){\n        this.input = void 0, this.state = void 0, this.input = t, this.state = r;\n    }\n    with(...t) {\n        if (this.state.matched) return this;\n        let r = t[t.length - 1], n = [\n            t[0]\n        ], i;\n        t.length === 3 && typeof t[1] == \"function\" ? (n.push(t[0]), i = t[1]) : t.length > 2 && n.push(...t.slice(1, t.length - 1));\n        let o = !1, s = {}, a = (u, c)=>{\n            o = !0, s[u] = c;\n        }, l = !n.some((u)=>Se(u, this.input, a)) || i && !i(this.input) ? wi : {\n            matched: !0,\n            value: r(o ? Xr in s ? s[Xr] : s : this.input, this.input)\n        };\n        return new e(this.input, l);\n    }\n    when(t, r) {\n        if (this.state.matched) return this;\n        let n = !!t(this.input);\n        return new e(this.input, n ? {\n            matched: !0,\n            value: r(this.input, this.input)\n        } : wi);\n    }\n    otherwise(t) {\n        return this.state.matched ? this.state.value : t(this.input);\n    }\n    exhaustive() {\n        return this.run();\n    }\n    run() {\n        if (this.state.matched) return this.state.value;\n        let t;\n        try {\n            t = JSON.stringify(this.input);\n        } catch  {\n            t = this.input;\n        }\n        throw new Error(`Pattern matching error: no pattern matches value ${t}`);\n    }\n    returnType() {\n        return this;\n    }\n};\nvar ws = __webpack_require__(/*! util */ \"util\");\nvar ys = I(gs());\nfunction tr(e) {\n    return (0, ys.default)(e, e, {\n        fallback: le\n    });\n}\nvar ec = {\n    warn: Ae(\"prisma:warn\")\n}, tc = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction rr(e, ...t) {\n    tc.warn() && console.warn(`${ec.warn} ${e}`, ...t);\n}\nvar rc = (0, ws.promisify)(bs.default.exec), de = L(\"prisma:get-platform\"), nc = [\n    \"1.0.x\",\n    \"1.1.x\",\n    \"3.0.x\"\n];\nasync function Es() {\n    let e = rn.default.platform(), t = process.arch;\n    if (e === \"freebsd\") {\n        let s = await nn(\"freebsd-version\");\n        if (s && s.trim().length > 0) {\n            let l = /^(\\d+)\\.?/.exec(s);\n            if (l) return {\n                platform: \"freebsd\",\n                targetDistro: `freebsd${l[1]}`,\n                arch: t\n            };\n        }\n    }\n    if (e !== \"linux\") return {\n        platform: e,\n        arch: t\n    };\n    let r = await oc(), n = await mc(), i = ac({\n        arch: t,\n        archFromUname: n,\n        familyDistro: r.familyDistro\n    }), { libssl: o } = await lc(i);\n    return {\n        platform: \"linux\",\n        libssl: o,\n        arch: t,\n        archFromUname: n,\n        ...r\n    };\n}\nfunction ic(e) {\n    let t = /^ID=\"?([^\"\\n]*)\"?$/im, r = /^ID_LIKE=\"?([^\"\\n]*)\"?$/im, n = t.exec(e), i = n && n[1] && n[1].toLowerCase() || \"\", o = r.exec(e), s = o && o[1] && o[1].toLowerCase() || \"\", a = At({\n        id: i,\n        idLike: s\n    }).with({\n        id: \"alpine\"\n    }, ({ id: l })=>({\n            targetDistro: \"musl\",\n            familyDistro: l,\n            originalDistro: l\n        })).with({\n        id: \"raspbian\"\n    }, ({ id: l })=>({\n            targetDistro: \"arm\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).with({\n        id: \"nixos\"\n    }, ({ id: l })=>({\n            targetDistro: \"nixos\",\n            originalDistro: l,\n            familyDistro: \"nixos\"\n        })).with({\n        id: \"debian\"\n    }, {\n        id: \"ubuntu\"\n    }, ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).with({\n        id: \"rhel\"\n    }, {\n        id: \"centos\"\n    }, {\n        id: \"fedora\"\n    }, ({ id: l })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l\n        })).when(({ idLike: l })=>l.includes(\"debian\") || l.includes(\"ubuntu\"), ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l\n        })).when(({ idLike: l })=>i === \"arch\" || l.includes(\"arch\"), ({ id: l })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"arch\",\n            originalDistro: l\n        })).when(({ idLike: l })=>l.includes(\"centos\") || l.includes(\"fedora\") || l.includes(\"rhel\") || l.includes(\"suse\"), ({ id: l })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l\n        })).otherwise(({ id: l })=>({\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: l\n        }));\n    return de(`Found distro info:\n${JSON.stringify(a, null, 2)}`), a;\n}\nasync function oc() {\n    let e = \"/etc/os-release\";\n    try {\n        let t = await Ci.default.readFile(e, {\n            encoding: \"utf-8\"\n        });\n        return ic(t);\n    } catch  {\n        return {\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: void 0\n        };\n    }\n}\nfunction sc(e) {\n    let t = /^OpenSSL\\s(\\d+\\.\\d+)\\.\\d+/.exec(e);\n    if (t) {\n        let r = `${t[1]}.x`;\n        return Ps(r);\n    }\n}\nfunction hs(e) {\n    let t = /libssl\\.so\\.(\\d)(\\.\\d)?/.exec(e);\n    if (t) {\n        let r = `${t[1]}${t[2] ?? \".0\"}.x`;\n        return Ps(r);\n    }\n}\nfunction Ps(e) {\n    let t = (()=>{\n        if (Ts(e)) return e;\n        let r = e.split(\".\");\n        return r[1] = \"0\", r.join(\".\");\n    })();\n    if (nc.includes(t)) return t;\n}\nfunction ac(e) {\n    return At(e).with({\n        familyDistro: \"musl\"\n    }, ()=>(de('Trying platform-specific paths for \"alpine\"'), [\n            \"/lib\"\n        ])).with({\n        familyDistro: \"debian\"\n    }, ({ archFromUname: t })=>(de('Trying platform-specific paths for \"debian\" (and \"ubuntu\")'), [\n            `/usr/lib/${t}-linux-gnu`,\n            `/lib/${t}-linux-gnu`\n        ])).with({\n        familyDistro: \"rhel\"\n    }, ()=>(de('Trying platform-specific paths for \"rhel\"'), [\n            \"/lib64\",\n            \"/usr/lib64\"\n        ])).otherwise(({ familyDistro: t, arch: r, archFromUname: n })=>(de(`Don't know any platform-specific paths for \"${t}\" on ${r} (${n})`), []));\n}\nasync function lc(e) {\n    let t = 'grep -v \"libssl.so.0\"', r = await xs(e);\n    if (r) {\n        de(`Found libssl.so file using platform-specific paths: ${r}`);\n        let o = hs(r);\n        if (de(`The parsed libssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"libssl-specific-path\"\n        };\n    }\n    de('Falling back to \"ldconfig\" and other generic paths');\n    let n = await nn(`ldconfig -p | sed \"s/.*=>s*//\" | sed \"s|.*/||\" | grep libssl | sort | ${t}`);\n    if (n || (n = await xs([\n        \"/lib64\",\n        \"/usr/lib64\",\n        \"/lib\"\n    ])), n) {\n        de(`Found libssl.so file using \"ldconfig\" or other generic paths: ${n}`);\n        let o = hs(n);\n        if (de(`The parsed libssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"ldconfig\"\n        };\n    }\n    let i = await nn(\"openssl version -v\");\n    if (i) {\n        de(`Found openssl binary with version: ${i}`);\n        let o = sc(i);\n        if (de(`The parsed openssl version is: ${o}`), o) return {\n            libssl: o,\n            strategy: \"openssl-binary\"\n        };\n    }\n    return de(\"Couldn't find any version of libssl or OpenSSL in the system\"), {};\n}\nasync function xs(e) {\n    for (let t of e){\n        let r = await uc(t);\n        if (r) return r;\n    }\n}\nasync function uc(e) {\n    try {\n        return (await Ci.default.readdir(e)).find((r)=>r.startsWith(\"libssl.so.\") && !r.startsWith(\"libssl.so.0\"));\n    } catch (t) {\n        if (t.code === \"ENOENT\") return;\n        throw t;\n    }\n}\nasync function St() {\n    let { binaryTarget: e } = await vs();\n    return e;\n}\nfunction cc(e) {\n    return e.binaryTarget !== void 0;\n}\nasync function _i() {\n    let { memoized: e, ...t } = await vs();\n    return t;\n}\nvar tn = {};\nasync function vs() {\n    if (cc(tn)) return Promise.resolve({\n        ...tn,\n        memoized: !0\n    });\n    let e = await Es(), t = pc(e);\n    return tn = {\n        ...e,\n        binaryTarget: t\n    }, {\n        ...tn,\n        memoized: !1\n    };\n}\nfunction pc(e) {\n    let { platform: t, arch: r, archFromUname: n, libssl: i, targetDistro: o, familyDistro: s, originalDistro: a } = e;\n    t === \"linux\" && ![\n        \"x64\",\n        \"arm64\"\n    ].includes(r) && rr(`Prisma only officially supports Linux on amd64 (x86_64) and arm64 (aarch64) system architectures. If you are using your own custom Prisma engines, you can ignore this warning, as long as you've compiled the engines for your system architecture \"${n}\".`);\n    let l = \"1.1.x\";\n    if (t === \"linux\" && i === void 0) {\n        let c = At({\n            familyDistro: s\n        }).with({\n            familyDistro: \"debian\"\n        }, ()=>\"Please manually install OpenSSL via `apt-get update -y && apt-get install -y openssl` and try installing Prisma again. If you're running Prisma on Docker, add this command to your Dockerfile, or switch to an image that already has OpenSSL installed.\").otherwise(()=>\"Please manually install OpenSSL and try installing Prisma again.\");\n        rr(`Prisma failed to detect the libssl/openssl version to use, and may not work as expected. Defaulting to \"openssl-${l}\".\n${c}`);\n    }\n    let u = \"debian\";\n    if (t === \"linux\" && o === void 0 && rr(`Prisma doesn't know which engines to download for the Linux distro \"${a}\". Falling back to Prisma engines built \"${u}\".\nPlease report your experience by creating an issue at ${tr(\"https://github.com/prisma/prisma/issues\")} so we can add your distro to the list of known supported distros.`), t === \"darwin\" && r === \"arm64\") return \"darwin-arm64\";\n    if (t === \"darwin\") return \"darwin\";\n    if (t === \"win32\") return \"windows\";\n    if (t === \"freebsd\") return o;\n    if (t === \"openbsd\") return \"openbsd\";\n    if (t === \"netbsd\") return \"netbsd\";\n    if (t === \"linux\" && o === \"nixos\") return \"linux-nixos\";\n    if (t === \"linux\" && r === \"arm64\") return `${o === \"musl\" ? \"linux-musl-arm64\" : \"linux-arm64\"}-openssl-${i || l}`;\n    if (t === \"linux\" && r === \"arm\") return `linux-arm-openssl-${i || l}`;\n    if (t === \"linux\" && o === \"musl\") {\n        let c = \"linux-musl\";\n        return !i || Ts(i) ? c : `${c}-openssl-${i}`;\n    }\n    return t === \"linux\" && o && i ? `${o}-openssl-${i}` : (t !== \"linux\" && rr(`Prisma detected unknown OS \"${t}\" and may not work as expected. Defaulting to \"linux\".`), i ? `${u}-openssl-${i}` : o ? `${o}-openssl-${l}` : `${u}-openssl-${l}`);\n}\nasync function dc(e) {\n    try {\n        return await e();\n    } catch  {\n        return;\n    }\n}\nfunction nn(e) {\n    return dc(async ()=>{\n        let t = await rc(e);\n        return de(`Command \"${e}\" successfully returned \"${t.stdout}\"`), t.stdout;\n    });\n}\nasync function mc() {\n    return typeof rn.default.machine == \"function\" ? rn.default.machine() : (await nn(\"uname -m\"))?.trim();\n}\nfunction Ts(e) {\n    return e.startsWith(\"1.\");\n}\nvar Ai = [\n    \"darwin\",\n    \"darwin-arm64\",\n    \"debian-openssl-1.0.x\",\n    \"debian-openssl-1.1.x\",\n    \"debian-openssl-3.0.x\",\n    \"rhel-openssl-1.0.x\",\n    \"rhel-openssl-1.1.x\",\n    \"rhel-openssl-3.0.x\",\n    \"linux-arm64-openssl-1.1.x\",\n    \"linux-arm64-openssl-1.0.x\",\n    \"linux-arm64-openssl-3.0.x\",\n    \"linux-arm-openssl-1.1.x\",\n    \"linux-arm-openssl-1.0.x\",\n    \"linux-arm-openssl-3.0.x\",\n    \"linux-musl\",\n    \"linux-musl-openssl-3.0.x\",\n    \"linux-musl-arm64-openssl-1.1.x\",\n    \"linux-musl-arm64-openssl-3.0.x\",\n    \"linux-nixos\",\n    \"linux-static-x64\",\n    \"linux-static-arm64\",\n    \"windows\",\n    \"freebsd11\",\n    \"freebsd12\",\n    \"freebsd13\",\n    \"openbsd\",\n    \"netbsd\",\n    \"arm\"\n];\nvar Si = I(As()), an = I(__webpack_require__(/*! fs */ \"fs\"));\nvar kt = I(__webpack_require__(/*! path */ \"path\"));\nfunction Rs(e) {\n    let t = e.ignoreProcessEnv ? {} : process.env, r = (n)=>n.match(/(.?\\${(?:[a-zA-Z0-9_]+)?})/g)?.reduce(function(o, s) {\n            let a = /(.?)\\${([a-zA-Z0-9_]+)?}/g.exec(s);\n            if (!a) return o;\n            let l = a[1], u, c;\n            if (l === \"\\\\\") c = a[0], u = c.replace(\"\\\\$\", \"$\");\n            else {\n                let p = a[2];\n                c = a[0].substring(l.length), u = Object.hasOwnProperty.call(t, p) ? t[p] : e.parsed[p] || \"\", u = r(u);\n            }\n            return o.replace(c, u);\n        }, n) ?? n;\n    for(let n in e.parsed){\n        let i = Object.hasOwnProperty.call(t, n) ? t[n] : e.parsed[n];\n        e.parsed[n] = r(i);\n    }\n    for(let n in e.parsed)t[n] = e.parsed[n];\n    return e;\n}\nvar Mi = L(\"prisma:tryLoadEnv\");\nfunction nr({ rootEnvPath: e, schemaEnvPath: t }, r = {\n    conflictCheck: \"none\"\n}) {\n    let n = Ms(e);\n    r.conflictCheck !== \"none\" && vc(n, t, r.conflictCheck);\n    let i = null;\n    return Ss(n?.path, t) || (i = Ms(t)), !n && !i && Mi(\"No Environment variables loaded\"), i?.dotenvResult.error ? console.error(Pe(pe(\"Schema Env Error: \")) + i.dotenvResult.error) : {\n        message: [\n            n?.message,\n            i?.message\n        ].filter(Boolean).join(`\n`),\n        parsed: {\n            ...n?.dotenvResult?.parsed,\n            ...i?.dotenvResult?.parsed\n        }\n    };\n}\nfunction vc(e, t, r) {\n    let n = e?.dotenvResult.parsed, i = !Ss(e?.path, t);\n    if (n && t && i && an.default.existsSync(t)) {\n        let o = Si.default.parse(an.default.readFileSync(t)), s = [];\n        for(let a in o)n[a] === o[a] && s.push(a);\n        if (s.length > 0) {\n            let a = kt.default.relative(process.cwd(), e.path), l = kt.default.relative(process.cwd(), t);\n            if (r === \"error\") {\n                let u = `There is a conflict between env var${s.length > 1 ? \"s\" : \"\"} in ${le(a)} and ${le(l)}\nConflicting env vars:\n${s.map((c)=>`  ${pe(c)}`).join(`\n`)}\n\nWe suggest to move the contents of ${le(l)} to ${le(a)} to consolidate your env vars.\n`;\n                throw new Error(u);\n            } else if (r === \"warn\") {\n                let u = `Conflict for env var${s.length > 1 ? \"s\" : \"\"} ${s.map((c)=>pe(c)).join(\", \")} in ${le(a)} and ${le(l)}\nEnv vars from ${le(l)} overwrite the ones from ${le(a)}\n      `;\n                console.warn(`${Ae(\"warn(prisma)\")} ${u}`);\n            }\n        }\n    }\n}\nfunction Ms(e) {\n    return Tc(e) ? (Mi(`Environment variables loaded from ${e}`), {\n        dotenvResult: Rs(Si.default.config({\n            path: e,\n            debug: process.env.DOTENV_CONFIG_DEBUG ? !0 : void 0\n        })),\n        message: Je(`Environment variables loaded from ${kt.default.relative(process.cwd(), e)}`),\n        path: e\n    }) : (Mi(`Environment variables not found at ${e}`), null);\n}\nfunction Ss(e, t) {\n    return e && t && kt.default.resolve(e) === kt.default.resolve(t);\n}\nfunction Tc(e) {\n    return !!(e && an.default.existsSync(e));\n}\nvar ks = \"library\";\nfunction mt(e) {\n    let t = Cc();\n    return t || (e?.config.engineType === \"library\" ? \"library\" : e?.config.engineType === \"binary\" ? \"binary\" : e?.config.engineType === \"wasm\" ? \"wasm\" : ks);\n}\nfunction Cc() {\n    let e = process.env.PRISMA_CLIENT_ENGINE_TYPE;\n    return e === \"library\" ? \"library\" : e === \"binary\" ? \"binary\" : e === \"wasm\" ? \"wasm\" : void 0;\n}\nvar Rc = I(ki());\nvar q = I(__webpack_require__(/*! path */ \"path\")), Mc = I(ki()), Zg = L(\"prisma:engines\");\nfunction Ls() {\n    return q.default.join(__dirname, \"../\");\n}\nvar Xg = \"libquery-engine\";\nq.default.join(__dirname, \"../query-engine-darwin\");\nq.default.join(__dirname, \"../query-engine-darwin-arm64\");\nq.default.join(__dirname, \"../query-engine-debian-openssl-1.0.x\");\nq.default.join(__dirname, \"../query-engine-debian-openssl-1.1.x\");\nq.default.join(__dirname, \"../query-engine-debian-openssl-3.0.x\");\nq.default.join(__dirname, \"../query-engine-linux-static-x64\");\nq.default.join(__dirname, \"../query-engine-linux-static-arm64\");\nq.default.join(__dirname, \"../query-engine-rhel-openssl-1.0.x\");\nq.default.join(__dirname, \"../query-engine-rhel-openssl-1.1.x\");\nq.default.join(__dirname, \"../query-engine-rhel-openssl-3.0.x\");\nq.default.join(__dirname, \"../libquery_engine-darwin.dylib.node\");\nq.default.join(__dirname, \"../libquery_engine-darwin-arm64.dylib.node\");\nq.default.join(__dirname, \"../libquery_engine-debian-openssl-1.0.x.so.node\");\nq.default.join(__dirname, \"../libquery_engine-debian-openssl-1.1.x.so.node\");\nq.default.join(__dirname, \"../libquery_engine-debian-openssl-3.0.x.so.node\");\nq.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.0.x.so.node\");\nq.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.1.x.so.node\");\nq.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-3.0.x.so.node\");\nq.default.join(__dirname, \"../libquery_engine-linux-musl.so.node\");\nq.default.join(__dirname, \"../libquery_engine-linux-musl-openssl-3.0.x.so.node\");\nq.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.0.x.so.node\");\nq.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.1.x.so.node\");\nq.default.join(__dirname, \"../libquery_engine-rhel-openssl-3.0.x.so.node\");\nq.default.join(__dirname, \"../query_engine-windows.dll.node\");\nvar Ii = I(__webpack_require__(/*! fs */ \"fs\")), $s = L(\"chmodPlusX\");\nfunction Fi(e) {\n    if (process.platform === \"win32\") return;\n    let t = Ii.default.statSync(e), r = t.mode | 64 | 8 | 1;\n    if (t.mode === r) {\n        $s(`Execution permissions of ${e} are fine`);\n        return;\n    }\n    let n = r.toString(8).slice(-3);\n    $s(`Have to call chmodPlusX on ${e}`), Ii.default.chmodSync(e, n);\n}\nfunction Di(e) {\n    let t = e.e, r = (a)=>`Prisma cannot find the required \\`${a}\\` system library in your system`, n = t.message.includes(\"cannot open shared object file\"), i = `Please refer to the documentation about Prisma's system requirements: ${tr(\"https://pris.ly/d/system-requirements\")}`, o = `Unable to require(\\`${Je(e.id)}\\`).`, s = At({\n        message: t.message,\n        code: t.code\n    }).with({\n        code: \"ENOENT\"\n    }, ()=>\"File does not exist.\").when(({ message: a })=>n && a.includes(\"libz\"), ()=>`${r(\"libz\")}. Please install it and try again.`).when(({ message: a })=>n && a.includes(\"libgcc_s\"), ()=>`${r(\"libgcc_s\")}. Please install it and try again.`).when(({ message: a })=>n && a.includes(\"libssl\"), ()=>{\n        let a = e.platformInfo.libssl ? `openssl-${e.platformInfo.libssl}` : \"openssl\";\n        return `${r(\"libssl\")}. Please install ${a} and try again.`;\n    }).when(({ message: a })=>a.includes(\"GLIBC\"), ()=>`Prisma has detected an incompatible version of the \\`glibc\\` C standard library installed in your system. This probably means your system may be too old to run Prisma. ${i}`).when(({ message: a })=>e.platformInfo.platform === \"linux\" && a.includes(\"symbol not found\"), ()=>`The Prisma engines are not compatible with your system ${e.platformInfo.originalDistro} on (${e.platformInfo.archFromUname}) which uses the \\`${e.platformInfo.binaryTarget}\\` binaryTarget by default. ${i}`).otherwise(()=>`The Prisma engines do not seem to be compatible with your system. ${i}`);\n    return `${o}\n${s}\n\nDetails: ${t.message}`;\n}\nvar ir = I(__webpack_require__(/*! path */ \"path\"));\nfunction Oi(e) {\n    return ir.default.sep === ir.default.posix.sep ? e : e.split(ir.default.sep).join(ir.default.posix.sep);\n}\nvar js = I(Ni());\nfunction $i(e) {\n    return String(new Li(e));\n}\nvar Li = class {\n    constructor(t){\n        this.config = t;\n    }\n    toString() {\n        let { config: t } = this, r = t.provider.fromEnvVar ? `env(\"${t.provider.fromEnvVar}\")` : t.provider.value, n = JSON.parse(JSON.stringify({\n            provider: r,\n            binaryTargets: Sc(t.binaryTargets)\n        }));\n        return `generator ${t.name} {\n${(0, js.default)(kc(n), 2)}\n}`;\n    }\n};\nfunction Sc(e) {\n    let t;\n    if (e.length > 0) {\n        let r = e.find((n)=>n.fromEnvVar !== null);\n        r ? t = `env(\"${r.fromEnvVar}\")` : t = e.map((n)=>n.native ? \"native\" : n.value);\n    } else t = void 0;\n    return t;\n}\nfunction kc(e) {\n    let t = Object.keys(e).reduce((r, n)=>Math.max(r, n.length), 0);\n    return Object.entries(e).map(([r, n])=>`${r.padEnd(t)} = ${Ic(n)}`).join(`\n`);\n}\nfunction Ic(e) {\n    return JSON.parse(JSON.stringify(e, (t, r)=>Array.isArray(r) ? `[${r.map((n)=>JSON.stringify(n)).join(\", \")}]` : JSON.stringify(r)));\n}\nvar sr = {};\nPt(sr, {\n    error: ()=>Oc,\n    info: ()=>Dc,\n    log: ()=>Fc,\n    query: ()=>Nc,\n    should: ()=>Vs,\n    tags: ()=>or,\n    warn: ()=>qi\n});\nvar or = {\n    error: Pe(\"prisma:error\"),\n    warn: Ae(\"prisma:warn\"),\n    info: He(\"prisma:info\"),\n    query: _t(\"prisma:query\")\n}, Vs = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction Fc(...e) {\n    console.log(...e);\n}\nfunction qi(e, ...t) {\n    Vs.warn() && console.warn(`${or.warn} ${e}`, ...t);\n}\nfunction Dc(e, ...t) {\n    console.info(`${or.info} ${e}`, ...t);\n}\nfunction Oc(e, ...t) {\n    console.error(`${or.error} ${e}`, ...t);\n}\nfunction Nc(e, ...t) {\n    console.log(`${or.query} ${e}`, ...t);\n}\nfunction un(e, t) {\n    if (!e) throw new Error(`${t}. This should never happen. If you see this error, please, open an issue at https://github.com/prisma/prisma/issues/new?assignees=&labels=kind%2Fbug&projects=&template=bug_report.yml`);\n}\nfunction ft(e, t) {\n    throw new Error(t);\n}\nfunction Vi(e, t) {\n    return Object.prototype.hasOwnProperty.call(e, t);\n}\nvar Bi = (e, t)=>e.reduce((r, n)=>(r[t(n)] = n, r), {});\nfunction It(e, t) {\n    let r = {};\n    for (let n of Object.keys(e))r[n] = t(e[n], n);\n    return r;\n}\nfunction Ui(e, t) {\n    if (e.length === 0) return;\n    let r = e[0];\n    for(let n = 1; n < e.length; n++)t(r, e[n]) < 0 && (r = e[n]);\n    return r;\n}\nfunction E(e, t) {\n    Object.defineProperty(e, \"name\", {\n        value: t,\n        configurable: !0\n    });\n}\nvar Gs = new Set, ar = (e, t, ...r)=>{\n    Gs.has(e) || (Gs.add(e), qi(t, ...r));\n};\nvar W = class extends Error {\n    constructor(r, { code: n, clientVersion: i, meta: o, batchRequestIdx: s }){\n        super(r);\n        this.name = \"PrismaClientKnownRequestError\", this.code = n, this.clientVersion = i, this.meta = o, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: s,\n            enumerable: !1,\n            writable: !0\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientKnownRequestError\";\n    }\n};\nE(W, \"PrismaClientKnownRequestError\");\nvar Ve = class extends W {\n    constructor(t, r){\n        super(t, {\n            code: \"P2025\",\n            clientVersion: r\n        }), this.name = \"NotFoundError\";\n    }\n};\nE(Ve, \"NotFoundError\");\nvar k = class e extends Error {\n    constructor(r, n, i){\n        super(r);\n        this.name = \"PrismaClientInitializationError\", this.clientVersion = n, this.errorCode = i, Error.captureStackTrace(e);\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientInitializationError\";\n    }\n};\nE(k, \"PrismaClientInitializationError\");\nvar he = class extends Error {\n    constructor(r, n){\n        super(r);\n        this.name = \"PrismaClientRustPanicError\", this.clientVersion = n;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientRustPanicError\";\n    }\n};\nE(he, \"PrismaClientRustPanicError\");\nvar z = class extends Error {\n    constructor(r, { clientVersion: n, batchRequestIdx: i }){\n        super(r);\n        this.name = \"PrismaClientUnknownRequestError\", this.clientVersion = n, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: i,\n            writable: !0,\n            enumerable: !1\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientUnknownRequestError\";\n    }\n};\nE(z, \"PrismaClientUnknownRequestError\");\nvar se = class extends Error {\n    constructor(r, { clientVersion: n }){\n        super(r);\n        this.name = \"PrismaClientValidationError\";\n        this.clientVersion = n;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientValidationError\";\n    }\n};\nE(se, \"PrismaClientValidationError\");\nvar Ft = class {\n    constructor(t){\n        this._engine = t;\n    }\n    prometheus(t) {\n        return this._engine.metrics({\n            format: \"prometheus\",\n            ...t\n        });\n    }\n    json(t) {\n        return this._engine.metrics({\n            format: \"json\",\n            ...t\n        });\n    }\n};\nfunction ur(e) {\n    let t;\n    return {\n        get () {\n            return t || (t = {\n                value: e()\n            }), t.value;\n        }\n    };\n}\nfunction Js(e, t) {\n    let r = ur(()=>$c(t));\n    Object.defineProperty(e, \"dmmf\", {\n        get: ()=>r.get()\n    });\n}\nfunction $c(e) {\n    return {\n        datamodel: {\n            models: Ki(e.models),\n            enums: Ki(e.enums),\n            types: Ki(e.types)\n        }\n    };\n}\nfunction Ki(e) {\n    return Object.entries(e).map(([t, r])=>({\n            name: t,\n            ...r\n        }));\n}\nvar qc = [\n    \"JsonNullValueInput\",\n    \"NullableJsonNullValueInput\",\n    \"JsonNullValueFilter\"\n], pn = Symbol(), Qi = new WeakMap, ke = class {\n    constructor(t){\n        t === pn ? Qi.set(this, `Prisma.${this._getName()}`) : Qi.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);\n    }\n    _getName() {\n        return this.constructor.name;\n    }\n    toString() {\n        return Qi.get(this);\n    }\n}, cr = class extends ke {\n    _getNamespace() {\n        return \"NullTypes\";\n    }\n}, pr = class extends cr {\n};\nGi(pr, \"DbNull\");\nvar dr = class extends cr {\n};\nGi(dr, \"JsonNull\");\nvar mr = class extends cr {\n};\nGi(mr, \"AnyNull\");\nvar dn = {\n    classes: {\n        DbNull: pr,\n        JsonNull: dr,\n        AnyNull: mr\n    },\n    instances: {\n        DbNull: new pr(pn),\n        JsonNull: new dr(pn),\n        AnyNull: new mr(pn)\n    }\n};\nfunction Gi(e, t) {\n    Object.defineProperty(e, \"name\", {\n        value: t,\n        configurable: !0\n    });\n}\nfunction fr(e) {\n    return {\n        ok: !1,\n        error: e,\n        map () {\n            return fr(e);\n        },\n        flatMap () {\n            return fr(e);\n        }\n    };\n}\nvar Ji = class {\n    constructor(){\n        this.registeredErrors = [];\n    }\n    consumeError(t) {\n        return this.registeredErrors[t];\n    }\n    registerNewError(t) {\n        let r = 0;\n        for(; this.registeredErrors[r] !== void 0;)r++;\n        return this.registeredErrors[r] = {\n            error: t\n        }, r;\n    }\n}, Hi = (e)=>{\n    let t = new Ji, r = Ze(t, e.startTransaction.bind(e));\n    return {\n        errorRegistry: t,\n        queryRaw: Ze(t, e.queryRaw.bind(e)),\n        executeRaw: Ze(t, e.executeRaw.bind(e)),\n        flavour: e.flavour,\n        startTransaction: async (...n)=>(await r(...n)).map((o)=>jc(t, o)),\n        close: Ze(t, e.close.bind(e))\n    };\n}, jc = (e, t)=>({\n        flavour: t.flavour,\n        options: t.options,\n        queryRaw: Ze(e, t.queryRaw.bind(t)),\n        executeRaw: Ze(e, t.executeRaw.bind(t)),\n        commit: Ze(e, t.commit.bind(t)),\n        rollback: Ze(e, t.rollback.bind(t)),\n        dispose: Vc(e, t.dispose.bind(t))\n    });\nfunction Ze(e, t) {\n    return async (...r)=>{\n        try {\n            return await t(...r);\n        } catch (n) {\n            let i = e.registerNewError(n);\n            return fr({\n                kind: \"GenericJs\",\n                id: i\n            });\n        }\n    };\n}\nfunction Vc(e, t) {\n    return (...r)=>{\n        try {\n            return t(...r);\n        } catch (n) {\n            let i = e.registerNewError(n);\n            return fr({\n                kind: \"GenericJs\",\n                id: i\n            });\n        }\n    };\n}\nvar du = __webpack_require__(/*! async_hooks */ \"async_hooks\"), mu = __webpack_require__(/*! events */ \"events\"), fu = I(__webpack_require__(/*! fs */ \"fs\")), Vr = I(__webpack_require__(/*! path */ \"path\"));\nvar me = class e {\n    constructor(t, r){\n        if (t.length - 1 !== r.length) throw t.length === 0 ? new TypeError(\"Expected at least 1 string\") : new TypeError(`Expected ${t.length} strings to have ${t.length - 1} values`);\n        let n = r.reduce((s, a)=>s + (a instanceof e ? a.values.length : 1), 0);\n        this.values = new Array(n), this.strings = new Array(n + 1), this.strings[0] = t[0];\n        let i = 0, o = 0;\n        for(; i < r.length;){\n            let s = r[i++], a = t[i];\n            if (s instanceof e) {\n                this.strings[o] += s.strings[0];\n                let l = 0;\n                for(; l < s.values.length;)this.values[o++] = s.values[l++], this.strings[o] = s.strings[l];\n                this.strings[o] += a;\n            } else this.values[o++] = s, this.strings[o] = a;\n        }\n    }\n    get text() {\n        let t = 1, r = this.strings[0];\n        for(; t < this.strings.length;)r += `$${t}${this.strings[t++]}`;\n        return r;\n    }\n    get sql() {\n        let t = 1, r = this.strings[0];\n        for(; t < this.strings.length;)r += `?${this.strings[t++]}`;\n        return r;\n    }\n    inspect() {\n        return {\n            text: this.text,\n            sql: this.sql,\n            values: this.values\n        };\n    }\n};\nfunction Hs(e, t = \",\", r = \"\", n = \"\") {\n    if (e.length === 0) throw new TypeError(\"Expected `join([])` to be called with an array of multiple elements, but got an empty array\");\n    return new me([\n        r,\n        ...Array(e.length - 1).fill(t),\n        n\n    ], e);\n}\nfunction Wi(e) {\n    return new me([\n        e\n    ], []);\n}\nvar Ws = Wi(\"\");\nfunction zi(e, ...t) {\n    return new me(e, t);\n}\nfunction gr(e) {\n    return {\n        getKeys () {\n            return Object.keys(e);\n        },\n        getPropertyValue (t) {\n            return e[t];\n        }\n    };\n}\nfunction ue(e, t) {\n    return {\n        getKeys () {\n            return [\n                e\n            ];\n        },\n        getPropertyValue () {\n            return t();\n        }\n    };\n}\nvar Ie = class {\n    constructor(){\n        this._map = new Map;\n    }\n    get(t) {\n        return this._map.get(t)?.value;\n    }\n    set(t, r) {\n        this._map.set(t, {\n            value: r\n        });\n    }\n    getOrCreate(t, r) {\n        let n = this._map.get(t);\n        if (n) return n.value;\n        let i = r();\n        return this.set(t, i), i;\n    }\n};\nfunction gt(e) {\n    let t = new Ie;\n    return {\n        getKeys () {\n            return e.getKeys();\n        },\n        getPropertyValue (r) {\n            return t.getOrCreate(r, ()=>e.getPropertyValue(r));\n        },\n        getPropertyDescriptor (r) {\n            return e.getPropertyDescriptor?.(r);\n        }\n    };\n}\nvar Zs = __webpack_require__(/*! util */ \"util\");\nvar mn = {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n};\nfunction fn(e) {\n    let t = new Set(e);\n    return {\n        getOwnPropertyDescriptor: ()=>mn,\n        has: (r, n)=>t.has(n),\n        set: (r, n, i)=>t.add(n) && Reflect.set(r, n, i),\n        ownKeys: ()=>[\n                ...t\n            ]\n    };\n}\nvar zs = Symbol.for(\"nodejs.util.inspect.custom\");\nfunction Fe(e, t) {\n    let r = Bc(t), n = new Set, i = new Proxy(e, {\n        get (o, s) {\n            if (n.has(s)) return o[s];\n            let a = r.get(s);\n            return a ? a.getPropertyValue(s) : o[s];\n        },\n        has (o, s) {\n            if (n.has(s)) return !0;\n            let a = r.get(s);\n            return a ? a.has?.(s) ?? !0 : Reflect.has(o, s);\n        },\n        ownKeys (o) {\n            let s = Ys(Reflect.ownKeys(o), r), a = Ys(Array.from(r.keys()), r);\n            return [\n                ...new Set([\n                    ...s,\n                    ...a,\n                    ...n\n                ])\n            ];\n        },\n        set (o, s, a) {\n            return r.get(s)?.getPropertyDescriptor?.(s)?.writable === !1 ? !1 : (n.add(s), Reflect.set(o, s, a));\n        },\n        getOwnPropertyDescriptor (o, s) {\n            let a = Reflect.getOwnPropertyDescriptor(o, s);\n            if (a && !a.configurable) return a;\n            let l = r.get(s);\n            return l ? l.getPropertyDescriptor ? {\n                ...mn,\n                ...l?.getPropertyDescriptor(s)\n            } : mn : a;\n        },\n        defineProperty (o, s, a) {\n            return n.add(s), Reflect.defineProperty(o, s, a);\n        }\n    });\n    return i[zs] = function(o, s, a = Zs.inspect) {\n        let l = {\n            ...this\n        };\n        return delete l[zs], a(l, s);\n    }, i;\n}\nfunction Bc(e) {\n    let t = new Map;\n    for (let r of e){\n        let n = r.getKeys();\n        for (let i of n)t.set(i, r);\n    }\n    return t;\n}\nfunction Ys(e, t) {\n    return e.filter((r)=>t.get(r)?.has?.(r) ?? !0);\n}\nfunction yr(e) {\n    return {\n        getKeys () {\n            return e;\n        },\n        has () {\n            return !1;\n        },\n        getPropertyValue () {}\n    };\n}\nvar Dt = class {\n    constructor(t = 0, r){\n        this.context = r;\n        this.lines = [];\n        this.currentLine = \"\";\n        this.currentIndent = 0;\n        this.currentIndent = t;\n    }\n    write(t) {\n        return typeof t == \"string\" ? this.currentLine += t : t.write(this), this;\n    }\n    writeJoined(t, r) {\n        let n = r.length - 1;\n        for(let i = 0; i < r.length; i++)this.write(r[i]), i !== n && this.write(t);\n        return this;\n    }\n    writeLine(t) {\n        return this.write(t).newLine();\n    }\n    newLine() {\n        this.lines.push(this.indentedCurrentLine()), this.currentLine = \"\", this.marginSymbol = void 0;\n        let t = this.afterNextNewLineCallback;\n        return this.afterNextNewLineCallback = void 0, t?.(), this;\n    }\n    withIndent(t) {\n        return this.indent(), t(this), this.unindent(), this;\n    }\n    afterNextNewline(t) {\n        return this.afterNextNewLineCallback = t, this;\n    }\n    indent() {\n        return this.currentIndent++, this;\n    }\n    unindent() {\n        return this.currentIndent > 0 && this.currentIndent--, this;\n    }\n    addMarginSymbol(t) {\n        return this.marginSymbol = t, this;\n    }\n    toString() {\n        return this.lines.concat(this.indentedCurrentLine()).join(`\n`);\n    }\n    getCurrentLineLength() {\n        return this.currentLine.length;\n    }\n    indentedCurrentLine() {\n        let t = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent);\n        return this.marginSymbol ? this.marginSymbol + t.slice(1) : t;\n    }\n};\nfunction Ot(e) {\n    return e instanceof Date || Object.prototype.toString.call(e) === \"[object Date]\";\n}\nfunction gn(e) {\n    return e.toString() !== \"Invalid Date\";\n}\nvar Nt = 9e15, rt = 1e9, Yi = \"0123456789abcdef\", hn = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\", xn = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\", Zi = {\n    precision: 20,\n    rounding: 4,\n    modulo: 1,\n    toExpNeg: -7,\n    toExpPos: 21,\n    minE: -Nt,\n    maxE: Nt,\n    crypto: !1\n}, ra, Be, P = !0, wn = \"[DecimalError] \", tt = wn + \"Invalid argument: \", na = wn + \"Precision limit exceeded\", ia = wn + \"crypto unavailable\", oa = \"[object Decimal]\", ae = Math.floor, Q = Math.pow, Uc = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i, Kc = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i, Qc = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i, sa = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, Ce = 1e7, w = 7, Gc = 9007199254740991, Jc = hn.length - 1, Xi = xn.length - 1, m = {\n    toStringTag: oa\n};\nm.absoluteValue = m.abs = function() {\n    var e = new this.constructor(this);\n    return e.s < 0 && (e.s = 1), x(e);\n};\nm.ceil = function() {\n    return x(new this.constructor(this), this.e + 1, 2);\n};\nm.clampedTo = m.clamp = function(e, t) {\n    var r, n = this, i = n.constructor;\n    if (e = new i(e), t = new i(t), !e.s || !t.s) return new i(NaN);\n    if (e.gt(t)) throw Error(tt + t);\n    return r = n.cmp(e), r < 0 ? e : n.cmp(t) > 0 ? t : new i(n);\n};\nm.comparedTo = m.cmp = function(e) {\n    var t, r, n, i, o = this, s = o.d, a = (e = new o.constructor(e)).d, l = o.s, u = e.s;\n    if (!s || !a) return !l || !u ? NaN : l !== u ? l : s === a ? 0 : !s ^ l < 0 ? 1 : -1;\n    if (!s[0] || !a[0]) return s[0] ? l : a[0] ? -u : 0;\n    if (l !== u) return l;\n    if (o.e !== e.e) return o.e > e.e ^ l < 0 ? 1 : -1;\n    for(n = s.length, i = a.length, t = 0, r = n < i ? n : i; t < r; ++t)if (s[t] !== a[t]) return s[t] > a[t] ^ l < 0 ? 1 : -1;\n    return n === i ? 0 : n > i ^ l < 0 ? 1 : -1;\n};\nm.cosine = m.cos = function() {\n    var e, t, r = this, n = r.constructor;\n    return r.d ? r.d[0] ? (e = n.precision, t = n.rounding, n.precision = e + Math.max(r.e, r.sd()) + w, n.rounding = 1, r = Hc(n, pa(n, r)), n.precision = e, n.rounding = t, x(Be == 2 || Be == 3 ? r.neg() : r, e, t, !0)) : new n(1) : new n(NaN);\n};\nm.cubeRoot = m.cbrt = function() {\n    var e, t, r, n, i, o, s, a, l, u, c = this, p = c.constructor;\n    if (!c.isFinite() || c.isZero()) return new p(c);\n    for(P = !1, o = c.s * Q(c.s * c, 1 / 3), !o || Math.abs(o) == 1 / 0 ? (r = te(c.d), e = c.e, (o = (e - r.length + 1) % 3) && (r += o == 1 || o == -2 ? \"0\" : \"00\"), o = Q(r, 1 / 3), e = ae((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2)), o == 1 / 0 ? r = \"5e\" + e : (r = o.toExponential(), r = r.slice(0, r.indexOf(\"e\") + 1) + e), n = new p(r), n.s = c.s) : n = new p(o.toString()), s = (e = p.precision) + 3;;)if (a = n, l = a.times(a).times(a), u = l.plus(c), n = N(u.plus(c).times(a), u.plus(l), s + 2, 1), te(a.d).slice(0, s) === (r = te(n.d)).slice(0, s)) if (r = r.slice(s - 3, s + 1), r == \"9999\" || !i && r == \"4999\") {\n        if (!i && (x(a, e + 1, 0), a.times(a).times(a).eq(c))) {\n            n = a;\n            break;\n        }\n        s += 4, i = 1;\n    } else {\n        (!+r || !+r.slice(1) && r.charAt(0) == \"5\") && (x(n, e + 1, 1), t = !n.times(n).times(n).eq(c));\n        break;\n    }\n    return P = !0, x(n, e, p.rounding, t);\n};\nm.decimalPlaces = m.dp = function() {\n    var e, t = this.d, r = NaN;\n    if (t) {\n        if (e = t.length - 1, r = (e - ae(this.e / w)) * w, e = t[e], e) for(; e % 10 == 0; e /= 10)r--;\n        r < 0 && (r = 0);\n    }\n    return r;\n};\nm.dividedBy = m.div = function(e) {\n    return N(this, new this.constructor(e));\n};\nm.dividedToIntegerBy = m.divToInt = function(e) {\n    var t = this, r = t.constructor;\n    return x(N(t, new r(e), 0, 1, 1), r.precision, r.rounding);\n};\nm.equals = m.eq = function(e) {\n    return this.cmp(e) === 0;\n};\nm.floor = function() {\n    return x(new this.constructor(this), this.e + 1, 3);\n};\nm.greaterThan = m.gt = function(e) {\n    return this.cmp(e) > 0;\n};\nm.greaterThanOrEqualTo = m.gte = function(e) {\n    var t = this.cmp(e);\n    return t == 1 || t === 0;\n};\nm.hyperbolicCosine = m.cosh = function() {\n    var e, t, r, n, i, o = this, s = o.constructor, a = new s(1);\n    if (!o.isFinite()) return new s(o.s ? 1 / 0 : NaN);\n    if (o.isZero()) return a;\n    r = s.precision, n = s.rounding, s.precision = r + Math.max(o.e, o.sd()) + 4, s.rounding = 1, i = o.d.length, i < 32 ? (e = Math.ceil(i / 3), t = (1 / Pn(4, e)).toString()) : (e = 16, t = \"2.3283064365386962890625e-10\"), o = Lt(s, 1, o.times(t), new s(1), !0);\n    for(var l, u = e, c = new s(8); u--;)l = o.times(o), o = a.minus(l.times(c.minus(l.times(c))));\n    return x(o, s.precision = r, s.rounding = n, !0);\n};\nm.hyperbolicSine = m.sinh = function() {\n    var e, t, r, n, i = this, o = i.constructor;\n    if (!i.isFinite() || i.isZero()) return new o(i);\n    if (t = o.precision, r = o.rounding, o.precision = t + Math.max(i.e, i.sd()) + 4, o.rounding = 1, n = i.d.length, n < 3) i = Lt(o, 2, i, i, !0);\n    else {\n        e = 1.4 * Math.sqrt(n), e = e > 16 ? 16 : e | 0, i = i.times(1 / Pn(5, e)), i = Lt(o, 2, i, i, !0);\n        for(var s, a = new o(5), l = new o(16), u = new o(20); e--;)s = i.times(i), i = i.times(a.plus(s.times(l.times(s).plus(u))));\n    }\n    return o.precision = t, o.rounding = r, x(i, t, r, !0);\n};\nm.hyperbolicTangent = m.tanh = function() {\n    var e, t, r = this, n = r.constructor;\n    return r.isFinite() ? r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + 7, n.rounding = 1, N(r.sinh(), r.cosh(), n.precision = e, n.rounding = t)) : new n(r.s);\n};\nm.inverseCosine = m.acos = function() {\n    var e, t = this, r = t.constructor, n = t.abs().cmp(1), i = r.precision, o = r.rounding;\n    return n !== -1 ? n === 0 ? t.isNeg() ? Te(r, i, o) : new r(0) : new r(NaN) : t.isZero() ? Te(r, i + 4, o).times(.5) : (r.precision = i + 6, r.rounding = 1, t = t.asin(), e = Te(r, i + 4, o).times(.5), r.precision = i, r.rounding = o, e.minus(t));\n};\nm.inverseHyperbolicCosine = m.acosh = function() {\n    var e, t, r = this, n = r.constructor;\n    return r.lte(1) ? new n(r.eq(1) ? 0 : NaN) : r.isFinite() ? (e = n.precision, t = n.rounding, n.precision = e + Math.max(Math.abs(r.e), r.sd()) + 4, n.rounding = 1, P = !1, r = r.times(r).minus(1).sqrt().plus(r), P = !0, n.precision = e, n.rounding = t, r.ln()) : new n(r);\n};\nm.inverseHyperbolicSine = m.asinh = function() {\n    var e, t, r = this, n = r.constructor;\n    return !r.isFinite() || r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + 2 * Math.max(Math.abs(r.e), r.sd()) + 6, n.rounding = 1, P = !1, r = r.times(r).plus(1).sqrt().plus(r), P = !0, n.precision = e, n.rounding = t, r.ln());\n};\nm.inverseHyperbolicTangent = m.atanh = function() {\n    var e, t, r, n, i = this, o = i.constructor;\n    return i.isFinite() ? i.e >= 0 ? new o(i.abs().eq(1) ? i.s / 0 : i.isZero() ? i : NaN) : (e = o.precision, t = o.rounding, n = i.sd(), Math.max(n, e) < 2 * -i.e - 1 ? x(new o(i), e, t, !0) : (o.precision = r = n - i.e, i = N(i.plus(1), new o(1).minus(i), r + e, 1), o.precision = e + 4, o.rounding = 1, i = i.ln(), o.precision = e, o.rounding = t, i.times(.5))) : new o(NaN);\n};\nm.inverseSine = m.asin = function() {\n    var e, t, r, n, i = this, o = i.constructor;\n    return i.isZero() ? new o(i) : (t = i.abs().cmp(1), r = o.precision, n = o.rounding, t !== -1 ? t === 0 ? (e = Te(o, r + 4, n).times(.5), e.s = i.s, e) : new o(NaN) : (o.precision = r + 6, o.rounding = 1, i = i.div(new o(1).minus(i.times(i)).sqrt().plus(1)).atan(), o.precision = r, o.rounding = n, i.times(2)));\n};\nm.inverseTangent = m.atan = function() {\n    var e, t, r, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, d = c.rounding;\n    if (u.isFinite()) {\n        if (u.isZero()) return new c(u);\n        if (u.abs().eq(1) && p + 4 <= Xi) return s = Te(c, p + 4, d).times(.25), s.s = u.s, s;\n    } else {\n        if (!u.s) return new c(NaN);\n        if (p + 4 <= Xi) return s = Te(c, p + 4, d).times(.5), s.s = u.s, s;\n    }\n    for(c.precision = a = p + 10, c.rounding = 1, r = Math.min(28, a / w + 2 | 0), e = r; e; --e)u = u.div(u.times(u).plus(1).sqrt().plus(1));\n    for(P = !1, t = Math.ceil(a / w), n = 1, l = u.times(u), s = new c(u), i = u; e !== -1;)if (i = i.times(l), o = s.minus(i.div(n += 2)), i = i.times(l), s = o.plus(i.div(n += 2)), s.d[t] !== void 0) for(e = t; s.d[e] === o.d[e] && e--;);\n    return r && (s = s.times(2 << r - 1)), P = !0, x(s, c.precision = p, c.rounding = d, !0);\n};\nm.isFinite = function() {\n    return !!this.d;\n};\nm.isInteger = m.isInt = function() {\n    return !!this.d && ae(this.e / w) > this.d.length - 2;\n};\nm.isNaN = function() {\n    return !this.s;\n};\nm.isNegative = m.isNeg = function() {\n    return this.s < 0;\n};\nm.isPositive = m.isPos = function() {\n    return this.s > 0;\n};\nm.isZero = function() {\n    return !!this.d && this.d[0] === 0;\n};\nm.lessThan = m.lt = function(e) {\n    return this.cmp(e) < 0;\n};\nm.lessThanOrEqualTo = m.lte = function(e) {\n    return this.cmp(e) < 1;\n};\nm.logarithm = m.log = function(e) {\n    var t, r, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, d = c.rounding, f = 5;\n    if (e == null) e = new c(10), t = !0;\n    else {\n        if (e = new c(e), r = e.d, e.s < 0 || !r || !r[0] || e.eq(1)) return new c(NaN);\n        t = e.eq(10);\n    }\n    if (r = u.d, u.s < 0 || !r || !r[0] || u.eq(1)) return new c(r && !r[0] ? -1 / 0 : u.s != 1 ? NaN : r ? 0 : 1 / 0);\n    if (t) if (r.length > 1) o = !0;\n    else {\n        for(i = r[0]; i % 10 === 0;)i /= 10;\n        o = i !== 1;\n    }\n    if (P = !1, a = p + f, s = et(u, a), n = t ? bn(c, a + 10) : et(e, a), l = N(s, n, a, 1), hr(l.d, i = p, d)) do if (a += 10, s = et(u, a), n = t ? bn(c, a + 10) : et(e, a), l = N(s, n, a, 1), !o) {\n        +te(l.d).slice(i + 1, i + 15) + 1 == 1e14 && (l = x(l, p + 1, 0));\n        break;\n    }\n    while (hr(l.d, i += 10, d));\n    return P = !0, x(l, p, d);\n};\nm.minus = m.sub = function(e) {\n    var t, r, n, i, o, s, a, l, u, c, p, d, f = this, y = f.constructor;\n    if (e = new y(e), !f.d || !e.d) return !f.s || !e.s ? e = new y(NaN) : f.d ? e.s = -e.s : e = new y(e.d || f.s !== e.s ? f : NaN), e;\n    if (f.s != e.s) return e.s = -e.s, f.plus(e);\n    if (u = f.d, d = e.d, a = y.precision, l = y.rounding, !u[0] || !d[0]) {\n        if (d[0]) e.s = -e.s;\n        else if (u[0]) e = new y(f);\n        else return new y(l === 3 ? -0 : 0);\n        return P ? x(e, a, l) : e;\n    }\n    if (r = ae(e.e / w), c = ae(f.e / w), u = u.slice(), o = c - r, o) {\n        for(p = o < 0, p ? (t = u, o = -o, s = d.length) : (t = d, r = c, s = u.length), n = Math.max(Math.ceil(a / w), s) + 2, o > n && (o = n, t.length = 1), t.reverse(), n = o; n--;)t.push(0);\n        t.reverse();\n    } else {\n        for(n = u.length, s = d.length, p = n < s, p && (s = n), n = 0; n < s; n++)if (u[n] != d[n]) {\n            p = u[n] < d[n];\n            break;\n        }\n        o = 0;\n    }\n    for(p && (t = u, u = d, d = t, e.s = -e.s), s = u.length, n = d.length - s; n > 0; --n)u[s++] = 0;\n    for(n = d.length; n > o;){\n        if (u[--n] < d[n]) {\n            for(i = n; i && u[--i] === 0;)u[i] = Ce - 1;\n            --u[i], u[n] += Ce;\n        }\n        u[n] -= d[n];\n    }\n    for(; u[--s] === 0;)u.pop();\n    for(; u[0] === 0; u.shift())--r;\n    return u[0] ? (e.d = u, e.e = En(u, r), P ? x(e, a, l) : e) : new y(l === 3 ? -0 : 0);\n};\nm.modulo = m.mod = function(e) {\n    var t, r = this, n = r.constructor;\n    return e = new n(e), !r.d || !e.s || e.d && !e.d[0] ? new n(NaN) : !e.d || r.d && !r.d[0] ? x(new n(r), n.precision, n.rounding) : (P = !1, n.modulo == 9 ? (t = N(r, e.abs(), 0, 3, 1), t.s *= e.s) : t = N(r, e, 0, n.modulo, 1), t = t.times(e), P = !0, r.minus(t));\n};\nm.naturalExponential = m.exp = function() {\n    return eo(this);\n};\nm.naturalLogarithm = m.ln = function() {\n    return et(this);\n};\nm.negated = m.neg = function() {\n    var e = new this.constructor(this);\n    return e.s = -e.s, x(e);\n};\nm.plus = m.add = function(e) {\n    var t, r, n, i, o, s, a, l, u, c, p = this, d = p.constructor;\n    if (e = new d(e), !p.d || !e.d) return !p.s || !e.s ? e = new d(NaN) : p.d || (e = new d(e.d || p.s === e.s ? p : NaN)), e;\n    if (p.s != e.s) return e.s = -e.s, p.minus(e);\n    if (u = p.d, c = e.d, a = d.precision, l = d.rounding, !u[0] || !c[0]) return c[0] || (e = new d(p)), P ? x(e, a, l) : e;\n    if (o = ae(p.e / w), n = ae(e.e / w), u = u.slice(), i = o - n, i) {\n        for(i < 0 ? (r = u, i = -i, s = c.length) : (r = c, n = o, s = u.length), o = Math.ceil(a / w), s = o > s ? o + 1 : s + 1, i > s && (i = s, r.length = 1), r.reverse(); i--;)r.push(0);\n        r.reverse();\n    }\n    for(s = u.length, i = c.length, s - i < 0 && (i = s, r = c, c = u, u = r), t = 0; i;)t = (u[--i] = u[i] + c[i] + t) / Ce | 0, u[i] %= Ce;\n    for(t && (u.unshift(t), ++n), s = u.length; u[--s] == 0;)u.pop();\n    return e.d = u, e.e = En(u, n), P ? x(e, a, l) : e;\n};\nm.precision = m.sd = function(e) {\n    var t, r = this;\n    if (e !== void 0 && e !== !!e && e !== 1 && e !== 0) throw Error(tt + e);\n    return r.d ? (t = aa(r.d), e && r.e + 1 > t && (t = r.e + 1)) : t = NaN, t;\n};\nm.round = function() {\n    var e = this, t = e.constructor;\n    return x(new t(e), e.e + 1, t.rounding);\n};\nm.sine = m.sin = function() {\n    var e, t, r = this, n = r.constructor;\n    return r.isFinite() ? r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + Math.max(r.e, r.sd()) + w, n.rounding = 1, r = zc(n, pa(n, r)), n.precision = e, n.rounding = t, x(Be > 2 ? r.neg() : r, e, t, !0)) : new n(NaN);\n};\nm.squareRoot = m.sqrt = function() {\n    var e, t, r, n, i, o, s = this, a = s.d, l = s.e, u = s.s, c = s.constructor;\n    if (u !== 1 || !a || !a[0]) return new c(!u || u < 0 && (!a || a[0]) ? NaN : a ? s : 1 / 0);\n    for(P = !1, u = Math.sqrt(+s), u == 0 || u == 1 / 0 ? (t = te(a), (t.length + l) % 2 == 0 && (t += \"0\"), u = Math.sqrt(t), l = ae((l + 1) / 2) - (l < 0 || l % 2), u == 1 / 0 ? t = \"5e\" + l : (t = u.toExponential(), t = t.slice(0, t.indexOf(\"e\") + 1) + l), n = new c(t)) : n = new c(u.toString()), r = (l = c.precision) + 3;;)if (o = n, n = o.plus(N(s, o, r + 2, 1)).times(.5), te(o.d).slice(0, r) === (t = te(n.d)).slice(0, r)) if (t = t.slice(r - 3, r + 1), t == \"9999\" || !i && t == \"4999\") {\n        if (!i && (x(o, l + 1, 0), o.times(o).eq(s))) {\n            n = o;\n            break;\n        }\n        r += 4, i = 1;\n    } else {\n        (!+t || !+t.slice(1) && t.charAt(0) == \"5\") && (x(n, l + 1, 1), e = !n.times(n).eq(s));\n        break;\n    }\n    return P = !0, x(n, l, c.rounding, e);\n};\nm.tangent = m.tan = function() {\n    var e, t, r = this, n = r.constructor;\n    return r.isFinite() ? r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + 10, n.rounding = 1, r = r.sin(), r.s = 1, r = N(r, new n(1).minus(r.times(r)).sqrt(), e + 10, 0), n.precision = e, n.rounding = t, x(Be == 2 || Be == 4 ? r.neg() : r, e, t, !0)) : new n(NaN);\n};\nm.times = m.mul = function(e) {\n    var t, r, n, i, o, s, a, l, u, c = this, p = c.constructor, d = c.d, f = (e = new p(e)).d;\n    if (e.s *= c.s, !d || !d[0] || !f || !f[0]) return new p(!e.s || d && !d[0] && !f || f && !f[0] && !d ? NaN : !d || !f ? e.s / 0 : e.s * 0);\n    for(r = ae(c.e / w) + ae(e.e / w), l = d.length, u = f.length, l < u && (o = d, d = f, f = o, s = l, l = u, u = s), o = [], s = l + u, n = s; n--;)o.push(0);\n    for(n = u; --n >= 0;){\n        for(t = 0, i = l + n; i > n;)a = o[i] + f[n] * d[i - n - 1] + t, o[i--] = a % Ce | 0, t = a / Ce | 0;\n        o[i] = (o[i] + t) % Ce | 0;\n    }\n    for(; !o[--s];)o.pop();\n    return t ? ++r : o.shift(), e.d = o, e.e = En(o, r), P ? x(e, p.precision, p.rounding) : e;\n};\nm.toBinary = function(e, t) {\n    return ro(this, 2, e, t);\n};\nm.toDecimalPlaces = m.toDP = function(e, t) {\n    var r = this, n = r.constructor;\n    return r = new n(r), e === void 0 ? r : (fe(e, 0, rt), t === void 0 ? t = n.rounding : fe(t, 0, 8), x(r, e + r.e + 1, t));\n};\nm.toExponential = function(e, t) {\n    var r, n = this, i = n.constructor;\n    return e === void 0 ? r = De(n, !0) : (fe(e, 0, rt), t === void 0 ? t = i.rounding : fe(t, 0, 8), n = x(new i(n), e + 1, t), r = De(n, !0, e + 1)), n.isNeg() && !n.isZero() ? \"-\" + r : r;\n};\nm.toFixed = function(e, t) {\n    var r, n, i = this, o = i.constructor;\n    return e === void 0 ? r = De(i) : (fe(e, 0, rt), t === void 0 ? t = o.rounding : fe(t, 0, 8), n = x(new o(i), e + i.e + 1, t), r = De(n, !1, e + n.e + 1)), i.isNeg() && !i.isZero() ? \"-\" + r : r;\n};\nm.toFraction = function(e) {\n    var t, r, n, i, o, s, a, l, u, c, p, d, f = this, y = f.d, g = f.constructor;\n    if (!y) return new g(f);\n    if (u = r = new g(1), n = l = new g(0), t = new g(n), o = t.e = aa(y) - f.e - 1, s = o % w, t.d[0] = Q(10, s < 0 ? w + s : s), e == null) e = o > 0 ? t : u;\n    else {\n        if (a = new g(e), !a.isInt() || a.lt(u)) throw Error(tt + a);\n        e = a.gt(t) ? o > 0 ? t : u : a;\n    }\n    for(P = !1, a = new g(te(y)), c = g.precision, g.precision = o = y.length * w * 2; p = N(a, t, 0, 1, 1), i = r.plus(p.times(n)), i.cmp(e) != 1;)r = n, n = i, i = u, u = l.plus(p.times(i)), l = i, i = t, t = a.minus(p.times(i)), a = i;\n    return i = N(e.minus(r), n, 0, 1, 1), l = l.plus(i.times(u)), r = r.plus(i.times(n)), l.s = u.s = f.s, d = N(u, n, o, 1).minus(f).abs().cmp(N(l, r, o, 1).minus(f).abs()) < 1 ? [\n        u,\n        n\n    ] : [\n        l,\n        r\n    ], g.precision = c, P = !0, d;\n};\nm.toHexadecimal = m.toHex = function(e, t) {\n    return ro(this, 16, e, t);\n};\nm.toNearest = function(e, t) {\n    var r = this, n = r.constructor;\n    if (r = new n(r), e == null) {\n        if (!r.d) return r;\n        e = new n(1), t = n.rounding;\n    } else {\n        if (e = new n(e), t === void 0 ? t = n.rounding : fe(t, 0, 8), !r.d) return e.s ? r : e;\n        if (!e.d) return e.s && (e.s = r.s), e;\n    }\n    return e.d[0] ? (P = !1, r = N(r, e, 0, t, 1).times(e), P = !0, x(r)) : (e.s = r.s, r = e), r;\n};\nm.toNumber = function() {\n    return +this;\n};\nm.toOctal = function(e, t) {\n    return ro(this, 8, e, t);\n};\nm.toPower = m.pow = function(e) {\n    var t, r, n, i, o, s, a = this, l = a.constructor, u = +(e = new l(e));\n    if (!a.d || !e.d || !a.d[0] || !e.d[0]) return new l(Q(+a, u));\n    if (a = new l(a), a.eq(1)) return a;\n    if (n = l.precision, o = l.rounding, e.eq(1)) return x(a, n, o);\n    if (t = ae(e.e / w), t >= e.d.length - 1 && (r = u < 0 ? -u : u) <= Gc) return i = la(l, a, r, n), e.s < 0 ? new l(1).div(i) : x(i, n, o);\n    if (s = a.s, s < 0) {\n        if (t < e.d.length - 1) return new l(NaN);\n        if (e.d[t] & 1 || (s = 1), a.e == 0 && a.d[0] == 1 && a.d.length == 1) return a.s = s, a;\n    }\n    return r = Q(+a, u), t = r == 0 || !isFinite(r) ? ae(u * (Math.log(\"0.\" + te(a.d)) / Math.LN10 + a.e + 1)) : new l(r + \"\").e, t > l.maxE + 1 || t < l.minE - 1 ? new l(t > 0 ? s / 0 : 0) : (P = !1, l.rounding = a.s = 1, r = Math.min(12, (t + \"\").length), i = eo(e.times(et(a, n + r)), n), i.d && (i = x(i, n + 5, 1), hr(i.d, n, o) && (t = n + 10, i = x(eo(e.times(et(a, t + r)), t), t + 5, 1), +te(i.d).slice(n + 1, n + 15) + 1 == 1e14 && (i = x(i, n + 1, 0)))), i.s = s, P = !0, l.rounding = o, x(i, n, o));\n};\nm.toPrecision = function(e, t) {\n    var r, n = this, i = n.constructor;\n    return e === void 0 ? r = De(n, n.e <= i.toExpNeg || n.e >= i.toExpPos) : (fe(e, 1, rt), t === void 0 ? t = i.rounding : fe(t, 0, 8), n = x(new i(n), e, t), r = De(n, e <= n.e || n.e <= i.toExpNeg, e)), n.isNeg() && !n.isZero() ? \"-\" + r : r;\n};\nm.toSignificantDigits = m.toSD = function(e, t) {\n    var r = this, n = r.constructor;\n    return e === void 0 ? (e = n.precision, t = n.rounding) : (fe(e, 1, rt), t === void 0 ? t = n.rounding : fe(t, 0, 8)), x(new n(r), e, t);\n};\nm.toString = function() {\n    var e = this, t = e.constructor, r = De(e, e.e <= t.toExpNeg || e.e >= t.toExpPos);\n    return e.isNeg() && !e.isZero() ? \"-\" + r : r;\n};\nm.truncated = m.trunc = function() {\n    return x(new this.constructor(this), this.e + 1, 1);\n};\nm.valueOf = m.toJSON = function() {\n    var e = this, t = e.constructor, r = De(e, e.e <= t.toExpNeg || e.e >= t.toExpPos);\n    return e.isNeg() ? \"-\" + r : r;\n};\nfunction te(e) {\n    var t, r, n, i = e.length - 1, o = \"\", s = e[0];\n    if (i > 0) {\n        for(o += s, t = 1; t < i; t++)n = e[t] + \"\", r = w - n.length, r && (o += Xe(r)), o += n;\n        s = e[t], n = s + \"\", r = w - n.length, r && (o += Xe(r));\n    } else if (s === 0) return \"0\";\n    for(; s % 10 === 0;)s /= 10;\n    return o + s;\n}\nfunction fe(e, t, r) {\n    if (e !== ~~e || e < t || e > r) throw Error(tt + e);\n}\nfunction hr(e, t, r, n) {\n    var i, o, s, a;\n    for(o = e[0]; o >= 10; o /= 10)--t;\n    return --t < 0 ? (t += w, i = 0) : (i = Math.ceil((t + 1) / w), t %= w), o = Q(10, w - t), a = e[i] % o | 0, n == null ? t < 3 ? (t == 0 ? a = a / 100 | 0 : t == 1 && (a = a / 10 | 0), s = r < 4 && a == 99999 || r > 3 && a == 49999 || a == 5e4 || a == 0) : s = (r < 4 && a + 1 == o || r > 3 && a + 1 == o / 2) && (e[i + 1] / o / 100 | 0) == Q(10, t - 2) - 1 || (a == o / 2 || a == 0) && (e[i + 1] / o / 100 | 0) == 0 : t < 4 ? (t == 0 ? a = a / 1e3 | 0 : t == 1 ? a = a / 100 | 0 : t == 2 && (a = a / 10 | 0), s = (n || r < 4) && a == 9999 || !n && r > 3 && a == 4999) : s = ((n || r < 4) && a + 1 == o || !n && r > 3 && a + 1 == o / 2) && (e[i + 1] / o / 1e3 | 0) == Q(10, t - 3) - 1, s;\n}\nfunction yn(e, t, r) {\n    for(var n, i = [\n        0\n    ], o, s = 0, a = e.length; s < a;){\n        for(o = i.length; o--;)i[o] *= t;\n        for(i[0] += Yi.indexOf(e.charAt(s++)), n = 0; n < i.length; n++)i[n] > r - 1 && (i[n + 1] === void 0 && (i[n + 1] = 0), i[n + 1] += i[n] / r | 0, i[n] %= r);\n    }\n    return i.reverse();\n}\nfunction Hc(e, t) {\n    var r, n, i;\n    if (t.isZero()) return t;\n    n = t.d.length, n < 32 ? (r = Math.ceil(n / 3), i = (1 / Pn(4, r)).toString()) : (r = 16, i = \"2.3283064365386962890625e-10\"), e.precision += r, t = Lt(e, 1, t.times(i), new e(1));\n    for(var o = r; o--;){\n        var s = t.times(t);\n        t = s.times(s).minus(s).times(8).plus(1);\n    }\n    return e.precision -= r, t;\n}\nvar N = function() {\n    function e(n, i, o) {\n        var s, a = 0, l = n.length;\n        for(n = n.slice(); l--;)s = n[l] * i + a, n[l] = s % o | 0, a = s / o | 0;\n        return a && n.unshift(a), n;\n    }\n    function t(n, i, o, s) {\n        var a, l;\n        if (o != s) l = o > s ? 1 : -1;\n        else for(a = l = 0; a < o; a++)if (n[a] != i[a]) {\n            l = n[a] > i[a] ? 1 : -1;\n            break;\n        }\n        return l;\n    }\n    function r(n, i, o, s) {\n        for(var a = 0; o--;)n[o] -= a, a = n[o] < i[o] ? 1 : 0, n[o] = a * s + n[o] - i[o];\n        for(; !n[0] && n.length > 1;)n.shift();\n    }\n    return function(n, i, o, s, a, l) {\n        var u, c, p, d, f, y, g, v, C, _, b, M, be, X, lt, U, ne, qe, ie, Et, Br = n.constructor, ii = n.s == i.s ? 1 : -1, oe = n.d, O = i.d;\n        if (!oe || !oe[0] || !O || !O[0]) return new Br(!n.s || !i.s || (oe ? O && oe[0] == O[0] : !O) ? NaN : oe && oe[0] == 0 || !O ? ii * 0 : ii / 0);\n        for(l ? (f = 1, c = n.e - i.e) : (l = Ce, f = w, c = ae(n.e / f) - ae(i.e / f)), ie = O.length, ne = oe.length, C = new Br(ii), _ = C.d = [], p = 0; O[p] == (oe[p] || 0); p++);\n        if (O[p] > (oe[p] || 0) && c--, o == null ? (X = o = Br.precision, s = Br.rounding) : a ? X = o + (n.e - i.e) + 1 : X = o, X < 0) _.push(1), y = !0;\n        else {\n            if (X = X / f + 2 | 0, p = 0, ie == 1) {\n                for(d = 0, O = O[0], X++; (p < ne || d) && X--; p++)lt = d * l + (oe[p] || 0), _[p] = lt / O | 0, d = lt % O | 0;\n                y = d || p < ne;\n            } else {\n                for(d = l / (O[0] + 1) | 0, d > 1 && (O = e(O, d, l), oe = e(oe, d, l), ie = O.length, ne = oe.length), U = ie, b = oe.slice(0, ie), M = b.length; M < ie;)b[M++] = 0;\n                Et = O.slice(), Et.unshift(0), qe = O[0], O[1] >= l / 2 && ++qe;\n                do d = 0, u = t(O, b, ie, M), u < 0 ? (be = b[0], ie != M && (be = be * l + (b[1] || 0)), d = be / qe | 0, d > 1 ? (d >= l && (d = l - 1), g = e(O, d, l), v = g.length, M = b.length, u = t(g, b, v, M), u == 1 && (d--, r(g, ie < v ? Et : O, v, l))) : (d == 0 && (u = d = 1), g = O.slice()), v = g.length, v < M && g.unshift(0), r(b, g, M, l), u == -1 && (M = b.length, u = t(O, b, ie, M), u < 1 && (d++, r(b, ie < M ? Et : O, M, l))), M = b.length) : u === 0 && (d++, b = [\n                    0\n                ]), _[p++] = d, u && b[0] ? b[M++] = oe[U] || 0 : (b = [\n                    oe[U]\n                ], M = 1);\n                while ((U++ < ne || b[0] !== void 0) && X--);\n                y = b[0] !== void 0;\n            }\n            _[0] || _.shift();\n        }\n        if (f == 1) C.e = c, ra = y;\n        else {\n            for(p = 1, d = _[0]; d >= 10; d /= 10)p++;\n            C.e = p + c * f - 1, x(C, a ? o + C.e + 1 : o, s, y);\n        }\n        return C;\n    };\n}();\nfunction x(e, t, r, n) {\n    var i, o, s, a, l, u, c, p, d, f = e.constructor;\n    e: if (t != null) {\n        if (p = e.d, !p) return e;\n        for(i = 1, a = p[0]; a >= 10; a /= 10)i++;\n        if (o = t - i, o < 0) o += w, s = t, c = p[d = 0], l = c / Q(10, i - s - 1) % 10 | 0;\n        else if (d = Math.ceil((o + 1) / w), a = p.length, d >= a) if (n) {\n            for(; a++ <= d;)p.push(0);\n            c = l = 0, i = 1, o %= w, s = o - w + 1;\n        } else break e;\n        else {\n            for(c = a = p[d], i = 1; a >= 10; a /= 10)i++;\n            o %= w, s = o - w + i, l = s < 0 ? 0 : c / Q(10, i - s - 1) % 10 | 0;\n        }\n        if (n = n || t < 0 || p[d + 1] !== void 0 || (s < 0 ? c : c % Q(10, i - s - 1)), u = r < 4 ? (l || n) && (r == 0 || r == (e.s < 0 ? 3 : 2)) : l > 5 || l == 5 && (r == 4 || n || r == 6 && (o > 0 ? s > 0 ? c / Q(10, i - s) : 0 : p[d - 1]) % 10 & 1 || r == (e.s < 0 ? 8 : 7)), t < 1 || !p[0]) return p.length = 0, u ? (t -= e.e + 1, p[0] = Q(10, (w - t % w) % w), e.e = -t || 0) : p[0] = e.e = 0, e;\n        if (o == 0 ? (p.length = d, a = 1, d--) : (p.length = d + 1, a = Q(10, w - o), p[d] = s > 0 ? (c / Q(10, i - s) % Q(10, s) | 0) * a : 0), u) for(;;)if (d == 0) {\n            for(o = 1, s = p[0]; s >= 10; s /= 10)o++;\n            for(s = p[0] += a, a = 1; s >= 10; s /= 10)a++;\n            o != a && (e.e++, p[0] == Ce && (p[0] = 1));\n            break;\n        } else {\n            if (p[d] += a, p[d] != Ce) break;\n            p[d--] = 0, a = 1;\n        }\n        for(o = p.length; p[--o] === 0;)p.pop();\n    }\n    return P && (e.e > f.maxE ? (e.d = null, e.e = NaN) : e.e < f.minE && (e.e = 0, e.d = [\n        0\n    ])), e;\n}\nfunction De(e, t, r) {\n    if (!e.isFinite()) return ca(e);\n    var n, i = e.e, o = te(e.d), s = o.length;\n    return t ? (r && (n = r - s) > 0 ? o = o.charAt(0) + \".\" + o.slice(1) + Xe(n) : s > 1 && (o = o.charAt(0) + \".\" + o.slice(1)), o = o + (e.e < 0 ? \"e\" : \"e+\") + e.e) : i < 0 ? (o = \"0.\" + Xe(-i - 1) + o, r && (n = r - s) > 0 && (o += Xe(n))) : i >= s ? (o += Xe(i + 1 - s), r && (n = r - i - 1) > 0 && (o = o + \".\" + Xe(n))) : ((n = i + 1) < s && (o = o.slice(0, n) + \".\" + o.slice(n)), r && (n = r - s) > 0 && (i + 1 === s && (o += \".\"), o += Xe(n))), o;\n}\nfunction En(e, t) {\n    var r = e[0];\n    for(t *= w; r >= 10; r /= 10)t++;\n    return t;\n}\nfunction bn(e, t, r) {\n    if (t > Jc) throw P = !0, r && (e.precision = r), Error(na);\n    return x(new e(hn), t, 1, !0);\n}\nfunction Te(e, t, r) {\n    if (t > Xi) throw Error(na);\n    return x(new e(xn), t, r, !0);\n}\nfunction aa(e) {\n    var t = e.length - 1, r = t * w + 1;\n    if (t = e[t], t) {\n        for(; t % 10 == 0; t /= 10)r--;\n        for(t = e[0]; t >= 10; t /= 10)r++;\n    }\n    return r;\n}\nfunction Xe(e) {\n    for(var t = \"\"; e--;)t += \"0\";\n    return t;\n}\nfunction la(e, t, r, n) {\n    var i, o = new e(1), s = Math.ceil(n / w + 4);\n    for(P = !1;;){\n        if (r % 2 && (o = o.times(t), ea(o.d, s) && (i = !0)), r = ae(r / 2), r === 0) {\n            r = o.d.length - 1, i && o.d[r] === 0 && ++o.d[r];\n            break;\n        }\n        t = t.times(t), ea(t.d, s);\n    }\n    return P = !0, o;\n}\nfunction Xs(e) {\n    return e.d[e.d.length - 1] & 1;\n}\nfunction ua(e, t, r) {\n    for(var n, i = new e(t[0]), o = 0; ++o < t.length;)if (n = new e(t[o]), n.s) i[r](n) && (i = n);\n    else {\n        i = n;\n        break;\n    }\n    return i;\n}\nfunction eo(e, t) {\n    var r, n, i, o, s, a, l, u = 0, c = 0, p = 0, d = e.constructor, f = d.rounding, y = d.precision;\n    if (!e.d || !e.d[0] || e.e > 17) return new d(e.d ? e.d[0] ? e.s < 0 ? 0 : 1 / 0 : 1 : e.s ? e.s < 0 ? 0 : e : 0 / 0);\n    for(t == null ? (P = !1, l = y) : l = t, a = new d(.03125); e.e > -2;)e = e.times(a), p += 5;\n    for(n = Math.log(Q(2, p)) / Math.LN10 * 2 + 5 | 0, l += n, r = o = s = new d(1), d.precision = l;;){\n        if (o = x(o.times(e), l, 1), r = r.times(++c), a = s.plus(N(o, r, l, 1)), te(a.d).slice(0, l) === te(s.d).slice(0, l)) {\n            for(i = p; i--;)s = x(s.times(s), l, 1);\n            if (t == null) if (u < 3 && hr(s.d, l - n, f, u)) d.precision = l += 10, r = o = a = new d(1), c = 0, u++;\n            else return x(s, d.precision = y, f, P = !0);\n            else return d.precision = y, s;\n        }\n        s = a;\n    }\n}\nfunction et(e, t) {\n    var r, n, i, o, s, a, l, u, c, p, d, f = 1, y = 10, g = e, v = g.d, C = g.constructor, _ = C.rounding, b = C.precision;\n    if (g.s < 0 || !v || !v[0] || !g.e && v[0] == 1 && v.length == 1) return new C(v && !v[0] ? -1 / 0 : g.s != 1 ? NaN : v ? 0 : g);\n    if (t == null ? (P = !1, c = b) : c = t, C.precision = c += y, r = te(v), n = r.charAt(0), Math.abs(o = g.e) < 15e14) {\n        for(; n < 7 && n != 1 || n == 1 && r.charAt(1) > 3;)g = g.times(e), r = te(g.d), n = r.charAt(0), f++;\n        o = g.e, n > 1 ? (g = new C(\"0.\" + r), o++) : g = new C(n + \".\" + r.slice(1));\n    } else return u = bn(C, c + 2, b).times(o + \"\"), g = et(new C(n + \".\" + r.slice(1)), c - y).plus(u), C.precision = b, t == null ? x(g, b, _, P = !0) : g;\n    for(p = g, l = s = g = N(g.minus(1), g.plus(1), c, 1), d = x(g.times(g), c, 1), i = 3;;){\n        if (s = x(s.times(d), c, 1), u = l.plus(N(s, new C(i), c, 1)), te(u.d).slice(0, c) === te(l.d).slice(0, c)) if (l = l.times(2), o !== 0 && (l = l.plus(bn(C, c + 2, b).times(o + \"\"))), l = N(l, new C(f), c, 1), t == null) if (hr(l.d, c - y, _, a)) C.precision = c += y, u = s = g = N(p.minus(1), p.plus(1), c, 1), d = x(g.times(g), c, 1), i = a = 1;\n        else return x(l, C.precision = b, _, P = !0);\n        else return C.precision = b, l;\n        l = u, i += 2;\n    }\n}\nfunction ca(e) {\n    return String(e.s * e.s / 0);\n}\nfunction to(e, t) {\n    var r, n, i;\n    for((r = t.indexOf(\".\")) > -1 && (t = t.replace(\".\", \"\")), (n = t.search(/e/i)) > 0 ? (r < 0 && (r = n), r += +t.slice(n + 1), t = t.substring(0, n)) : r < 0 && (r = t.length), n = 0; t.charCodeAt(n) === 48; n++);\n    for(i = t.length; t.charCodeAt(i - 1) === 48; --i);\n    if (t = t.slice(n, i), t) {\n        if (i -= n, e.e = r = r - n - 1, e.d = [], n = (r + 1) % w, r < 0 && (n += w), n < i) {\n            for(n && e.d.push(+t.slice(0, n)), i -= w; n < i;)e.d.push(+t.slice(n, n += w));\n            t = t.slice(n), n = w - t.length;\n        } else n -= i;\n        for(; n--;)t += \"0\";\n        e.d.push(+t), P && (e.e > e.constructor.maxE ? (e.d = null, e.e = NaN) : e.e < e.constructor.minE && (e.e = 0, e.d = [\n            0\n        ]));\n    } else e.e = 0, e.d = [\n        0\n    ];\n    return e;\n}\nfunction Wc(e, t) {\n    var r, n, i, o, s, a, l, u, c;\n    if (t.indexOf(\"_\") > -1) {\n        if (t = t.replace(/(\\d)_(?=\\d)/g, \"$1\"), sa.test(t)) return to(e, t);\n    } else if (t === \"Infinity\" || t === \"NaN\") return +t || (e.s = NaN), e.e = NaN, e.d = null, e;\n    if (Kc.test(t)) r = 16, t = t.toLowerCase();\n    else if (Uc.test(t)) r = 2;\n    else if (Qc.test(t)) r = 8;\n    else throw Error(tt + t);\n    for(o = t.search(/p/i), o > 0 ? (l = +t.slice(o + 1), t = t.substring(2, o)) : t = t.slice(2), o = t.indexOf(\".\"), s = o >= 0, n = e.constructor, s && (t = t.replace(\".\", \"\"), a = t.length, o = a - o, i = la(n, new n(r), o, o * 2)), u = yn(t, r, Ce), c = u.length - 1, o = c; u[o] === 0; --o)u.pop();\n    return o < 0 ? new n(e.s * 0) : (e.e = En(u, c), e.d = u, P = !1, s && (e = N(e, i, a * 4)), l && (e = e.times(Math.abs(l) < 54 ? Q(2, l) : yt.pow(2, l))), P = !0, e);\n}\nfunction zc(e, t) {\n    var r, n = t.d.length;\n    if (n < 3) return t.isZero() ? t : Lt(e, 2, t, t);\n    r = 1.4 * Math.sqrt(n), r = r > 16 ? 16 : r | 0, t = t.times(1 / Pn(5, r)), t = Lt(e, 2, t, t);\n    for(var i, o = new e(5), s = new e(16), a = new e(20); r--;)i = t.times(t), t = t.times(o.plus(i.times(s.times(i).minus(a))));\n    return t;\n}\nfunction Lt(e, t, r, n, i) {\n    var o, s, a, l, u = 1, c = e.precision, p = Math.ceil(c / w);\n    for(P = !1, l = r.times(r), a = new e(n);;){\n        if (s = N(a.times(l), new e(t++ * t++), c, 1), a = i ? n.plus(s) : n.minus(s), n = N(s.times(l), new e(t++ * t++), c, 1), s = a.plus(n), s.d[p] !== void 0) {\n            for(o = p; s.d[o] === a.d[o] && o--;);\n            if (o == -1) break;\n        }\n        o = a, a = n, n = s, s = o, u++;\n    }\n    return P = !0, s.d.length = p + 1, s;\n}\nfunction Pn(e, t) {\n    for(var r = e; --t;)r *= e;\n    return r;\n}\nfunction pa(e, t) {\n    var r, n = t.s < 0, i = Te(e, e.precision, 1), o = i.times(.5);\n    if (t = t.abs(), t.lte(o)) return Be = n ? 4 : 1, t;\n    if (r = t.divToInt(i), r.isZero()) Be = n ? 3 : 2;\n    else {\n        if (t = t.minus(r.times(i)), t.lte(o)) return Be = Xs(r) ? n ? 2 : 3 : n ? 4 : 1, t;\n        Be = Xs(r) ? n ? 1 : 4 : n ? 3 : 2;\n    }\n    return t.minus(i).abs();\n}\nfunction ro(e, t, r, n) {\n    var i, o, s, a, l, u, c, p, d, f = e.constructor, y = r !== void 0;\n    if (y ? (fe(r, 1, rt), n === void 0 ? n = f.rounding : fe(n, 0, 8)) : (r = f.precision, n = f.rounding), !e.isFinite()) c = ca(e);\n    else {\n        for(c = De(e), s = c.indexOf(\".\"), y ? (i = 2, t == 16 ? r = r * 4 - 3 : t == 8 && (r = r * 3 - 2)) : i = t, s >= 0 && (c = c.replace(\".\", \"\"), d = new f(1), d.e = c.length - s, d.d = yn(De(d), 10, i), d.e = d.d.length), p = yn(c, 10, i), o = l = p.length; p[--l] == 0;)p.pop();\n        if (!p[0]) c = y ? \"0p+0\" : \"0\";\n        else {\n            if (s < 0 ? o-- : (e = new f(e), e.d = p, e.e = o, e = N(e, d, r, n, 0, i), p = e.d, o = e.e, u = ra), s = p[r], a = i / 2, u = u || p[r + 1] !== void 0, u = n < 4 ? (s !== void 0 || u) && (n === 0 || n === (e.s < 0 ? 3 : 2)) : s > a || s === a && (n === 4 || u || n === 6 && p[r - 1] & 1 || n === (e.s < 0 ? 8 : 7)), p.length = r, u) for(; ++p[--r] > i - 1;)p[r] = 0, r || (++o, p.unshift(1));\n            for(l = p.length; !p[l - 1]; --l);\n            for(s = 0, c = \"\"; s < l; s++)c += Yi.charAt(p[s]);\n            if (y) {\n                if (l > 1) if (t == 16 || t == 8) {\n                    for(s = t == 16 ? 4 : 3, --l; l % s; l++)c += \"0\";\n                    for(p = yn(c, i, t), l = p.length; !p[l - 1]; --l);\n                    for(s = 1, c = \"1.\"; s < l; s++)c += Yi.charAt(p[s]);\n                } else c = c.charAt(0) + \".\" + c.slice(1);\n                c = c + (o < 0 ? \"p\" : \"p+\") + o;\n            } else if (o < 0) {\n                for(; ++o;)c = \"0\" + c;\n                c = \"0.\" + c;\n            } else if (++o > l) for(o -= l; o--;)c += \"0\";\n            else o < l && (c = c.slice(0, o) + \".\" + c.slice(o));\n        }\n        c = (t == 16 ? \"0x\" : t == 2 ? \"0b\" : t == 8 ? \"0o\" : \"\") + c;\n    }\n    return e.s < 0 ? \"-\" + c : c;\n}\nfunction ea(e, t) {\n    if (e.length > t) return e.length = t, !0;\n}\nfunction Yc(e) {\n    return new this(e).abs();\n}\nfunction Zc(e) {\n    return new this(e).acos();\n}\nfunction Xc(e) {\n    return new this(e).acosh();\n}\nfunction ep(e, t) {\n    return new this(e).plus(t);\n}\nfunction tp(e) {\n    return new this(e).asin();\n}\nfunction rp(e) {\n    return new this(e).asinh();\n}\nfunction np(e) {\n    return new this(e).atan();\n}\nfunction ip(e) {\n    return new this(e).atanh();\n}\nfunction op(e, t) {\n    e = new this(e), t = new this(t);\n    var r, n = this.precision, i = this.rounding, o = n + 4;\n    return !e.s || !t.s ? r = new this(NaN) : !e.d && !t.d ? (r = Te(this, o, 1).times(t.s > 0 ? .25 : .75), r.s = e.s) : !t.d || e.isZero() ? (r = t.s < 0 ? Te(this, n, i) : new this(0), r.s = e.s) : !e.d || t.isZero() ? (r = Te(this, o, 1).times(.5), r.s = e.s) : t.s < 0 ? (this.precision = o, this.rounding = 1, r = this.atan(N(e, t, o, 1)), t = Te(this, o, 1), this.precision = n, this.rounding = i, r = e.s < 0 ? r.minus(t) : r.plus(t)) : r = this.atan(N(e, t, o, 1)), r;\n}\nfunction sp(e) {\n    return new this(e).cbrt();\n}\nfunction ap(e) {\n    return x(e = new this(e), e.e + 1, 2);\n}\nfunction lp(e, t, r) {\n    return new this(e).clamp(t, r);\n}\nfunction up(e) {\n    if (!e || typeof e != \"object\") throw Error(wn + \"Object expected\");\n    var t, r, n, i = e.defaults === !0, o = [\n        \"precision\",\n        1,\n        rt,\n        \"rounding\",\n        0,\n        8,\n        \"toExpNeg\",\n        -Nt,\n        0,\n        \"toExpPos\",\n        0,\n        Nt,\n        \"maxE\",\n        0,\n        Nt,\n        \"minE\",\n        -Nt,\n        0,\n        \"modulo\",\n        0,\n        9\n    ];\n    for(t = 0; t < o.length; t += 3)if (r = o[t], i && (this[r] = Zi[r]), (n = e[r]) !== void 0) if (ae(n) === n && n >= o[t + 1] && n <= o[t + 2]) this[r] = n;\n    else throw Error(tt + r + \": \" + n);\n    if (r = \"crypto\", i && (this[r] = Zi[r]), (n = e[r]) !== void 0) if (n === !0 || n === !1 || n === 0 || n === 1) if (n) if (typeof crypto < \"u\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) this[r] = !0;\n    else throw Error(ia);\n    else this[r] = !1;\n    else throw Error(tt + r + \": \" + n);\n    return this;\n}\nfunction cp(e) {\n    return new this(e).cos();\n}\nfunction pp(e) {\n    return new this(e).cosh();\n}\nfunction da(e) {\n    var t, r, n;\n    function i(o) {\n        var s, a, l, u = this;\n        if (!(u instanceof i)) return new i(o);\n        if (u.constructor = i, ta(o)) {\n            u.s = o.s, P ? !o.d || o.e > i.maxE ? (u.e = NaN, u.d = null) : o.e < i.minE ? (u.e = 0, u.d = [\n                0\n            ]) : (u.e = o.e, u.d = o.d.slice()) : (u.e = o.e, u.d = o.d ? o.d.slice() : o.d);\n            return;\n        }\n        if (l = typeof o, l === \"number\") {\n            if (o === 0) {\n                u.s = 1 / o < 0 ? -1 : 1, u.e = 0, u.d = [\n                    0\n                ];\n                return;\n            }\n            if (o < 0 ? (o = -o, u.s = -1) : u.s = 1, o === ~~o && o < 1e7) {\n                for(s = 0, a = o; a >= 10; a /= 10)s++;\n                P ? s > i.maxE ? (u.e = NaN, u.d = null) : s < i.minE ? (u.e = 0, u.d = [\n                    0\n                ]) : (u.e = s, u.d = [\n                    o\n                ]) : (u.e = s, u.d = [\n                    o\n                ]);\n                return;\n            } else if (o * 0 !== 0) {\n                o || (u.s = NaN), u.e = NaN, u.d = null;\n                return;\n            }\n            return to(u, o.toString());\n        } else if (l !== \"string\") throw Error(tt + o);\n        return (a = o.charCodeAt(0)) === 45 ? (o = o.slice(1), u.s = -1) : (a === 43 && (o = o.slice(1)), u.s = 1), sa.test(o) ? to(u, o) : Wc(u, o);\n    }\n    if (i.prototype = m, i.ROUND_UP = 0, i.ROUND_DOWN = 1, i.ROUND_CEIL = 2, i.ROUND_FLOOR = 3, i.ROUND_HALF_UP = 4, i.ROUND_HALF_DOWN = 5, i.ROUND_HALF_EVEN = 6, i.ROUND_HALF_CEIL = 7, i.ROUND_HALF_FLOOR = 8, i.EUCLID = 9, i.config = i.set = up, i.clone = da, i.isDecimal = ta, i.abs = Yc, i.acos = Zc, i.acosh = Xc, i.add = ep, i.asin = tp, i.asinh = rp, i.atan = np, i.atanh = ip, i.atan2 = op, i.cbrt = sp, i.ceil = ap, i.clamp = lp, i.cos = cp, i.cosh = pp, i.div = dp, i.exp = mp, i.floor = fp, i.hypot = gp, i.ln = yp, i.log = hp, i.log10 = bp, i.log2 = xp, i.max = wp, i.min = Ep, i.mod = Pp, i.mul = vp, i.pow = Tp, i.random = Cp, i.round = _p, i.sign = Ap, i.sin = Rp, i.sinh = Mp, i.sqrt = Sp, i.sub = kp, i.sum = Ip, i.tan = Fp, i.tanh = Dp, i.trunc = Op, e === void 0 && (e = {}), e && e.defaults !== !0) for(n = [\n        \"precision\",\n        \"rounding\",\n        \"toExpNeg\",\n        \"toExpPos\",\n        \"maxE\",\n        \"minE\",\n        \"modulo\",\n        \"crypto\"\n    ], t = 0; t < n.length;)e.hasOwnProperty(r = n[t++]) || (e[r] = this[r]);\n    return i.config(e), i;\n}\nfunction dp(e, t) {\n    return new this(e).div(t);\n}\nfunction mp(e) {\n    return new this(e).exp();\n}\nfunction fp(e) {\n    return x(e = new this(e), e.e + 1, 3);\n}\nfunction gp() {\n    var e, t, r = new this(0);\n    for(P = !1, e = 0; e < arguments.length;)if (t = new this(arguments[e++]), t.d) r.d && (r = r.plus(t.times(t)));\n    else {\n        if (t.s) return P = !0, new this(1 / 0);\n        r = t;\n    }\n    return P = !0, r.sqrt();\n}\nfunction ta(e) {\n    return e instanceof yt || e && e.toStringTag === oa || !1;\n}\nfunction yp(e) {\n    return new this(e).ln();\n}\nfunction hp(e, t) {\n    return new this(e).log(t);\n}\nfunction xp(e) {\n    return new this(e).log(2);\n}\nfunction bp(e) {\n    return new this(e).log(10);\n}\nfunction wp() {\n    return ua(this, arguments, \"lt\");\n}\nfunction Ep() {\n    return ua(this, arguments, \"gt\");\n}\nfunction Pp(e, t) {\n    return new this(e).mod(t);\n}\nfunction vp(e, t) {\n    return new this(e).mul(t);\n}\nfunction Tp(e, t) {\n    return new this(e).pow(t);\n}\nfunction Cp(e) {\n    var t, r, n, i, o = 0, s = new this(1), a = [];\n    if (e === void 0 ? e = this.precision : fe(e, 1, rt), n = Math.ceil(e / w), this.crypto) if (crypto.getRandomValues) for(t = crypto.getRandomValues(new Uint32Array(n)); o < n;)i = t[o], i >= 429e7 ? t[o] = crypto.getRandomValues(new Uint32Array(1))[0] : a[o++] = i % 1e7;\n    else if (crypto.randomBytes) {\n        for(t = crypto.randomBytes(n *= 4); o < n;)i = t[o] + (t[o + 1] << 8) + (t[o + 2] << 16) + ((t[o + 3] & 127) << 24), i >= 214e7 ? crypto.randomBytes(4).copy(t, o) : (a.push(i % 1e7), o += 4);\n        o = n / 4;\n    } else throw Error(ia);\n    else for(; o < n;)a[o++] = Math.random() * 1e7 | 0;\n    for(n = a[--o], e %= w, n && e && (i = Q(10, w - e), a[o] = (n / i | 0) * i); a[o] === 0; o--)a.pop();\n    if (o < 0) r = 0, a = [\n        0\n    ];\n    else {\n        for(r = -1; a[0] === 0; r -= w)a.shift();\n        for(n = 1, i = a[0]; i >= 10; i /= 10)n++;\n        n < w && (r -= w - n);\n    }\n    return s.e = r, s.d = a, s;\n}\nfunction _p(e) {\n    return x(e = new this(e), e.e + 1, this.rounding);\n}\nfunction Ap(e) {\n    return e = new this(e), e.d ? e.d[0] ? e.s : 0 * e.s : e.s || NaN;\n}\nfunction Rp(e) {\n    return new this(e).sin();\n}\nfunction Mp(e) {\n    return new this(e).sinh();\n}\nfunction Sp(e) {\n    return new this(e).sqrt();\n}\nfunction kp(e, t) {\n    return new this(e).sub(t);\n}\nfunction Ip() {\n    var e = 0, t = arguments, r = new this(t[e]);\n    for(P = !1; r.s && ++e < t.length;)r = r.plus(t[e]);\n    return P = !0, x(r, this.precision, this.rounding);\n}\nfunction Fp(e) {\n    return new this(e).tan();\n}\nfunction Dp(e) {\n    return new this(e).tanh();\n}\nfunction Op(e) {\n    return x(e = new this(e), e.e + 1, 1);\n}\nm[Symbol.for(\"nodejs.util.inspect.custom\")] = m.toString;\nm[Symbol.toStringTag] = \"Decimal\";\nvar yt = m.constructor = da(Zi);\nhn = new yt(hn);\nxn = new yt(xn);\nvar Oe = yt;\nfunction $t(e) {\n    return yt.isDecimal(e) ? !0 : e !== null && typeof e == \"object\" && typeof e.s == \"number\" && typeof e.e == \"number\" && typeof e.toFixed == \"function\" && Array.isArray(e.d);\n}\nvar xr = class {\n    constructor(t, r, n, i, o){\n        this.modelName = t, this.name = r, this.typeName = n, this.isList = i, this.isEnum = o;\n    }\n    _toGraphQLInputType() {\n        let t = this.isList ? \"List\" : \"\", r = this.isEnum ? \"Enum\" : \"\";\n        return `${t}${r}${this.typeName}FieldRefInput<${this.modelName}>`;\n    }\n};\nfunction qt(e) {\n    return e instanceof xr;\n}\nvar vn = class {\n    constructor(t){\n        this.value = t;\n    }\n    write(t) {\n        t.write(this.value);\n    }\n    markAsError() {\n        this.value.markAsError();\n    }\n};\nvar Tn = (e)=>e, Cn = {\n    bold: Tn,\n    red: Tn,\n    green: Tn,\n    dim: Tn,\n    enabled: !1\n}, ma = {\n    bold: pe,\n    red: Pe,\n    green: ct,\n    dim: Je,\n    enabled: !0\n}, jt = {\n    write (e) {\n        e.writeLine(\",\");\n    }\n};\nvar Ne = class {\n    constructor(t){\n        this.contents = t;\n        this.isUnderlined = !1;\n        this.color = (t)=>t;\n    }\n    underline() {\n        return this.isUnderlined = !0, this;\n    }\n    setColor(t) {\n        return this.color = t, this;\n    }\n    write(t) {\n        let r = t.getCurrentLineLength();\n        t.write(this.color(this.contents)), this.isUnderlined && t.afterNextNewline(()=>{\n            t.write(\" \".repeat(r)).writeLine(this.color(\"~\".repeat(this.contents.length)));\n        });\n    }\n};\nvar nt = class {\n    constructor(){\n        this.hasError = !1;\n    }\n    markAsError() {\n        return this.hasError = !0, this;\n    }\n};\nvar Vt = class extends nt {\n    constructor(){\n        super(...arguments);\n        this.items = [];\n    }\n    addItem(r) {\n        return this.items.push(new vn(r)), this;\n    }\n    getField(r) {\n        return this.items[r];\n    }\n    getPrintWidth() {\n        return this.items.length === 0 ? 2 : Math.max(...this.items.map((n)=>n.value.getPrintWidth())) + 2;\n    }\n    write(r) {\n        if (this.items.length === 0) {\n            this.writeEmpty(r);\n            return;\n        }\n        this.writeWithItems(r);\n    }\n    writeEmpty(r) {\n        let n = new Ne(\"[]\");\n        this.hasError && n.setColor(r.context.colors.red).underline(), r.write(n);\n    }\n    writeWithItems(r) {\n        let { colors: n } = r.context;\n        r.writeLine(\"[\").withIndent(()=>r.writeJoined(jt, this.items).newLine()).write(\"]\"), this.hasError && r.afterNextNewline(()=>{\n            r.writeLine(n.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n};\nvar fa = \": \", _n = class {\n    constructor(t, r){\n        this.name = t;\n        this.value = r;\n        this.hasError = !1;\n    }\n    markAsError() {\n        this.hasError = !0;\n    }\n    getPrintWidth() {\n        return this.name.length + this.value.getPrintWidth() + fa.length;\n    }\n    write(t) {\n        let r = new Ne(this.name);\n        this.hasError && r.underline().setColor(t.context.colors.red), t.write(r).write(fa).write(this.value);\n    }\n};\nvar Y = class e extends nt {\n    constructor(){\n        super(...arguments);\n        this.fields = {};\n        this.suggestions = [];\n    }\n    addField(r) {\n        this.fields[r.name] = r;\n    }\n    addSuggestion(r) {\n        this.suggestions.push(r);\n    }\n    getField(r) {\n        return this.fields[r];\n    }\n    getDeepField(r) {\n        let [n, ...i] = r, o = this.getField(n);\n        if (!o) return;\n        let s = o;\n        for (let a of i){\n            let l;\n            if (s.value instanceof e ? l = s.value.getField(a) : s.value instanceof Vt && (l = s.value.getField(Number(a))), !l) return;\n            s = l;\n        }\n        return s;\n    }\n    getDeepFieldValue(r) {\n        return r.length === 0 ? this : this.getDeepField(r)?.value;\n    }\n    hasField(r) {\n        return !!this.getField(r);\n    }\n    removeAllFields() {\n        this.fields = {};\n    }\n    removeField(r) {\n        delete this.fields[r];\n    }\n    getFields() {\n        return this.fields;\n    }\n    isEmpty() {\n        return Object.keys(this.fields).length === 0;\n    }\n    getFieldValue(r) {\n        return this.getField(r)?.value;\n    }\n    getDeepSubSelectionValue(r) {\n        let n = this;\n        for (let i of r){\n            if (!(n instanceof e)) return;\n            let o = n.getSubSelectionValue(i);\n            if (!o) return;\n            n = o;\n        }\n        return n;\n    }\n    getDeepSelectionParent(r) {\n        let n = this.getSelectionParent();\n        if (!n) return;\n        let i = n;\n        for (let o of r){\n            let s = i.value.getFieldValue(o);\n            if (!s || !(s instanceof e)) return;\n            let a = s.getSelectionParent();\n            if (!a) return;\n            i = a;\n        }\n        return i;\n    }\n    getSelectionParent() {\n        let r = this.getField(\"select\");\n        if (r?.value instanceof e) return {\n            kind: \"select\",\n            value: r.value\n        };\n        let n = this.getField(\"include\");\n        if (n?.value instanceof e) return {\n            kind: \"include\",\n            value: n.value\n        };\n    }\n    getSubSelectionValue(r) {\n        return this.getSelectionParent()?.value.fields[r].value;\n    }\n    getPrintWidth() {\n        let r = Object.values(this.fields);\n        return r.length == 0 ? 2 : Math.max(...r.map((i)=>i.getPrintWidth())) + 2;\n    }\n    write(r) {\n        let n = Object.values(this.fields);\n        if (n.length === 0 && this.suggestions.length === 0) {\n            this.writeEmpty(r);\n            return;\n        }\n        this.writeWithContents(r, n);\n    }\n    writeEmpty(r) {\n        let n = new Ne(\"{}\");\n        this.hasError && n.setColor(r.context.colors.red).underline(), r.write(n);\n    }\n    writeWithContents(r, n) {\n        r.writeLine(\"{\").withIndent(()=>{\n            r.writeJoined(jt, [\n                ...n,\n                ...this.suggestions\n            ]).newLine();\n        }), r.write(\"}\"), this.hasError && r.afterNextNewline(()=>{\n            r.writeLine(r.context.colors.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n};\nvar Z = class extends nt {\n    constructor(r){\n        super();\n        this.text = r;\n    }\n    getPrintWidth() {\n        return this.text.length;\n    }\n    write(r) {\n        let n = new Ne(this.text);\n        this.hasError && n.underline().setColor(r.context.colors.red), r.write(n);\n    }\n};\nvar no = class {\n    constructor(t){\n        this.errorMessages = [];\n        this.arguments = t;\n    }\n    write(t) {\n        t.write(this.arguments);\n    }\n    addErrorMessage(t) {\n        this.errorMessages.push(t);\n    }\n    renderAllMessages(t) {\n        return this.errorMessages.map((r)=>r(t)).join(`\n`);\n    }\n};\nfunction An(e) {\n    return new no(ga(e));\n}\nfunction ga(e) {\n    let t = new Y;\n    for (let [r, n] of Object.entries(e)){\n        let i = new _n(r, ya(n));\n        t.addField(i);\n    }\n    return t;\n}\nfunction ya(e) {\n    if (typeof e == \"string\") return new Z(JSON.stringify(e));\n    if (typeof e == \"number\" || typeof e == \"boolean\") return new Z(String(e));\n    if (typeof e == \"bigint\") return new Z(`${e}n`);\n    if (e === null) return new Z(\"null\");\n    if (e === void 0) return new Z(\"undefined\");\n    if ($t(e)) return new Z(`new Prisma.Decimal(\"${e.toFixed()}\")`);\n    if (e instanceof Uint8Array) return Buffer.isBuffer(e) ? new Z(`Buffer.alloc(${e.byteLength})`) : new Z(`new Uint8Array(${e.byteLength})`);\n    if (e instanceof Date) {\n        let t = gn(e) ? e.toISOString() : \"Invalid Date\";\n        return new Z(`new Date(\"${t}\")`);\n    }\n    return e instanceof ke ? new Z(`Prisma.${e._getName()}`) : qt(e) ? new Z(`prisma.${Ko(e.modelName)}.$fields.${e.name}`) : Array.isArray(e) ? Lp(e) : typeof e == \"object\" ? ga(e) : new Z(Object.prototype.toString.call(e));\n}\nfunction Lp(e) {\n    let t = new Vt;\n    for (let r of e)t.addItem(ya(r));\n    return t;\n}\nfunction ha(e) {\n    if (e === void 0) return \"\";\n    let t = An(e);\n    return new Dt(0, {\n        colors: Cn\n    }).write(t).toString();\n}\nvar br = \"<unknown>\";\nfunction xa(e) {\n    var t = e.split(`\n`);\n    return t.reduce(function(r, n) {\n        var i = jp(n) || Bp(n) || Qp(n) || Wp(n) || Jp(n);\n        return i && r.push(i), r;\n    }, []);\n}\nvar $p = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/|[a-z]:\\\\|\\\\\\\\).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i, qp = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\nfunction jp(e) {\n    var t = $p.exec(e);\n    if (!t) return null;\n    var r = t[2] && t[2].indexOf(\"native\") === 0, n = t[2] && t[2].indexOf(\"eval\") === 0, i = qp.exec(t[2]);\n    return n && i != null && (t[2] = i[1], t[3] = i[2], t[4] = i[3]), {\n        file: r ? null : t[2],\n        methodName: t[1] || br,\n        arguments: r ? [\n            t[2]\n        ] : [],\n        lineNumber: t[3] ? +t[3] : null,\n        column: t[4] ? +t[4] : null\n    };\n}\nvar Vp = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction Bp(e) {\n    var t = Vp.exec(e);\n    return t ? {\n        file: t[2],\n        methodName: t[1] || br,\n        arguments: [],\n        lineNumber: +t[3],\n        column: t[4] ? +t[4] : null\n    } : null;\n}\nvar Up = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i, Kp = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nfunction Qp(e) {\n    var t = Up.exec(e);\n    if (!t) return null;\n    var r = t[3] && t[3].indexOf(\" > eval\") > -1, n = Kp.exec(t[3]);\n    return r && n != null && (t[3] = n[1], t[4] = n[2], t[5] = null), {\n        file: t[3],\n        methodName: t[1] || br,\n        arguments: t[2] ? t[2].split(\",\") : [],\n        lineNumber: t[4] ? +t[4] : null,\n        column: t[5] ? +t[5] : null\n    };\n}\nvar Gp = /^\\s*(?:([^@]*)(?:\\((.*?)\\))?@)?(\\S.*?):(\\d+)(?::(\\d+))?\\s*$/i;\nfunction Jp(e) {\n    var t = Gp.exec(e);\n    return t ? {\n        file: t[3],\n        methodName: t[1] || br,\n        arguments: [],\n        lineNumber: +t[4],\n        column: t[5] ? +t[5] : null\n    } : null;\n}\nvar Hp = /^\\s*at (?:((?:\\[object object\\])?[^\\\\/]+(?: \\[as \\S+\\])?) )?\\(?(.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction Wp(e) {\n    var t = Hp.exec(e);\n    return t ? {\n        file: t[2],\n        methodName: t[1] || br,\n        arguments: [],\n        lineNumber: +t[3],\n        column: t[4] ? +t[4] : null\n    } : null;\n}\nvar io = class {\n    getLocation() {\n        return null;\n    }\n}, oo = class {\n    constructor(){\n        this._error = new Error;\n    }\n    getLocation() {\n        let t = this._error.stack;\n        if (!t) return null;\n        let n = xa(t).find((i)=>{\n            if (!i.file) return !1;\n            let o = Oi(i.file);\n            return o !== \"<anonymous>\" && !o.includes(\"@prisma\") && !o.includes(\"/packages/client/src/runtime/\") && !o.endsWith(\"/runtime/binary.js\") && !o.endsWith(\"/runtime/library.js\") && !o.endsWith(\"/runtime/edge.js\") && !o.endsWith(\"/runtime/edge-esm.js\") && !o.startsWith(\"internal/\") && !i.methodName.includes(\"new \") && !i.methodName.includes(\"getCallSite\") && !i.methodName.includes(\"Proxy.\") && i.methodName.split(\".\").length < 4;\n        });\n        return !n || !n.file ? null : {\n            fileName: n.file,\n            lineNumber: n.lineNumber,\n            columnNumber: n.column\n        };\n    }\n};\nfunction it(e) {\n    return e === \"minimal\" ? new io : new oo;\n}\nvar ba = {\n    _avg: !0,\n    _count: !0,\n    _sum: !0,\n    _min: !0,\n    _max: !0\n};\nfunction Bt(e = {}) {\n    let t = Yp(e);\n    return Object.entries(t).reduce((n, [i, o])=>(ba[i] !== void 0 ? n.select[i] = {\n            select: o\n        } : n[i] = o, n), {\n        select: {}\n    });\n}\nfunction Yp(e = {}) {\n    return typeof e._count == \"boolean\" ? {\n        ...e,\n        _count: {\n            _all: e._count\n        }\n    } : e;\n}\nfunction Rn(e = {}) {\n    return (t)=>(typeof e._count == \"boolean\" && (t._count = t._count._all), t);\n}\nfunction wa(e, t) {\n    let r = Rn(e);\n    return t({\n        action: \"aggregate\",\n        unpacker: r,\n        argsMapper: Bt\n    })(e);\n}\nfunction Zp(e = {}) {\n    let { select: t, ...r } = e;\n    return typeof t == \"object\" ? Bt({\n        ...r,\n        _count: t\n    }) : Bt({\n        ...r,\n        _count: {\n            _all: !0\n        }\n    });\n}\nfunction Xp(e = {}) {\n    return typeof e.select == \"object\" ? (t)=>Rn(e)(t)._count : (t)=>Rn(e)(t)._count._all;\n}\nfunction Ea(e, t) {\n    return t({\n        action: \"count\",\n        unpacker: Xp(e),\n        argsMapper: Zp\n    })(e);\n}\nfunction ed(e = {}) {\n    let t = Bt(e);\n    if (Array.isArray(t.by)) for (let r of t.by)typeof r == \"string\" && (t.select[r] = !0);\n    else typeof t.by == \"string\" && (t.select[t.by] = !0);\n    return t;\n}\nfunction td(e = {}) {\n    return (t)=>(typeof e?._count == \"boolean\" && t.forEach((r)=>{\n            r._count = r._count._all;\n        }), t);\n}\nfunction Pa(e, t) {\n    return t({\n        action: \"groupBy\",\n        unpacker: td(e),\n        argsMapper: ed\n    })(e);\n}\nfunction va(e, t, r) {\n    if (t === \"aggregate\") return (n)=>wa(n, r);\n    if (t === \"count\") return (n)=>Ea(n, r);\n    if (t === \"groupBy\") return (n)=>Pa(n, r);\n}\nfunction Ta(e, t) {\n    let r = t.fields.filter((i)=>!i.relationName), n = Bi(r, (i)=>i.name);\n    return new Proxy({}, {\n        get (i, o) {\n            if (o in i || typeof o == \"symbol\") return i[o];\n            let s = n[o];\n            if (s) return new xr(e, o, s.type, s.isList, s.kind === \"enum\");\n        },\n        ...fn(Object.keys(n))\n    });\n}\nvar Ca = (e)=>Array.isArray(e) ? e : e.split(\".\"), so = (e, t)=>Ca(t).reduce((r, n)=>r && r[n], e), _a = (e, t, r)=>Ca(t).reduceRight((n, i, o, s)=>Object.assign({}, so(e, s.slice(0, o)), {\n            [i]: n\n        }), r);\nfunction rd(e, t) {\n    return e === void 0 || t === void 0 ? [] : [\n        ...t,\n        \"select\",\n        e\n    ];\n}\nfunction nd(e, t, r) {\n    return t === void 0 ? e ?? {} : _a(t, r, e || !0);\n}\nfunction ao(e, t, r, n, i, o) {\n    let a = e._runtimeDataModel.models[t].fields.reduce((l, u)=>({\n            ...l,\n            [u.name]: u\n        }), {});\n    return (l)=>{\n        let u = it(e._errorFormat), c = rd(n, i), p = nd(l, o, c), d = r({\n            dataPath: c,\n            callsite: u\n        })(p), f = id(e, t);\n        return new Proxy(d, {\n            get (y, g) {\n                if (!f.includes(g)) return y[g];\n                let C = [\n                    a[g].type,\n                    r,\n                    g\n                ], _ = [\n                    c,\n                    p\n                ];\n                return ao(e, ...C, ..._);\n            },\n            ...fn([\n                ...f,\n                ...Object.getOwnPropertyNames(d)\n            ])\n        });\n    };\n}\nfunction id(e, t) {\n    return e._runtimeDataModel.models[t].fields.filter((r)=>r.kind === \"object\").map((r)=>r.name);\n}\nvar Ia = I(Ni());\nvar ka = I(__webpack_require__(/*! fs */ \"fs\"));\nvar Aa = {\n    keyword: He,\n    entity: He,\n    value: (e)=>pe(_t(e)),\n    punctuation: _t,\n    directive: He,\n    function: He,\n    variable: (e)=>pe(_t(e)),\n    string: (e)=>pe(ct(e)),\n    boolean: Ae,\n    number: He,\n    comment: zr\n};\nvar od = (e)=>e, Mn = {}, sd = 0, T = {\n    manual: Mn.Prism && Mn.Prism.manual,\n    disableWorkerMessageHandler: Mn.Prism && Mn.Prism.disableWorkerMessageHandler,\n    util: {\n        encode: function(e) {\n            if (e instanceof _e) {\n                let t = e;\n                return new _e(t.type, T.util.encode(t.content), t.alias);\n            } else return Array.isArray(e) ? e.map(T.util.encode) : e.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        },\n        type: function(e) {\n            return Object.prototype.toString.call(e).slice(8, -1);\n        },\n        objId: function(e) {\n            return e.__id || Object.defineProperty(e, \"__id\", {\n                value: ++sd\n            }), e.__id;\n        },\n        clone: function e(t, r) {\n            let n, i, o = T.util.type(t);\n            switch(r = r || {}, o){\n                case \"Object\":\n                    if (i = T.util.objId(t), r[i]) return r[i];\n                    n = {}, r[i] = n;\n                    for(let s in t)t.hasOwnProperty(s) && (n[s] = e(t[s], r));\n                    return n;\n                case \"Array\":\n                    return i = T.util.objId(t), r[i] ? r[i] : (n = [], r[i] = n, t.forEach(function(s, a) {\n                        n[a] = e(s, r);\n                    }), n);\n                default:\n                    return t;\n            }\n        }\n    },\n    languages: {\n        extend: function(e, t) {\n            let r = T.util.clone(T.languages[e]);\n            for(let n in t)r[n] = t[n];\n            return r;\n        },\n        insertBefore: function(e, t, r, n) {\n            n = n || T.languages;\n            let i = n[e], o = {};\n            for(let a in i)if (i.hasOwnProperty(a)) {\n                if (a == t) for(let l in r)r.hasOwnProperty(l) && (o[l] = r[l]);\n                r.hasOwnProperty(a) || (o[a] = i[a]);\n            }\n            let s = n[e];\n            return n[e] = o, T.languages.DFS(T.languages, function(a, l) {\n                l === s && a != e && (this[a] = o);\n            }), o;\n        },\n        DFS: function e(t, r, n, i) {\n            i = i || {};\n            let o = T.util.objId;\n            for(let s in t)if (t.hasOwnProperty(s)) {\n                r.call(t, s, t[s], n || s);\n                let a = t[s], l = T.util.type(a);\n                l === \"Object\" && !i[o(a)] ? (i[o(a)] = !0, e(a, r, null, i)) : l === \"Array\" && !i[o(a)] && (i[o(a)] = !0, e(a, r, s, i));\n            }\n        }\n    },\n    plugins: {},\n    highlight: function(e, t, r) {\n        let n = {\n            code: e,\n            grammar: t,\n            language: r\n        };\n        return T.hooks.run(\"before-tokenize\", n), n.tokens = T.tokenize(n.code, n.grammar), T.hooks.run(\"after-tokenize\", n), _e.stringify(T.util.encode(n.tokens), n.language);\n    },\n    matchGrammar: function(e, t, r, n, i, o, s) {\n        for(let g in r){\n            if (!r.hasOwnProperty(g) || !r[g]) continue;\n            if (g == s) return;\n            let v = r[g];\n            v = T.util.type(v) === \"Array\" ? v : [\n                v\n            ];\n            for(let C = 0; C < v.length; ++C){\n                let _ = v[C], b = _.inside, M = !!_.lookbehind, be = !!_.greedy, X = 0, lt = _.alias;\n                if (be && !_.pattern.global) {\n                    let U = _.pattern.toString().match(/[imuy]*$/)[0];\n                    _.pattern = RegExp(_.pattern.source, U + \"g\");\n                }\n                _ = _.pattern || _;\n                for(let U = n, ne = i; U < t.length; ne += t[U].length, ++U){\n                    let qe = t[U];\n                    if (t.length > e.length) return;\n                    if (qe instanceof _e) continue;\n                    if (be && U != t.length - 1) {\n                        _.lastIndex = ne;\n                        var p = _.exec(e);\n                        if (!p) break;\n                        var c = p.index + (M ? p[1].length : 0), d = p.index + p[0].length, a = U, l = ne;\n                        for(let O = t.length; a < O && (l < d || !t[a].type && !t[a - 1].greedy); ++a)l += t[a].length, c >= l && (++U, ne = l);\n                        if (t[U] instanceof _e) continue;\n                        u = a - U, qe = e.slice(ne, l), p.index -= ne;\n                    } else {\n                        _.lastIndex = 0;\n                        var p = _.exec(qe), u = 1;\n                    }\n                    if (!p) {\n                        if (o) break;\n                        continue;\n                    }\n                    M && (X = p[1] ? p[1].length : 0);\n                    var c = p.index + X, p = p[0].slice(X), d = c + p.length, f = qe.slice(0, c), y = qe.slice(d);\n                    let ie = [\n                        U,\n                        u\n                    ];\n                    f && (++U, ne += f.length, ie.push(f));\n                    let Et = new _e(g, b ? T.tokenize(p, b) : p, lt, p, be);\n                    if (ie.push(Et), y && ie.push(y), Array.prototype.splice.apply(t, ie), u != 1 && T.matchGrammar(e, t, r, U, ne, !0, g), o) break;\n                }\n            }\n        }\n    },\n    tokenize: function(e, t) {\n        let r = [\n            e\n        ], n = t.rest;\n        if (n) {\n            for(let i in n)t[i] = n[i];\n            delete t.rest;\n        }\n        return T.matchGrammar(e, r, t, 0, 0, !1), r;\n    },\n    hooks: {\n        all: {},\n        add: function(e, t) {\n            let r = T.hooks.all;\n            r[e] = r[e] || [], r[e].push(t);\n        },\n        run: function(e, t) {\n            let r = T.hooks.all[e];\n            if (!(!r || !r.length)) for(var n = 0, i; i = r[n++];)i(t);\n        }\n    },\n    Token: _e\n};\nT.languages.clike = {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n        lookbehind: !0,\n        inside: {\n            punctuation: /[.\\\\]/\n        }\n    },\n    keyword: /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n    boolean: /\\b(?:true|false)\\b/,\n    function: /\\w+(?=\\()/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n    punctuation: /[{}[\\];(),.:]/\n};\nT.languages.javascript = T.languages.extend(\"clike\", {\n    \"class-name\": [\n        T.languages.clike[\"class-name\"],\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n            lookbehind: !0\n        }\n    ],\n    keyword: [\n        {\n            pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n            lookbehind: !0\n        }\n    ],\n    number: /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n    function: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    operator: /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nT.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nT.languages.insertBefore(\"javascript\", \"keyword\", {\n    regex: {\n        pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"function-variable\": {\n        pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n        alias: \"function\"\n    },\n    parameter: [\n        {\n            pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n            lookbehind: !0,\n            inside: T.languages.javascript\n        },\n        {\n            pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n            inside: T.languages.javascript\n        },\n        {\n            pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n            lookbehind: !0,\n            inside: T.languages.javascript\n        },\n        {\n            pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n            lookbehind: !0,\n            inside: T.languages.javascript\n        }\n    ],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nT.languages.markup && T.languages.markup.tag.addInlined(\"script\", \"javascript\");\nT.languages.js = T.languages.javascript;\nT.languages.typescript = T.languages.extend(\"javascript\", {\n    keyword: /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n    builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nT.languages.ts = T.languages.typescript;\nfunction _e(e, t, r, n, i) {\n    this.type = e, this.content = t, this.alias = r, this.length = (n || \"\").length | 0, this.greedy = !!i;\n}\n_e.stringify = function(e, t) {\n    return typeof e == \"string\" ? e : Array.isArray(e) ? e.map(function(r) {\n        return _e.stringify(r, t);\n    }).join(\"\") : ad(e.type)(e.content);\n};\nfunction ad(e) {\n    return Aa[e] || od;\n}\nfunction Ra(e) {\n    return ld(e, T.languages.javascript);\n}\nfunction ld(e, t) {\n    return T.tokenize(e, t).map((n)=>_e.stringify(n)).join(\"\");\n}\nvar Ma = I(Os());\nfunction Sa(e) {\n    return (0, Ma.default)(e);\n}\nvar Sn = class e {\n    static read(t) {\n        let r;\n        try {\n            r = ka.default.readFileSync(t, \"utf-8\");\n        } catch  {\n            return null;\n        }\n        return e.fromContent(r);\n    }\n    static fromContent(t) {\n        let r = t.split(/\\r?\\n/);\n        return new e(1, r);\n    }\n    constructor(t, r){\n        this.firstLineNumber = t, this.lines = r;\n    }\n    get lastLineNumber() {\n        return this.firstLineNumber + this.lines.length - 1;\n    }\n    mapLineAt(t, r) {\n        if (t < this.firstLineNumber || t > this.lines.length + this.firstLineNumber) return this;\n        let n = t - this.firstLineNumber, i = [\n            ...this.lines\n        ];\n        return i[n] = r(i[n]), new e(this.firstLineNumber, i);\n    }\n    mapLines(t) {\n        return new e(this.firstLineNumber, this.lines.map((r, n)=>t(r, this.firstLineNumber + n)));\n    }\n    lineAt(t) {\n        return this.lines[t - this.firstLineNumber];\n    }\n    prependSymbolAt(t, r) {\n        return this.mapLines((n, i)=>i === t ? `${r} ${n}` : `  ${n}`);\n    }\n    slice(t, r) {\n        let n = this.lines.slice(t - 1, r).join(`\n`);\n        return new e(t, Sa(n).split(`\n`));\n    }\n    highlight() {\n        let t = Ra(this.toString());\n        return new e(this.firstLineNumber, t.split(`\n`));\n    }\n    toString() {\n        return this.lines.join(`\n`);\n    }\n};\nvar ud = {\n    red: Pe,\n    gray: zr,\n    dim: Je,\n    bold: pe,\n    underline: le,\n    highlightSource: (e)=>e.highlight()\n}, cd = {\n    red: (e)=>e,\n    gray: (e)=>e,\n    dim: (e)=>e,\n    bold: (e)=>e,\n    underline: (e)=>e,\n    highlightSource: (e)=>e\n};\nfunction pd({ callsite: e, message: t, originalMethod: r, isPanic: n, callArguments: i }, o) {\n    let s = {\n        functionName: `prisma.${r}()`,\n        message: t,\n        isPanic: n ?? !1,\n        callArguments: i\n    };\n    if (!e || \"undefined\" < \"u\" || \"development\" === \"production\") return s;\n    let a = e.getLocation();\n    if (!a || !a.lineNumber || !a.columnNumber) return s;\n    let l = Math.max(1, a.lineNumber - 3), u = Sn.read(a.fileName)?.slice(l, a.lineNumber), c = u?.lineAt(a.lineNumber);\n    if (u && c) {\n        let p = md(c), d = dd(c);\n        if (!d) return s;\n        s.functionName = `${d.code})`, s.location = a, n || (u = u.mapLineAt(a.lineNumber, (y)=>y.slice(0, d.openingBraceIndex))), u = o.highlightSource(u);\n        let f = String(u.lastLineNumber).length;\n        if (s.contextLines = u.mapLines((y, g)=>o.gray(String(g).padStart(f)) + \" \" + y).mapLines((y)=>o.dim(y)).prependSymbolAt(a.lineNumber, o.bold(o.red(\"→\"))), i) {\n            let y = p + f + 1;\n            y += 2, s.callArguments = (0, Ia.default)(i, y).slice(y);\n        }\n    }\n    return s;\n}\nfunction dd(e) {\n    let t = Object.keys(we.ModelAction).join(\"|\"), n = new RegExp(String.raw`\\.(${t})\\(`).exec(e);\n    if (n) {\n        let i = n.index + n[0].length, o = e.lastIndexOf(\" \", n.index) + 1;\n        return {\n            code: e.slice(o, i),\n            openingBraceIndex: i\n        };\n    }\n    return null;\n}\nfunction md(e) {\n    let t = 0;\n    for(let r = 0; r < e.length; r++){\n        if (e.charAt(r) !== \" \") return t;\n        t++;\n    }\n    return t;\n}\nfunction fd({ functionName: e, location: t, message: r, isPanic: n, contextLines: i, callArguments: o }, s) {\n    let a = [\n        \"\"\n    ], l = t ? \" in\" : \":\";\n    if (n ? (a.push(s.red(`Oops, an unknown error occurred! This is ${s.bold(\"on us\")}, you did nothing wrong.`)), a.push(s.red(`It occurred in the ${s.bold(`\\`${e}\\``)} invocation${l}`))) : a.push(s.red(`Invalid ${s.bold(`\\`${e}\\``)} invocation${l}`)), t && a.push(s.underline(gd(t))), i) {\n        a.push(\"\");\n        let u = [\n            i.toString()\n        ];\n        o && (u.push(o), u.push(s.dim(\")\"))), a.push(u.join(\"\")), o && a.push(\"\");\n    } else a.push(\"\"), o && a.push(o), a.push(\"\");\n    return a.push(r), a.join(`\n`);\n}\nfunction gd(e) {\n    let t = [\n        e.fileName\n    ];\n    return e.lineNumber && t.push(String(e.lineNumber)), e.columnNumber && t.push(String(e.columnNumber)), t.join(\":\");\n}\nfunction Ut(e) {\n    let t = e.showColors ? ud : cd, r = pd(e, t);\n    return fd(r, t);\n}\nfunction Fa(e, t, r, n) {\n    return e === we.ModelAction.findFirstOrThrow || e === we.ModelAction.findUniqueOrThrow ? yd(t, r, n) : n;\n}\nfunction yd(e, t, r) {\n    return async (n)=>{\n        if (\"rejectOnNotFound\" in n.args) {\n            let o = Ut({\n                originalMethod: n.clientMethod,\n                callsite: n.callsite,\n                message: \"'rejectOnNotFound' option is not supported\"\n            });\n            throw new se(o, {\n                clientVersion: t\n            });\n        }\n        return await r(n).catch((o)=>{\n            throw o instanceof W && o.code === \"P2025\" ? new Ve(`No ${e} found`, t) : o;\n        });\n    };\n}\nfunction Le(e) {\n    return e.replace(/^./, (t)=>t.toLowerCase());\n}\nvar hd = [\n    \"findUnique\",\n    \"findUniqueOrThrow\",\n    \"findFirst\",\n    \"findFirstOrThrow\",\n    \"create\",\n    \"update\",\n    \"upsert\",\n    \"delete\"\n], xd = [\n    \"aggregate\",\n    \"count\",\n    \"groupBy\"\n];\nfunction lo(e, t) {\n    let r = e._extensions.getAllModelExtensions(t) ?? {}, n = [\n        bd(e, t),\n        Ed(e, t),\n        gr(r),\n        ue(\"name\", ()=>t),\n        ue(\"$name\", ()=>t),\n        ue(\"$parent\", ()=>e._appliedParent)\n    ];\n    return Fe({}, n);\n}\nfunction bd(e, t) {\n    let r = Le(t), n = Object.keys(we.ModelAction).concat(\"count\");\n    return {\n        getKeys () {\n            return n;\n        },\n        getPropertyValue (i) {\n            let o = i, s = (l)=>e._request(l);\n            s = Fa(o, t, e._clientVersion, s);\n            let a = (l)=>(u)=>{\n                    let c = it(e._errorFormat);\n                    return e._createPrismaPromise((p)=>{\n                        let d = {\n                            args: u,\n                            dataPath: [],\n                            action: o,\n                            model: t,\n                            clientMethod: `${r}.${i}`,\n                            jsModelName: r,\n                            transaction: p,\n                            callsite: c\n                        };\n                        return s({\n                            ...d,\n                            ...l\n                        });\n                    });\n                };\n            return hd.includes(o) ? ao(e, t, a) : wd(i) ? va(e, i, a) : a({});\n        }\n    };\n}\nfunction wd(e) {\n    return xd.includes(e);\n}\nfunction Ed(e, t) {\n    return gt(ue(\"fields\", ()=>{\n        let r = e._runtimeDataModel.models[t];\n        return Ta(t, r);\n    }));\n}\nfunction Da(e) {\n    return e.replace(/^./, (t)=>t.toUpperCase());\n}\nvar uo = Symbol();\nfunction wr(e) {\n    let t = [\n        Pd(e),\n        ue(uo, ()=>e),\n        ue(\"$parent\", ()=>e._appliedParent)\n    ], r = e._extensions.getAllClientExtensions();\n    return r && t.push(gr(r)), Fe(e, t);\n}\nfunction Pd(e) {\n    let t = Object.keys(e._runtimeDataModel.models), r = t.map(Le), n = [\n        ...new Set(t.concat(r))\n    ];\n    return gt({\n        getKeys () {\n            return n;\n        },\n        getPropertyValue (i) {\n            let o = Da(i);\n            if (e._runtimeDataModel.models[o] !== void 0) return lo(e, o);\n            if (e._runtimeDataModel.models[i] !== void 0) return lo(e, i);\n        },\n        getPropertyDescriptor (i) {\n            if (!r.includes(i)) return {\n                enumerable: !1\n            };\n        }\n    });\n}\nfunction kn(e) {\n    return e[uo] ? e[uo] : e;\n}\nfunction Oa(e) {\n    if (typeof e == \"function\") return e(this);\n    let t = kn(this), r = Object.create(t, {\n        _extensions: {\n            value: this._extensions.append(e)\n        },\n        _appliedParent: {\n            value: this,\n            configurable: !0\n        },\n        $use: {\n            value: void 0\n        },\n        $on: {\n            value: void 0\n        }\n    });\n    return wr(r);\n}\nfunction Na({ result: e, modelName: t, select: r, extensions: n }) {\n    let i = n.getAllComputedFields(t);\n    if (!i) return e;\n    let o = [], s = [];\n    for (let a of Object.values(i)){\n        if (r) {\n            if (!r[a.name]) continue;\n            let l = a.needs.filter((u)=>!r[u]);\n            l.length > 0 && s.push(yr(l));\n        }\n        vd(e, a.needs) && o.push(Td(a, Fe(e, o)));\n    }\n    return o.length > 0 || s.length > 0 ? Fe(e, [\n        ...o,\n        ...s\n    ]) : e;\n}\nfunction vd(e, t) {\n    return t.every((r)=>Vi(e, r));\n}\nfunction Td(e, t) {\n    return gt(ue(e.name, ()=>e.compute(t)));\n}\nfunction In({ visitor: e, result: t, args: r, runtimeDataModel: n, modelName: i }) {\n    if (Array.isArray(t)) {\n        for(let s = 0; s < t.length; s++)t[s] = In({\n            result: t[s],\n            args: r,\n            modelName: i,\n            runtimeDataModel: n,\n            visitor: e\n        });\n        return t;\n    }\n    let o = e(t, i, r) ?? t;\n    return r.include && La({\n        includeOrSelect: r.include,\n        result: o,\n        parentModelName: i,\n        runtimeDataModel: n,\n        visitor: e\n    }), r.select && La({\n        includeOrSelect: r.select,\n        result: o,\n        parentModelName: i,\n        runtimeDataModel: n,\n        visitor: e\n    }), o;\n}\nfunction La({ includeOrSelect: e, result: t, parentModelName: r, runtimeDataModel: n, visitor: i }) {\n    for (let [o, s] of Object.entries(e)){\n        if (!s || t[o] == null) continue;\n        let l = n.models[r].fields.find((c)=>c.name === o);\n        if (!l || l.kind !== \"object\" || !l.relationName) continue;\n        let u = typeof s == \"object\" ? s : {};\n        t[o] = In({\n            visitor: i,\n            result: t[o],\n            args: u,\n            modelName: l.type,\n            runtimeDataModel: n\n        });\n    }\n}\nfunction $a({ result: e, modelName: t, args: r, extensions: n, runtimeDataModel: i }) {\n    return n.isEmpty() || e == null || typeof e != \"object\" || !i.models[t] ? e : In({\n        result: e,\n        args: r ?? {},\n        modelName: t,\n        runtimeDataModel: i,\n        visitor: (s, a, l)=>Na({\n                result: s,\n                modelName: Le(a),\n                select: l.select,\n                extensions: n\n            })\n    });\n}\nfunction qa(e) {\n    if (e instanceof me) return Cd(e);\n    if (Array.isArray(e)) {\n        let r = [\n            e[0]\n        ];\n        for(let n = 1; n < e.length; n++)r[n] = Er(e[n]);\n        return r;\n    }\n    let t = {};\n    for(let r in e)t[r] = Er(e[r]);\n    return t;\n}\nfunction Cd(e) {\n    return new me(e.strings, e.values);\n}\nfunction Er(e) {\n    if (typeof e != \"object\" || e == null || e instanceof ke || qt(e)) return e;\n    if ($t(e)) return new Oe(e.toFixed());\n    if (Ot(e)) return new Date(+e);\n    if (ArrayBuffer.isView(e)) return e.slice(0);\n    if (Array.isArray(e)) {\n        let t = e.length, r;\n        for(r = Array(t); t--;)r[t] = Er(e[t]);\n        return r;\n    }\n    if (typeof e == \"object\") {\n        let t = {};\n        for(let r in e)r === \"__proto__\" ? Object.defineProperty(t, r, {\n            value: Er(e[r]),\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n        }) : t[r] = Er(e[r]);\n        return t;\n    }\n    ft(e, \"Unknown value\");\n}\nfunction Va(e, t, r, n = 0) {\n    return e._createPrismaPromise((i)=>{\n        let o = t.customDataProxyFetch;\n        return \"transaction\" in t && i !== void 0 && (t.transaction?.kind === \"batch\" && t.transaction.lock.then(), t.transaction = i), n === r.length ? e._executeRequest(t) : r[n]({\n            model: t.model,\n            operation: t.model ? t.action : t.clientMethod,\n            args: qa(t.args ?? {}),\n            __internalParams: t,\n            query: (s, a = t)=>{\n                let l = a.customDataProxyFetch;\n                return a.customDataProxyFetch = Qa(o, l), a.args = s, Va(e, a, r, n + 1);\n            }\n        });\n    });\n}\nfunction Ba(e, t) {\n    let { jsModelName: r, action: n, clientMethod: i } = t, o = r ? n : i;\n    if (e._extensions.isEmpty()) return e._executeRequest(t);\n    let s = e._extensions.getAllQueryCallbacks(r ?? \"$none\", o);\n    return Va(e, t, s);\n}\nfunction Ua(e) {\n    return (t)=>{\n        let r = {\n            requests: t\n        }, n = t[0].extensions.getAllBatchQueryCallbacks();\n        return n.length ? Ka(r, n, 0, e) : e(r);\n    };\n}\nfunction Ka(e, t, r, n) {\n    if (r === t.length) return n(e);\n    let i = e.customDataProxyFetch, o = e.requests[0].transaction;\n    return t[r]({\n        args: {\n            queries: e.requests.map((s)=>({\n                    model: s.modelName,\n                    operation: s.action,\n                    args: s.args\n                })),\n            transaction: o ? {\n                isolationLevel: o.kind === \"batch\" ? o.isolationLevel : void 0\n            } : void 0\n        },\n        __internalParams: e,\n        query (s, a = e) {\n            let l = a.customDataProxyFetch;\n            return a.customDataProxyFetch = Qa(i, l), Ka(a, t, r + 1, n);\n        }\n    });\n}\nvar ja = (e)=>e;\nfunction Qa(e = ja, t = ja) {\n    return (r)=>e(t(r));\n}\nfunction Ja(e, t, r) {\n    let n = Le(r);\n    return !t.result || !(t.result.$allModels || t.result[n]) ? e : _d({\n        ...e,\n        ...Ga(t.name, e, t.result.$allModels),\n        ...Ga(t.name, e, t.result[n])\n    });\n}\nfunction _d(e) {\n    let t = new Ie, r = (n, i)=>t.getOrCreate(n, ()=>i.has(n) ? [\n                n\n            ] : (i.add(n), e[n] ? e[n].needs.flatMap((o)=>r(o, i)) : [\n                n\n            ]));\n    return It(e, (n)=>({\n            ...n,\n            needs: r(n.name, new Set)\n        }));\n}\nfunction Ga(e, t, r) {\n    return r ? It(r, ({ needs: n, compute: i }, o)=>({\n            name: o,\n            needs: n ? Object.keys(n).filter((s)=>n[s]) : [],\n            compute: Ad(t, o, i)\n        })) : {};\n}\nfunction Ad(e, t, r) {\n    let n = e?.[t]?.compute;\n    return n ? (i)=>r({\n            ...i,\n            [t]: n(i)\n        }) : r;\n}\nfunction Ha(e, t) {\n    if (!t) return e;\n    let r = {\n        ...e\n    };\n    for (let n of Object.values(t))if (e[n.name]) for (let i of n.needs)r[i] = !0;\n    return r;\n}\nvar Fn = class {\n    constructor(t, r){\n        this.extension = t;\n        this.previous = r;\n        this.computedFieldsCache = new Ie;\n        this.modelExtensionsCache = new Ie;\n        this.queryCallbacksCache = new Ie;\n        this.clientExtensions = ur(()=>this.extension.client ? {\n                ...this.previous?.getAllClientExtensions(),\n                ...this.extension.client\n            } : this.previous?.getAllClientExtensions());\n        this.batchCallbacks = ur(()=>{\n            let t = this.previous?.getAllBatchQueryCallbacks() ?? [], r = this.extension.query?.$__internalBatch;\n            return r ? t.concat(r) : t;\n        });\n    }\n    getAllComputedFields(t) {\n        return this.computedFieldsCache.getOrCreate(t, ()=>Ja(this.previous?.getAllComputedFields(t), this.extension, t));\n    }\n    getAllClientExtensions() {\n        return this.clientExtensions.get();\n    }\n    getAllModelExtensions(t) {\n        return this.modelExtensionsCache.getOrCreate(t, ()=>{\n            let r = Le(t);\n            return !this.extension.model || !(this.extension.model[r] || this.extension.model.$allModels) ? this.previous?.getAllModelExtensions(t) : {\n                ...this.previous?.getAllModelExtensions(t),\n                ...this.extension.model.$allModels,\n                ...this.extension.model[r]\n            };\n        });\n    }\n    getAllQueryCallbacks(t, r) {\n        return this.queryCallbacksCache.getOrCreate(`${t}:${r}`, ()=>{\n            let n = this.previous?.getAllQueryCallbacks(t, r) ?? [], i = [], o = this.extension.query;\n            return !o || !(o[t] || o.$allModels || o[r] || o.$allOperations) ? n : (o[t] !== void 0 && (o[t][r] !== void 0 && i.push(o[t][r]), o[t].$allOperations !== void 0 && i.push(o[t].$allOperations)), t !== \"$none\" && o.$allModels !== void 0 && (o.$allModels[r] !== void 0 && i.push(o.$allModels[r]), o.$allModels.$allOperations !== void 0 && i.push(o.$allModels.$allOperations)), o[r] !== void 0 && i.push(o[r]), o.$allOperations !== void 0 && i.push(o.$allOperations), n.concat(i));\n        });\n    }\n    getAllBatchQueryCallbacks() {\n        return this.batchCallbacks.get();\n    }\n}, Dn = class e {\n    constructor(t){\n        this.head = t;\n    }\n    static empty() {\n        return new e;\n    }\n    static single(t) {\n        return new e(new Fn(t));\n    }\n    isEmpty() {\n        return this.head === void 0;\n    }\n    append(t) {\n        return new e(new Fn(t, this.head));\n    }\n    getAllComputedFields(t) {\n        return this.head?.getAllComputedFields(t);\n    }\n    getAllClientExtensions() {\n        return this.head?.getAllClientExtensions();\n    }\n    getAllModelExtensions(t) {\n        return this.head?.getAllModelExtensions(t);\n    }\n    getAllQueryCallbacks(t, r) {\n        return this.head?.getAllQueryCallbacks(t, r) ?? [];\n    }\n    getAllBatchQueryCallbacks() {\n        return this.head?.getAllBatchQueryCallbacks() ?? [];\n    }\n};\nvar Wa = L(\"prisma:client\"), za = {\n    Vercel: \"vercel\",\n    \"Netlify CI\": \"netlify\"\n};\nfunction Ya({ postinstall: e, ciName: t, clientVersion: r }) {\n    if (Wa(\"checkPlatformCaching:postinstall\", e), Wa(\"checkPlatformCaching:ciName\", t), e === !0 && t && t in za) {\n        let n = `Prisma has detected that this project was built on ${t}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \\`prisma generate\\` command during the build process.\n\nLearn how: https://pris.ly/d/${za[t]}-build`;\n        throw console.error(n), new k(n, r);\n    }\n}\nfunction Za(e, t) {\n    return e ? e.datasources ? e.datasources : e.datasourceUrl ? {\n        [t[0]]: {\n            url: e.datasourceUrl\n        }\n    } : {} : {};\n}\nfunction Pr({ error: e, user_facing_error: t }, r) {\n    return t.error_code ? new W(t.message, {\n        code: t.error_code,\n        clientVersion: r,\n        meta: t.meta,\n        batchRequestIdx: t.batch_request_idx\n    }) : new z(e, {\n        clientVersion: r,\n        batchRequestIdx: t.batch_request_idx\n    });\n}\nvar Kt = class {\n};\nvar nl = I(__webpack_require__(/*! fs */ \"fs\")), vr = I(__webpack_require__(/*! path */ \"path\"));\nfunction On(e) {\n    let { runtimeBinaryTarget: t } = e;\n    return `Add \"${t}\" to \\`binaryTargets\\` in the \"schema.prisma\" file and run \\`prisma generate\\` after saving it:\n\n${Rd(e)}`;\n}\nfunction Rd(e) {\n    let { generator: t, generatorBinaryTargets: r, runtimeBinaryTarget: n } = e, i = {\n        fromEnvVar: null,\n        value: n\n    }, o = [\n        ...r,\n        i\n    ];\n    return $i({\n        ...t,\n        binaryTargets: o\n    });\n}\nfunction ot(e) {\n    let { runtimeBinaryTarget: t } = e;\n    return `Prisma Client could not locate the Query Engine for runtime \"${t}\".`;\n}\nfunction st(e) {\n    let { searchedLocations: t } = e;\n    return `The following locations have been searched:\n${[\n        ...new Set(t)\n    ].map((i)=>`  ${i}`).join(`\n`)}`;\n}\nfunction Xa(e) {\n    let { runtimeBinaryTarget: t } = e;\n    return `${ot(e)}\n\nThis happened because \\`binaryTargets\\` have been pinned, but the actual deployment also required \"${t}\".\n${On(e)}\n\n${st(e)}`;\n}\nfunction Nn(e) {\n    return `We would appreciate if you could take the time to share some information with us.\nPlease help us by answering a few questions: https://pris.ly/${e}`;\n}\nfunction Ln(e) {\n    let { errorStack: t } = e;\n    return t?.match(/\\/\\.next|\\/next@|\\/next\\//) ? `\n\nWe detected that you are using Next.js, learn how to fix this: https://pris.ly/d/engine-not-found-nextjs.` : \"\";\n}\nfunction el(e) {\n    let { queryEngineName: t } = e;\n    return `${ot(e)}${Ln(e)}\n\nThis is likely caused by a bundler that has not copied \"${t}\" next to the resulting bundle.\nEnsure that \"${t}\" has been copied next to the bundle or in \"${e.expectedLocation}\".\n\n${Nn(\"engine-not-found-bundler-investigation\")}\n\n${st(e)}`;\n}\nfunction tl(e) {\n    let { runtimeBinaryTarget: t, generatorBinaryTargets: r } = e, n = r.find((i)=>i.native);\n    return `${ot(e)}\n\nThis happened because Prisma Client was generated for \"${n?.value ?? \"unknown\"}\", but the actual deployment required \"${t}\".\n${On(e)}\n\n${st(e)}`;\n}\nfunction rl(e) {\n    let { queryEngineName: t } = e;\n    return `${ot(e)}${Ln(e)}\n\nThis is likely caused by tooling that has not copied \"${t}\" to the deployment folder.\nEnsure that you ran \\`prisma generate\\` and that \"${t}\" has been copied to \"${e.expectedLocation}\".\n\n${Nn(\"engine-not-found-tooling-investigation\")}\n\n${st(e)}`;\n}\nvar Md = L(\"prisma:client:engines:resolveEnginePath\"), Sd = ()=>new RegExp(\"runtime[\\\\\\\\/]library\\\\.m?js$\");\nasync function il(e, t) {\n    let r = {\n        binary: process.env.PRISMA_QUERY_ENGINE_BINARY,\n        library: process.env.PRISMA_QUERY_ENGINE_LIBRARY\n    }[e] ?? t.prismaPath;\n    if (r !== void 0) return r;\n    let { enginePath: n, searchedLocations: i } = await kd(e, t);\n    if (Md(\"enginePath\", n), n !== void 0 && e === \"binary\" && Fi(n), n !== void 0) return t.prismaPath = n;\n    let o = await St(), s = t.generator?.binaryTargets ?? [], a = s.some((d)=>d.native), l = !s.some((d)=>d.value === o), u = __filename.match(Sd()) === null, c = {\n        searchedLocations: i,\n        generatorBinaryTargets: s,\n        generator: t.generator,\n        runtimeBinaryTarget: o,\n        queryEngineName: ol(e, o),\n        expectedLocation: vr.default.relative(process.cwd(), t.dirname),\n        errorStack: new Error().stack\n    }, p;\n    throw a && l ? p = tl(c) : l ? p = Xa(c) : u ? p = el(c) : p = rl(c), new k(p, t.clientVersion);\n}\nasync function kd(engineType, config) {\n    let binaryTarget = await St(), searchedLocations = [], dirname = eval(\"__dirname\"), searchLocations = [\n        config.dirname,\n        vr.default.resolve(dirname, \"..\"),\n        config.generator?.output?.value ?? dirname,\n        vr.default.resolve(dirname, \"../../../.prisma/client\"),\n        \"/tmp/prisma-engines\",\n        config.cwd\n    ];\n    __filename.includes(\"resolveEnginePath\") && searchLocations.push(Ls());\n    for (let e of searchLocations){\n        let t = ol(engineType, binaryTarget), r = vr.default.join(e, t);\n        if (searchedLocations.push(e), nl.default.existsSync(r)) return {\n            enginePath: r,\n            searchedLocations\n        };\n    }\n    return {\n        enginePath: void 0,\n        searchedLocations\n    };\n}\nfunction ol(e, t) {\n    return e === \"library\" ? xi(t, \"fs\") : `query-engine-${t}${t === \"windows\" ? \".exe\" : \"\"}`;\n}\nfunction $n(e, t) {\n    return {\n        batch: e,\n        transaction: t?.kind === \"batch\" ? {\n            isolationLevel: t.options.isolationLevel\n        } : void 0\n    };\n}\nvar co = I(ji());\nfunction sl(e) {\n    return e ? e.replace(/\".*\"/g, '\"X\"').replace(/[\\s:\\[]([+-]?([0-9]*[.])?[0-9]+)/g, (t)=>`${t[0]}5`) : \"\";\n}\nfunction al(e) {\n    return e.split(`\n`).map((t)=>t.replace(/^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)\\s*/, \"\").replace(/\\+\\d+\\s*ms$/, \"\")).join(`\n`);\n}\nvar ll = I(Qs());\nfunction ul({ title: e, user: t = \"prisma\", repo: r = \"prisma\", template: n = \"bug_report.md\", body: i }) {\n    return (0, ll.default)({\n        user: t,\n        repo: r,\n        template: n,\n        title: e,\n        body: i\n    });\n}\nfunction cl({ version: e, platform: t, title: r, description: n, engineVersion: i, database: o, query: s }) {\n    let a = ts(6e3 - (s?.length ?? 0)), l = al((0, co.default)(a)), u = n ? `# Description\n\\`\\`\\`\n${n}\n\\`\\`\\`` : \"\", c = (0, co.default)(`Hi Prisma Team! My Prisma Client just crashed. This is the report:\n## Versions\n\n| Name            | Version            |\n|-----------------|--------------------|\n| Node            | ${process.version?.padEnd(19)}| \n| OS              | ${t?.padEnd(19)}|\n| Prisma Client   | ${e?.padEnd(19)}|\n| Query Engine    | ${i?.padEnd(19)}|\n| Database        | ${o?.padEnd(19)}|\n\n${u}\n\n## Logs\n\\`\\`\\`\n${l}\n\\`\\`\\`\n\n## Client Snippet\n\\`\\`\\`ts\n// PLEASE FILL YOUR CODE SNIPPET HERE\n\\`\\`\\`\n\n## Schema\n\\`\\`\\`prisma\n// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE\n\\`\\`\\`\n\n## Prisma Engine Query\n\\`\\`\\`\n${s ? sl(s) : \"\"}\n\\`\\`\\`\n`), p = ul({\n        title: r,\n        body: c\n    });\n    return `${r}\n\nThis is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.\n\n${le(p)}\n\nIf you want the Prisma team to look into it, please open the link above \\u{1F64F}\nTo increase the chance of success, please post your schema and a snippet of\nhow you used Prisma Client in the issue. \n`;\n}\nfunction qn({ inlineDatasources: e, overrideDatasources: t, env: r, clientVersion: n }) {\n    let i, o = Object.keys(e)[0], s = e[o]?.url, a = t[o]?.url;\n    if (o === void 0 ? i = void 0 : a ? i = a : s?.value ? i = s.value : s?.fromEnvVar && (i = r[s.fromEnvVar]), s?.fromEnvVar !== void 0 && i === void 0) throw new k(`error: Environment variable not found: ${s.fromEnvVar}.`, n);\n    if (i === void 0) throw new k(\"error: Missing URL environment variable, value, or override.\", n);\n    return i;\n}\nvar jn = class extends Error {\n    constructor(r, n){\n        super(r);\n        this.clientVersion = n.clientVersion, this.cause = n.cause;\n    }\n    get [Symbol.toStringTag]() {\n        return this.name;\n    }\n};\nvar ge = class extends jn {\n    constructor(r, n){\n        super(r, n);\n        this.isRetryable = n.isRetryable ?? !0;\n    }\n};\nfunction S(e, t) {\n    return {\n        ...e,\n        isRetryable: t\n    };\n}\nvar Qt = class extends ge {\n    constructor(r){\n        super(\"This request must be retried\", S(r, !0));\n        this.name = \"ForcedRetryError\";\n        this.code = \"P5001\";\n    }\n};\nE(Qt, \"ForcedRetryError\");\nvar ht = class extends ge {\n    constructor(r, n){\n        super(r, S(n, !1));\n        this.name = \"InvalidDatasourceError\";\n        this.code = \"P5002\";\n    }\n};\nE(ht, \"InvalidDatasourceError\");\nvar xt = class extends ge {\n    constructor(r, n){\n        super(r, S(n, !1));\n        this.name = \"NotImplementedYetError\";\n        this.code = \"P5004\";\n    }\n};\nE(xt, \"NotImplementedYetError\");\nvar j = class extends ge {\n    constructor(r, n){\n        super(r, n);\n        this.response = n.response;\n        let i = this.response.headers.get(\"prisma-request-id\");\n        if (i) {\n            let o = `(The request id was: ${i})`;\n            this.message = this.message + \" \" + o;\n        }\n    }\n};\nvar bt = class extends j {\n    constructor(r){\n        super(\"Schema needs to be uploaded\", S(r, !0));\n        this.name = \"SchemaMissingError\";\n        this.code = \"P5005\";\n    }\n};\nE(bt, \"SchemaMissingError\");\nvar po = \"This request could not be understood by the server\", Tr = class extends j {\n    constructor(r, n, i){\n        super(n || po, S(r, !1));\n        this.name = \"BadRequestError\";\n        this.code = \"P5000\";\n        i && (this.code = i);\n    }\n};\nE(Tr, \"BadRequestError\");\nvar Cr = class extends j {\n    constructor(r, n){\n        super(\"Engine not started: healthcheck timeout\", S(r, !0));\n        this.name = \"HealthcheckTimeoutError\";\n        this.code = \"P5013\";\n        this.logs = n;\n    }\n};\nE(Cr, \"HealthcheckTimeoutError\");\nvar _r = class extends j {\n    constructor(r, n, i){\n        super(n, S(r, !0));\n        this.name = \"EngineStartupError\";\n        this.code = \"P5014\";\n        this.logs = i;\n    }\n};\nE(_r, \"EngineStartupError\");\nvar Ar = class extends j {\n    constructor(r){\n        super(\"Engine version is not supported\", S(r, !1));\n        this.name = \"EngineVersionNotSupportedError\";\n        this.code = \"P5012\";\n    }\n};\nE(Ar, \"EngineVersionNotSupportedError\");\nvar mo = \"Request timed out\", Rr = class extends j {\n    constructor(r, n = mo){\n        super(n, S(r, !1));\n        this.name = \"GatewayTimeoutError\";\n        this.code = \"P5009\";\n    }\n};\nE(Rr, \"GatewayTimeoutError\");\nvar Id = \"Interactive transaction error\", Mr = class extends j {\n    constructor(r, n = Id){\n        super(n, S(r, !1));\n        this.name = \"InteractiveTransactionError\";\n        this.code = \"P5015\";\n    }\n};\nE(Mr, \"InteractiveTransactionError\");\nvar Fd = \"Request parameters are invalid\", Sr = class extends j {\n    constructor(r, n = Fd){\n        super(n, S(r, !1));\n        this.name = \"InvalidRequestError\";\n        this.code = \"P5011\";\n    }\n};\nE(Sr, \"InvalidRequestError\");\nvar fo = \"Requested resource does not exist\", kr = class extends j {\n    constructor(r, n = fo){\n        super(n, S(r, !1));\n        this.name = \"NotFoundError\";\n        this.code = \"P5003\";\n    }\n};\nE(kr, \"NotFoundError\");\nvar go = \"Unknown server error\", Gt = class extends j {\n    constructor(r, n, i){\n        super(n || go, S(r, !0));\n        this.name = \"ServerError\";\n        this.code = \"P5006\";\n        this.logs = i;\n    }\n};\nE(Gt, \"ServerError\");\nvar yo = \"Unauthorized, check your connection string\", Ir = class extends j {\n    constructor(r, n = yo){\n        super(n, S(r, !1));\n        this.name = \"UnauthorizedError\";\n        this.code = \"P5007\";\n    }\n};\nE(Ir, \"UnauthorizedError\");\nvar ho = \"Usage exceeded, retry again later\", Fr = class extends j {\n    constructor(r, n = ho){\n        super(n, S(r, !0));\n        this.name = \"UsageExceededError\";\n        this.code = \"P5008\";\n    }\n};\nE(Fr, \"UsageExceededError\");\nasync function Dd(e) {\n    let t;\n    try {\n        t = await e.text();\n    } catch  {\n        return {\n            type: \"EmptyError\"\n        };\n    }\n    try {\n        let r = JSON.parse(t);\n        if (typeof r == \"string\") switch(r){\n            case \"InternalDataProxyError\":\n                return {\n                    type: \"DataProxyError\",\n                    body: r\n                };\n            default:\n                return {\n                    type: \"UnknownTextError\",\n                    body: r\n                };\n        }\n        if (typeof r == \"object\" && r !== null) {\n            if (\"is_panic\" in r && \"message\" in r && \"error_code\" in r) return {\n                type: \"QueryEngineError\",\n                body: r\n            };\n            if (\"EngineNotStarted\" in r || \"InteractiveTransactionMisrouted\" in r || \"InvalidRequestError\" in r) {\n                let n = Object.values(r)[0].reason;\n                return typeof n == \"string\" && ![\n                    \"SchemaMissing\",\n                    \"EngineVersionNotSupported\"\n                ].includes(n) ? {\n                    type: \"UnknownJsonError\",\n                    body: r\n                } : {\n                    type: \"DataProxyError\",\n                    body: r\n                };\n            }\n        }\n        return {\n            type: \"UnknownJsonError\",\n            body: r\n        };\n    } catch  {\n        return t === \"\" ? {\n            type: \"EmptyError\"\n        } : {\n            type: \"UnknownTextError\",\n            body: t\n        };\n    }\n}\nasync function Dr(e, t) {\n    if (e.ok) return;\n    let r = {\n        clientVersion: t,\n        response: e\n    }, n = await Dd(e);\n    if (n.type === \"QueryEngineError\") throw new W(n.body.message, {\n        code: n.body.error_code,\n        clientVersion: t\n    });\n    if (n.type === \"DataProxyError\") {\n        if (n.body === \"InternalDataProxyError\") throw new Gt(r, \"Internal Data Proxy error\");\n        if (\"EngineNotStarted\" in n.body) {\n            if (n.body.EngineNotStarted.reason === \"SchemaMissing\") return new bt(r);\n            if (n.body.EngineNotStarted.reason === \"EngineVersionNotSupported\") throw new Ar(r);\n            if (\"EngineStartupError\" in n.body.EngineNotStarted.reason) {\n                let { msg: i, logs: o } = n.body.EngineNotStarted.reason.EngineStartupError;\n                throw new _r(r, i, o);\n            }\n            if (\"KnownEngineStartupError\" in n.body.EngineNotStarted.reason) {\n                let { msg: i, error_code: o } = n.body.EngineNotStarted.reason.KnownEngineStartupError;\n                throw new k(i, t, o);\n            }\n            if (\"HealthcheckTimeout\" in n.body.EngineNotStarted.reason) {\n                let { logs: i } = n.body.EngineNotStarted.reason.HealthcheckTimeout;\n                throw new Cr(r, i);\n            }\n        }\n        if (\"InteractiveTransactionMisrouted\" in n.body) {\n            let i = {\n                IDParseError: \"Could not parse interactive transaction ID\",\n                NoQueryEngineFoundError: \"Could not find Query Engine for the specified host and transaction ID\",\n                TransactionStartError: \"Could not start interactive transaction\"\n            };\n            throw new Mr(r, i[n.body.InteractiveTransactionMisrouted.reason]);\n        }\n        if (\"InvalidRequestError\" in n.body) throw new Sr(r, n.body.InvalidRequestError.reason);\n    }\n    if (e.status === 401 || e.status === 403) throw new Ir(r, Jt(yo, n));\n    if (e.status === 404) return new kr(r, Jt(fo, n));\n    if (e.status === 429) throw new Fr(r, Jt(ho, n));\n    if (e.status === 504) throw new Rr(r, Jt(mo, n));\n    if (e.status >= 500) throw new Gt(r, Jt(go, n));\n    if (e.status >= 400) throw new Tr(r, Jt(po, n));\n}\nfunction Jt(e, t) {\n    return t.type === \"EmptyError\" ? e : `${e}: ${JSON.stringify(t)}`;\n}\nfunction pl(e) {\n    let t = Math.pow(2, e) * 50, r = Math.ceil(Math.random() * t) - Math.ceil(t / 2), n = t + r;\n    return new Promise((i)=>setTimeout(()=>i(n), n));\n}\nfunction dl(e) {\n    if (!!e.generator?.previewFeatures.some((r)=>r.toLowerCase().includes(\"metrics\"))) throw new k(\"The `metrics` preview feature is not yet available with Accelerate.\\nPlease remove `metrics` from the `previewFeatures` in your schema.\\n\\nMore information about Accelerate: https://pris.ly/d/accelerate\", e.clientVersion);\n}\nvar ml = {\n    \"@prisma/debug\": \"workspace:*\",\n    \"@prisma/engines-version\": \"5.6.0-32.e95e739751f42d8ca026f6b910f5a2dc5adeaeee\",\n    \"@prisma/fetch-engine\": \"workspace:*\",\n    \"@prisma/get-platform\": \"workspace:*\",\n    \"@swc/core\": \"1.3.96\",\n    \"@swc/jest\": \"0.2.29\",\n    \"@types/jest\": \"29.5.8\",\n    \"@types/node\": \"18.18.9\",\n    execa: \"5.1.1\",\n    jest: \"29.7.0\",\n    typescript: \"5.2.2\"\n};\nvar Or = class extends ge {\n    constructor(r, n){\n        super(`Cannot fetch data from service:\n${r}`, S(n, !0));\n        this.name = \"RequestError\";\n        this.code = \"P5010\";\n    }\n};\nE(Or, \"RequestError\");\nasync function wt(e, t, r = (n)=>n) {\n    let n = t.clientVersion;\n    try {\n        return typeof fetch == \"function\" ? await r(fetch)(e, t) : await r(xo)(e, t);\n    } catch (i) {\n        let o = i.message ?? \"Unknown error\";\n        throw new Or(o, {\n            clientVersion: n\n        });\n    }\n}\nfunction Nd(e) {\n    return {\n        ...e.headers,\n        \"Content-Type\": \"application/json\"\n    };\n}\nfunction Ld(e) {\n    return {\n        method: e.method,\n        headers: Nd(e)\n    };\n}\nfunction $d(e, t) {\n    return {\n        text: ()=>Promise.resolve(Buffer.concat(e).toString()),\n        json: ()=>Promise.resolve().then(()=>JSON.parse(Buffer.concat(e).toString())),\n        ok: t.statusCode >= 200 && t.statusCode <= 299,\n        status: t.statusCode,\n        url: t.url,\n        headers: new bo(t.headers)\n    };\n}\nasync function xo(e, t = {}) {\n    let r = qd(\"https\"), n = Ld(t), i = [], { origin: o } = new URL(e);\n    return new Promise((s, a)=>{\n        let l = r.request(e, n, (u)=>{\n            let { statusCode: c, headers: { location: p } } = u;\n            c >= 301 && c <= 399 && p && (p.startsWith(\"http\") === !1 ? s(xo(`${o}${p}`, t)) : s(xo(p, t))), u.on(\"data\", (d)=>i.push(d)), u.on(\"end\", ()=>s($d(i, u))), u.on(\"error\", a);\n        });\n        l.on(\"error\", a), l.end(t.body ?? \"\");\n    });\n}\nvar qd = undefined, bo = class {\n    constructor(t = {}){\n        this.headers = new Map;\n        for (let [r, n] of Object.entries(t))if (typeof n == \"string\") this.headers.set(r, n);\n        else if (Array.isArray(n)) for (let i of n)this.headers.set(r, i);\n    }\n    append(t, r) {\n        this.headers.set(t, r);\n    }\n    delete(t) {\n        this.headers.delete(t);\n    }\n    get(t) {\n        return this.headers.get(t) ?? null;\n    }\n    has(t) {\n        return this.headers.has(t);\n    }\n    set(t, r) {\n        this.headers.set(t, r);\n    }\n    forEach(t, r) {\n        for (let [n, i] of this.headers)t.call(r, i, n, this);\n    }\n};\nvar jd = /^[1-9][0-9]*\\.[0-9]+\\.[0-9]+$/, fl = L(\"prisma:client:dataproxyEngine\");\nasync function Vd(e, t) {\n    let r = ml[\"@prisma/engines-version\"], n = t.clientVersion ?? \"unknown\";\n    if (process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION) return process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;\n    if (e.includes(\"accelerate\") && n !== \"0.0.0\" && n !== \"in-memory\") return n;\n    let [i, o] = n?.split(\"-\") ?? [];\n    if (o === void 0 && jd.test(i)) return i;\n    if (o !== void 0 || n === \"0.0.0\" || n === \"in-memory\") {\n        if (e.startsWith(\"localhost\") || e.startsWith(\"127.0.0.1\")) return \"0.0.0\";\n        let [s] = r.split(\"-\") ?? [], [a, l, u] = s.split(\".\"), c = Bd(`<=${a}.${l}.${u}`), p = await wt(c, {\n            clientVersion: n\n        });\n        if (!p.ok) throw new Error(`Failed to fetch stable Prisma version, unpkg.com status ${p.status} ${p.statusText}, response body: ${await p.text() || \"<empty body>\"}`);\n        let d = await p.text();\n        fl(\"length of body fetched from unpkg.com\", d.length);\n        let f;\n        try {\n            f = JSON.parse(d);\n        } catch (y) {\n            throw console.error(\"JSON.parse error: body fetched from unpkg.com: \", d), y;\n        }\n        return f.version;\n    }\n    throw new xt(\"Only `major.minor.patch` versions are supported by Accelerate.\", {\n        clientVersion: n\n    });\n}\nasync function gl(e, t) {\n    let r = await Vd(e, t);\n    return fl(\"version\", r), r;\n}\nfunction Bd(e) {\n    return encodeURI(`https://unpkg.com/prisma@${e}/package.json`);\n}\nvar yl = 3, wo = L(\"prisma:client:dataproxyEngine\"), Eo = class {\n    constructor({ apiKey: t, tracingHelper: r, logLevel: n, logQueries: i, engineHash: o }){\n        this.apiKey = t, this.tracingHelper = r, this.logLevel = n, this.logQueries = i, this.engineHash = o;\n    }\n    build({ traceparent: t, interactiveTransaction: r } = {}) {\n        let n = {\n            Authorization: `Bearer ${this.apiKey}`,\n            \"Prisma-Engine-Hash\": this.engineHash\n        };\n        this.tracingHelper.isEnabled() && (n.traceparent = t ?? this.tracingHelper.getTraceParent()), r && (n[\"X-transaction-id\"] = r.id);\n        let i = this.buildCaptureSettings();\n        return i.length > 0 && (n[\"X-capture-telemetry\"] = i.join(\", \")), n;\n    }\n    buildCaptureSettings() {\n        let t = [];\n        return this.tracingHelper.isEnabled() && t.push(\"tracing\"), this.logLevel && t.push(this.logLevel), this.logQueries && t.push(\"query\"), t;\n    }\n}, Nr = class extends Kt {\n    constructor(r){\n        super();\n        dl(r), this.config = r, this.env = {\n            ...this.config.env,\n            ...process.env\n        }, this.inlineSchema = r.inlineSchema, this.inlineDatasources = r.inlineDatasources, this.inlineSchemaHash = r.inlineSchemaHash, this.clientVersion = r.clientVersion, this.engineHash = r.engineVersion, this.logEmitter = r.logEmitter, this.tracingHelper = this.config.tracingHelper;\n    }\n    apiKey() {\n        return this.headerBuilder.apiKey;\n    }\n    version() {\n        return this.engineHash;\n    }\n    async start() {\n        this.startPromise !== void 0 && await this.startPromise, this.startPromise = (async ()=>{\n            let [r, n] = this.extractHostAndApiKey();\n            this.host = r, this.headerBuilder = new Eo({\n                apiKey: n,\n                tracingHelper: this.tracingHelper,\n                logLevel: this.config.logLevel,\n                logQueries: this.config.logQueries,\n                engineHash: this.engineHash\n            }), this.remoteClientVersion = await gl(r, this.config), wo(\"host\", this.host);\n        })(), await this.startPromise;\n    }\n    async stop() {}\n    propagateResponseExtensions(r) {\n        r?.logs?.length && r.logs.forEach((n)=>{\n            switch(n.level){\n                case \"debug\":\n                case \"error\":\n                case \"trace\":\n                case \"warn\":\n                case \"info\":\n                    break;\n                case \"query\":\n                    {\n                        let i = typeof n.attributes.query == \"string\" ? n.attributes.query : \"\";\n                        if (!this.tracingHelper.isEnabled()) {\n                            let [o] = i.split(\"/* traceparent\");\n                            i = o;\n                        }\n                        this.logEmitter.emit(\"query\", {\n                            query: i,\n                            timestamp: n.timestamp,\n                            duration: n.attributes.duration_ms,\n                            params: n.attributes.params,\n                            target: n.attributes.target\n                        });\n                    }\n            }\n        }), r?.traces?.length && this.tracingHelper.createEngineSpan({\n            span: !0,\n            spans: r.traces\n        });\n    }\n    on(r, n) {\n        if (r === \"beforeExit\") throw new Error('\"beforeExit\" hook is not applicable to the remote query engine');\n        this.logEmitter.on(r, n);\n    }\n    async url(r) {\n        return await this.start(), `https://${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${r}`;\n    }\n    async uploadSchema() {\n        let r = {\n            name: \"schemaUpload\",\n            internal: !0\n        };\n        return this.tracingHelper.runInChildSpan(r, async ()=>{\n            let n = await wt(await this.url(\"schema\"), {\n                method: \"PUT\",\n                headers: this.headerBuilder.build(),\n                body: this.inlineSchema,\n                clientVersion: this.clientVersion\n            });\n            n.ok || wo(\"schema response status\", n.status);\n            let i = await Dr(n, this.clientVersion);\n            if (i) throw this.logEmitter.emit(\"warn\", {\n                message: `Error while uploading schema: ${i.message}`\n            }), i;\n            this.logEmitter.emit(\"info\", {\n                message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`\n            });\n        });\n    }\n    request(r, { traceparent: n, interactiveTransaction: i, customDataProxyFetch: o }) {\n        return this.requestInternal({\n            body: r,\n            traceparent: n,\n            interactiveTransaction: i,\n            customDataProxyFetch: o\n        });\n    }\n    async requestBatch(r, { traceparent: n, transaction: i, customDataProxyFetch: o }) {\n        let s = i?.kind === \"itx\" ? i.options : void 0, a = $n(r, i), { batchResult: l, elapsed: u } = await this.requestInternal({\n            body: a,\n            customDataProxyFetch: o,\n            interactiveTransaction: s,\n            traceparent: n\n        });\n        return l.map((c)=>\"errors\" in c && c.errors.length > 0 ? Pr(c.errors[0], this.clientVersion) : {\n                data: c,\n                elapsed: u\n            });\n    }\n    requestInternal({ body: r, traceparent: n, customDataProxyFetch: i, interactiveTransaction: o }) {\n        return this.withRetry({\n            actionGerund: \"querying\",\n            callback: async ({ logHttpCall: s })=>{\n                let a = o ? `${o.payload.endpoint}/graphql` : await this.url(\"graphql\");\n                s(a);\n                let l = await wt(a, {\n                    method: \"POST\",\n                    headers: this.headerBuilder.build({\n                        traceparent: n,\n                        interactiveTransaction: o\n                    }),\n                    body: JSON.stringify(r),\n                    clientVersion: this.clientVersion\n                }, i);\n                l.ok || wo(\"graphql response status\", l.status), await this.handleError(await Dr(l, this.clientVersion));\n                let u = await l.json(), c = u.extensions;\n                if (c && this.propagateResponseExtensions(c), u.errors) throw u.errors.length === 1 ? Pr(u.errors[0], this.config.clientVersion) : new z(u.errors, {\n                    clientVersion: this.config.clientVersion\n                });\n                return u;\n            }\n        });\n    }\n    async transaction(r, n, i) {\n        let o = {\n            start: \"starting\",\n            commit: \"committing\",\n            rollback: \"rolling back\"\n        };\n        return this.withRetry({\n            actionGerund: `${o[r]} transaction`,\n            callback: async ({ logHttpCall: s })=>{\n                if (r === \"start\") {\n                    let a = JSON.stringify({\n                        max_wait: i?.maxWait ?? 2e3,\n                        timeout: i?.timeout ?? 5e3,\n                        isolation_level: i?.isolationLevel\n                    }), l = await this.url(\"transaction/start\");\n                    s(l);\n                    let u = await wt(l, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: n.traceparent\n                        }),\n                        body: a,\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Dr(u, this.clientVersion));\n                    let c = await u.json(), p = c.extensions;\n                    p && this.propagateResponseExtensions(p);\n                    let d = c.id, f = c[\"data-proxy\"].endpoint;\n                    return {\n                        id: d,\n                        payload: {\n                            endpoint: f\n                        }\n                    };\n                } else {\n                    let a = `${i.payload.endpoint}/${r}`;\n                    s(a);\n                    let l = await wt(a, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: n.traceparent\n                        }),\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Dr(l, this.clientVersion));\n                    let c = (await l.json()).extensions;\n                    c && this.propagateResponseExtensions(c);\n                    return;\n                }\n            }\n        });\n    }\n    extractHostAndApiKey() {\n        let r = {\n            clientVersion: this.clientVersion\n        }, n = Object.keys(this.inlineDatasources)[0], i = qn({\n            inlineDatasources: this.inlineDatasources,\n            overrideDatasources: this.config.overrideDatasources,\n            clientVersion: this.clientVersion,\n            env: this.env\n        }), o;\n        try {\n            o = new URL(i);\n        } catch  {\n            throw new ht(`Error validating datasource \\`${n}\\`: the URL must start with the protocol \\`prisma://\\``, r);\n        }\n        let { protocol: s, host: a, searchParams: l } = o;\n        if (s !== \"prisma:\") throw new ht(`Error validating datasource \\`${n}\\`: the URL must start with the protocol \\`prisma://\\``, r);\n        let u = l.get(\"api_key\");\n        if (u === null || u.length < 1) throw new ht(`Error validating datasource \\`${n}\\`: the URL must contain a valid API key`, r);\n        return [\n            a,\n            u\n        ];\n    }\n    metrics() {\n        throw new xt(\"Metrics are not yet supported for Accelerate\", {\n            clientVersion: this.clientVersion\n        });\n    }\n    async withRetry(r) {\n        for(let n = 0;; n++){\n            let i = (o)=>{\n                this.logEmitter.emit(\"info\", {\n                    message: `Calling ${o} (n=${n})`\n                });\n            };\n            try {\n                return await r.callback({\n                    logHttpCall: i\n                });\n            } catch (o) {\n                if (!(o instanceof ge) || !o.isRetryable) throw o;\n                if (n >= yl) throw o instanceof Qt ? o.cause : o;\n                this.logEmitter.emit(\"warn\", {\n                    message: `Attempt ${n + 1}/${yl} failed for ${r.actionGerund}: ${o.message ?? \"(unknown)\"}`\n                });\n                let s = await pl(n);\n                this.logEmitter.emit(\"warn\", {\n                    message: `Retrying after ${s}ms`\n                });\n            }\n        }\n    }\n    async handleError(r) {\n        if (r instanceof bt) throw await this.uploadSchema(), new Qt({\n            clientVersion: this.clientVersion,\n            cause: r\n        });\n        if (r) throw r;\n    }\n};\nfunction hl(e) {\n    if (e?.kind === \"itx\") return e.options.id;\n}\nvar vo = I(__webpack_require__(/*! os */ \"os\")), xl = I(__webpack_require__(/*! path */ \"path\"));\nvar Po = Symbol(\"PrismaLibraryEngineCache\");\nfunction Ud() {\n    let e = globalThis;\n    return e[Po] === void 0 && (e[Po] = {}), e[Po];\n}\nfunction Kd(e) {\n    let t = Ud();\n    if (t[e] !== void 0) return t[e];\n    let r = xl.default.toNamespacedPath(e), n = {\n        exports: {}\n    }, i = 0;\n    return process.platform !== \"win32\" && (i = vo.default.constants.dlopen.RTLD_LAZY | vo.default.constants.dlopen.RTLD_DEEPBIND), process.dlopen(n, r, i), t[e] = n.exports, n.exports;\n}\nvar bl = {\n    async loadLibrary (e) {\n        let t = await _i(), r = await il(\"library\", e);\n        try {\n            return e.tracingHelper.runInChildSpan({\n                name: \"loadLibrary\",\n                internal: !0\n            }, ()=>Kd(r));\n        } catch (n) {\n            let i = Di({\n                e: n,\n                platformInfo: t,\n                id: r\n            });\n            throw new k(i, e.clientVersion);\n        }\n    }\n};\nvar Co = {};\nPt(Co, {\n    QueryEngine: ()=>$r,\n    __wbg_call_9495de66fdbe016b: ()=>nm,\n    __wbg_debug_7960d327fd96f71a: ()=>Am,\n    __wbg_error_f851667af71bcfc6: ()=>xm,\n    __wbg_error_fd84ca2a8a977774: ()=>vm,\n    __wbg_error_fe807da27c4a4ced: ()=>gm,\n    __wbg_get_baf4855f9a986186: ()=>um,\n    __wbg_info_5566be377f5b52ae: ()=>Cm,\n    __wbg_log_7b690f184ae4519b: ()=>_m,\n    __wbg_new_9d3a9ce4282a18a8: ()=>mm,\n    __wbg_new_abda76e883ba8a5f: ()=>ym,\n    __wbg_parse_3ac95b51fc312db8: ()=>fm,\n    __wbg_resolve_fd40f858d9db1a04: ()=>Pm,\n    __wbg_set_wasm: ()=>To,\n    __wbg_stack_658279fe44541cf6: ()=>hm,\n    __wbg_stringify_029a979dfb73aa17: ()=>lm,\n    __wbg_then_ec5db6d509eb475f: ()=>Em,\n    __wbg_warn_48cbddced45e5414: ()=>Tm,\n    __wbindgen_cb_drop: ()=>wm,\n    __wbindgen_closure_wrapper2989: ()=>Rm,\n    __wbindgen_error_new: ()=>om,\n    __wbindgen_is_function: ()=>cm,\n    __wbindgen_is_string: ()=>pm,\n    __wbindgen_is_undefined: ()=>am,\n    __wbindgen_object_clone_ref: ()=>sm,\n    __wbindgen_object_drop_ref: ()=>im,\n    __wbindgen_string_get: ()=>dm,\n    __wbindgen_string_new: ()=>rm,\n    __wbindgen_throw: ()=>bm,\n    debug_panic: ()=>Xd,\n    dmmf: ()=>Zd,\n    getBuildTimeInfo: ()=>Yd,\n    init: ()=>em\n});\nvar h;\nfunction To(e) {\n    h = e;\n}\nvar Qd = typeof TextDecoder > \"u\" ? (0, module.require)(\"util\").TextDecoder : TextDecoder, wl = new Qd(\"utf-8\", {\n    ignoreBOM: !0,\n    fatal: !0\n});\nwl.decode();\nvar Vn = null;\nfunction Un() {\n    return (Vn === null || Vn.byteLength === 0) && (Vn = new Uint8Array(h.memory.buffer)), Vn;\n}\nfunction Ht(e, t) {\n    return e = e >>> 0, wl.decode(Un().subarray(e, e + t));\n}\nvar Ue = new Array(128).fill(void 0);\nUe.push(void 0, null, !0, !1);\nvar Lr = Ue.length;\nfunction J(e) {\n    Lr === Ue.length && Ue.push(Ue.length + 1);\n    let t = Lr;\n    return Lr = Ue[t], Ue[t] = e, t;\n}\nfunction A(e) {\n    return Ue[e];\n}\nfunction Gd(e) {\n    e < 132 || (Ue[e] = Lr, Lr = e);\n}\nfunction ce(e) {\n    let t = A(e);\n    return Gd(e), t;\n}\nvar G = 0, Jd = typeof TextEncoder > \"u\" ? (0, module.require)(\"util\").TextEncoder : TextEncoder, Kn = new Jd(\"utf-8\"), Hd = typeof Kn.encodeInto == \"function\" ? function(e, t) {\n    return Kn.encodeInto(e, t);\n} : function(e, t) {\n    let r = Kn.encode(e);\n    return t.set(r), {\n        read: e.length,\n        written: r.length\n    };\n};\nfunction re(e, t, r) {\n    if (r === void 0) {\n        let a = Kn.encode(e), l = t(a.length, 1) >>> 0;\n        return Un().subarray(l, l + a.length).set(a), G = a.length, l;\n    }\n    let n = e.length, i = t(n, 1) >>> 0, o = Un(), s = 0;\n    for(; s < n; s++){\n        let a = e.charCodeAt(s);\n        if (a > 127) break;\n        o[i + s] = a;\n    }\n    if (s !== n) {\n        s !== 0 && (e = e.slice(s)), i = r(i, n, n = s + e.length * 3, 1) >>> 0;\n        let a = Un().subarray(i + s, i + n), l = Hd(e, a);\n        s += l.written;\n    }\n    return G = s, i;\n}\nfunction Qn(e) {\n    return e == null;\n}\nvar Bn = null;\nfunction xe() {\n    return (Bn === null || Bn.byteLength === 0) && (Bn = new Int32Array(h.memory.buffer)), Bn;\n}\nfunction Wd(e, t, r, n) {\n    let i = {\n        a: e,\n        b: t,\n        cnt: 1,\n        dtor: r\n    }, o = (...s)=>{\n        i.cnt++;\n        let a = i.a;\n        i.a = 0;\n        try {\n            return n(a, i.b, ...s);\n        } finally{\n            --i.cnt === 0 ? h.__wbindgen_export_2.get(i.dtor)(a, i.b) : i.a = a;\n        }\n    };\n    return o.original = i, o;\n}\nfunction zd(e, t, r) {\n    h.wasm_bindgen__convert__closures__invoke1_mut__hc8730847d9f9e207(e, t, J(r));\n}\nfunction Yd() {\n    let e = h.getBuildTimeInfo();\n    return ce(e);\n}\nfunction Zd(e) {\n    let t, r;\n    try {\n        let u = h.__wbindgen_add_to_stack_pointer(-16), c = re(e, h.__wbindgen_malloc, h.__wbindgen_realloc), p = G;\n        h.dmmf(u, c, p);\n        var n = xe()[u / 4 + 0], i = xe()[u / 4 + 1], o = xe()[u / 4 + 2], s = xe()[u / 4 + 3], a = n, l = i;\n        if (s) throw a = 0, l = 0, ce(o);\n        return t = a, r = l, Ht(a, l);\n    } finally{\n        h.__wbindgen_add_to_stack_pointer(16), h.__wbindgen_free(t, r, 1);\n    }\n}\nfunction Xd(e) {\n    try {\n        let o = h.__wbindgen_add_to_stack_pointer(-16);\n        var t = Qn(e) ? 0 : re(e, h.__wbindgen_malloc, h.__wbindgen_realloc), r = G;\n        h.debug_panic(o, t, r);\n        var n = xe()[o / 4 + 0], i = xe()[o / 4 + 1];\n        if (i) throw ce(n);\n    } finally{\n        h.__wbindgen_add_to_stack_pointer(16);\n    }\n}\nfunction em() {\n    h.init();\n}\nfunction Gn(e, t) {\n    try {\n        return e.apply(this, t);\n    } catch (r) {\n        h.__wbindgen_exn_store(J(r));\n    }\n}\nfunction tm(e, t, r, n) {\n    h.wasm_bindgen__convert__closures__invoke2_mut__h0a290c7e33a927ff(e, t, J(r), J(n));\n}\nvar $r = class e {\n    static __wrap(t) {\n        t = t >>> 0;\n        let r = Object.create(e.prototype);\n        return r.__wbg_ptr = t, r;\n    }\n    __destroy_into_raw() {\n        let t = this.__wbg_ptr;\n        return this.__wbg_ptr = 0, t;\n    }\n    free() {\n        let t = this.__destroy_into_raw();\n        h.__wbg_queryengine_free(t);\n    }\n    constructor(t, r, n){\n        try {\n            let a = h.__wbindgen_add_to_stack_pointer(-16);\n            h.queryengine_new(a, J(t), J(r), Qn(n) ? 0 : J(n));\n            var i = xe()[a / 4 + 0], o = xe()[a / 4 + 1], s = xe()[a / 4 + 2];\n            if (s) throw ce(o);\n            return e.__wrap(i);\n        } finally{\n            h.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    connect(t) {\n        let r = re(t, h.__wbindgen_malloc, h.__wbindgen_realloc), n = G, i = h.queryengine_connect(this.__wbg_ptr, r, n);\n        return ce(i);\n    }\n    disconnect(t) {\n        let r = re(t, h.__wbindgen_malloc, h.__wbindgen_realloc), n = G, i = h.queryengine_disconnect(this.__wbg_ptr, r, n);\n        return ce(i);\n    }\n    query(t, r, n) {\n        let i = re(t, h.__wbindgen_malloc, h.__wbindgen_realloc), o = G, s = re(r, h.__wbindgen_malloc, h.__wbindgen_realloc), a = G;\n        var l = Qn(n) ? 0 : re(n, h.__wbindgen_malloc, h.__wbindgen_realloc), u = G;\n        let c = h.queryengine_query(this.__wbg_ptr, i, o, s, a, l, u);\n        return ce(c);\n    }\n    startTransaction(t, r) {\n        let n = re(t, h.__wbindgen_malloc, h.__wbindgen_realloc), i = G, o = re(r, h.__wbindgen_malloc, h.__wbindgen_realloc), s = G, a = h.queryengine_startTransaction(this.__wbg_ptr, n, i, o, s);\n        return ce(a);\n    }\n    commitTransaction(t, r) {\n        let n = re(t, h.__wbindgen_malloc, h.__wbindgen_realloc), i = G, o = re(r, h.__wbindgen_malloc, h.__wbindgen_realloc), s = G, a = h.queryengine_commitTransaction(this.__wbg_ptr, n, i, o, s);\n        return ce(a);\n    }\n    dmmf(t) {\n        let r = re(t, h.__wbindgen_malloc, h.__wbindgen_realloc), n = G, i = h.queryengine_dmmf(this.__wbg_ptr, r, n);\n        return ce(i);\n    }\n    rollbackTransaction(t, r) {\n        let n = re(t, h.__wbindgen_malloc, h.__wbindgen_realloc), i = G, o = re(r, h.__wbindgen_malloc, h.__wbindgen_realloc), s = G, a = h.queryengine_rollbackTransaction(this.__wbg_ptr, n, i, o, s);\n        return ce(a);\n    }\n    sdlSchema() {\n        let t = h.queryengine_sdlSchema(this.__wbg_ptr);\n        return ce(t);\n    }\n    metrics(t) {\n        let r = re(t, h.__wbindgen_malloc, h.__wbindgen_realloc), n = G, i = h.queryengine_metrics(this.__wbg_ptr, r, n);\n        return ce(i);\n    }\n};\nfunction rm(e, t) {\n    let r = Ht(e, t);\n    return J(r);\n}\nfunction nm() {\n    return Gn(function(e, t, r) {\n        let n = A(e).call(A(t), A(r));\n        return J(n);\n    }, arguments);\n}\nfunction im(e) {\n    ce(e);\n}\nfunction om(e, t) {\n    let r = new Error(Ht(e, t));\n    return J(r);\n}\nfunction sm(e) {\n    let t = A(e);\n    return J(t);\n}\nfunction am(e) {\n    return A(e) === void 0;\n}\nfunction lm() {\n    return Gn(function(e) {\n        let t = JSON.stringify(A(e));\n        return J(t);\n    }, arguments);\n}\nfunction um() {\n    return Gn(function(e, t) {\n        let r = Reflect.get(A(e), A(t));\n        return J(r);\n    }, arguments);\n}\nfunction cm(e) {\n    return typeof A(e) == \"function\";\n}\nfunction pm(e) {\n    return typeof A(e) == \"string\";\n}\nfunction dm(e, t) {\n    let r = A(t), n = typeof r == \"string\" ? r : void 0;\n    var i = Qn(n) ? 0 : re(n, h.__wbindgen_malloc, h.__wbindgen_realloc), o = G;\n    xe()[e / 4 + 1] = o, xe()[e / 4 + 0] = i;\n}\nfunction mm(e, t) {\n    try {\n        var r = {\n            a: e,\n            b: t\n        }, n = (o, s)=>{\n            let a = r.a;\n            r.a = 0;\n            try {\n                return tm(a, r.b, o, s);\n            } finally{\n                r.a = a;\n            }\n        };\n        let i = new Promise(n);\n        return J(i);\n    } finally{\n        r.a = r.b = 0;\n    }\n}\nfunction fm() {\n    return Gn(function(e, t) {\n        let r = JSON.parse(Ht(e, t));\n        return J(r);\n    }, arguments);\n}\nfunction gm(e) {\n    console.error(A(e));\n}\nfunction ym() {\n    let e = new Error;\n    return J(e);\n}\nfunction hm(e, t) {\n    let r = A(t).stack, n = re(r, h.__wbindgen_malloc, h.__wbindgen_realloc), i = G;\n    xe()[e / 4 + 1] = i, xe()[e / 4 + 0] = n;\n}\nfunction xm(e, t) {\n    let r, n;\n    try {\n        r = e, n = t, console.error(Ht(e, t));\n    } finally{\n        h.__wbindgen_free(r, n, 1);\n    }\n}\nfunction bm(e, t) {\n    throw new Error(Ht(e, t));\n}\nfunction wm(e) {\n    let t = ce(e).original;\n    return t.cnt-- == 1 ? (t.a = 0, !0) : !1;\n}\nfunction Em(e, t) {\n    let r = A(e).then(A(t));\n    return J(r);\n}\nfunction Pm(e) {\n    let t = Promise.resolve(A(e));\n    return J(t);\n}\nfunction vm(e, t, r, n) {\n    console.error(A(e), A(t), A(r), A(n));\n}\nfunction Tm(e, t, r, n) {\n    console.warn(A(e), A(t), A(r), A(n));\n}\nfunction Cm(e, t, r, n) {\n    console.info(A(e), A(t), A(r), A(n));\n}\nfunction _m(e, t, r, n) {\n    console.log(A(e), A(t), A(r), A(n));\n}\nfunction Am(e, t, r, n) {\n    console.debug(A(e), A(t), A(r), A(n));\n}\nfunction Rm(e, t, r) {\n    let n = Wd(e, t, 138, zd);\n    return J(n);\n}\nvar El = {\n    async loadLibrary (e) {\n        let { generator: t, clientVersion: r, adapter: n } = e, i = await e.getQueryEngineWasmModule?.();\n        if (t?.previewFeatures.includes(\"driverAdapters\") === void 0) throw new k('The `driverAdapters` preview feature is required with `engineType=\"wasm\"`', r);\n        if (n === void 0) throw new k('The `adapter` option for `PrismaClient` is required with `engineType=\"wasm\"`', r);\n        if (i == null) throw new k(\"The loaded wasm module was unexpectedly `undefined` or `null` once loaded\", r);\n        let o = new WebAssembly.Instance(i, {\n            \"./query_engine_bg.js\": Co\n        });\n        return To(o.exports), {\n            debugPanic () {\n                return Promise.reject(\"{}\");\n            },\n            dmmf () {\n                return Promise.resolve(\"{}\");\n            },\n            version () {\n                return {\n                    commit: \"unknown\",\n                    version: \"unknown\"\n                };\n            },\n            QueryEngine: $r\n        };\n    }\n};\nvar Mm = \"P2036\", $e = L(\"prisma:client:libraryEngine\");\nfunction Sm(e) {\n    return e.item_type === \"query\" && \"query\" in e;\n}\nfunction km(e) {\n    return \"level\" in e ? e.level === \"error\" && e.message === \"PANIC\" : !1;\n}\nvar Pl = [\n    ...Ai,\n    \"native\"\n], vl = 0, Wt = class extends Kt {\n    constructor(r, n){\n        super();\n        mt(r.generator) === \"wasm\" ? this.libraryLoader = n ?? El : this.libraryLoader = n ?? bl, this.config = r, this.libraryStarted = !1, this.logQueries = r.logQueries ?? !1, this.logLevel = r.logLevel ?? \"error\", this.logEmitter = r.logEmitter, this.datamodel = atob(r.inlineSchema), r.enableDebugLogs && (this.logLevel = \"debug\");\n        let o = Object.keys(r.overrideDatasources)[0], s = r.overrideDatasources[o]?.url;\n        o !== void 0 && s !== void 0 && (this.datasourceOverrides = {\n            [o]: s\n        }), this.libraryInstantiationPromise = this.instantiateLibrary(), this.checkForTooManyEngines();\n    }\n    checkForTooManyEngines() {\n        vl === 10 && console.warn(`${Ae(\"warn(prisma-client)\")} This is the 10th instance of Prisma Client being started. Make sure this is intentional.`);\n    }\n    async transaction(r, n, i) {\n        await this.start();\n        let o = JSON.stringify(n), s;\n        if (r === \"start\") {\n            let l = JSON.stringify({\n                max_wait: i?.maxWait ?? 2e3,\n                timeout: i?.timeout ?? 5e3,\n                isolation_level: i?.isolationLevel\n            });\n            s = await this.engine?.startTransaction(l, o);\n        } else r === \"commit\" ? s = await this.engine?.commitTransaction(i.id, o) : r === \"rollback\" && (s = await this.engine?.rollbackTransaction(i.id, o));\n        let a = this.parseEngineResponse(s);\n        if (Im(a)) {\n            let l = this.getExternalAdapterError(a);\n            throw l ? l.error : new W(a.message, {\n                code: a.error_code,\n                clientVersion: this.config.clientVersion,\n                meta: a.meta\n            });\n        }\n        return a;\n    }\n    async instantiateLibrary() {\n        if ($e(\"internalSetup\"), this.libraryInstantiationPromise) return this.libraryInstantiationPromise;\n        hi(), this.platform = await this.getPlatform(), await this.loadEngine(), this.version();\n    }\n    async getPlatform() {\n        {\n            if (this.platform) return this.platform;\n            let r = await St();\n            if (!Pl.includes(r)) throw new k(`Unknown ${Pe(\"PRISMA_QUERY_ENGINE_LIBRARY\")} ${Pe(pe(r))}. Possible binaryTargets: ${ct(Pl.join(\", \"))} or a path to the query engine library.\nYou may have to run ${ct(\"prisma generate\")} for your changes to take effect.`, this.config.clientVersion);\n            return r;\n        }\n    }\n    parseEngineResponse(r) {\n        if (!r) throw new z(\"Response from the Engine was empty\", {\n            clientVersion: this.config.clientVersion\n        });\n        try {\n            return JSON.parse(r);\n        } catch  {\n            throw new z(\"Unable to JSON.parse response from engine\", {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async loadEngine() {\n        if (!this.engine) {\n            this.QueryEngineConstructor || (this.library = await this.libraryLoader.loadLibrary(this.config), this.QueryEngineConstructor = this.library.QueryEngine);\n            try {\n                let r = new WeakRef(this), { adapter: n } = this.config;\n                n && $e(\"Using driver adapter: %O\", n), this.engine = new this.QueryEngineConstructor({\n                    datamodel: this.datamodel,\n                    env: process.env,\n                    logQueries: this.config.logQueries ?? !1,\n                    ignoreEnvVarErrors: !0,\n                    datasourceOverrides: this.datasourceOverrides ?? {},\n                    logLevel: this.logLevel,\n                    configDir: this.config.cwd,\n                    engineProtocol: \"json\"\n                }, (i)=>{\n                    r.deref()?.logger(i);\n                }, n), vl++;\n            } catch (r) {\n                let n = r, i = this.parseInitError(n.message);\n                throw typeof i == \"string\" ? n : new k(i.message, this.config.clientVersion, i.error_code);\n            }\n        }\n    }\n    logger(r) {\n        let n = this.parseEngineResponse(r);\n        if (n) {\n            if (\"span\" in n) {\n                this.config.tracingHelper.createEngineSpan(n);\n                return;\n            }\n            n.level = n?.level.toLowerCase() ?? \"unknown\", Sm(n) ? this.logEmitter.emit(\"query\", {\n                timestamp: new Date,\n                query: n.query,\n                params: n.params,\n                duration: Number(n.duration_ms),\n                target: n.module_path\n            }) : km(n) ? this.loggerRustPanic = new he(this.getErrorMessageWithLink(`${n.message}: ${n.reason} in ${n.file}:${n.line}:${n.column}`), this.config.clientVersion) : this.logEmitter.emit(n.level, {\n                timestamp: new Date,\n                message: n.message,\n                target: n.module_path\n            });\n        }\n    }\n    getErrorMessageWithLink(r) {\n        return cl({\n            platform: this.platform,\n            title: r,\n            version: this.config.clientVersion,\n            engineVersion: this.versionInfo?.commit,\n            database: this.config.activeProvider,\n            query: this.lastQuery\n        });\n    }\n    parseInitError(r) {\n        try {\n            return JSON.parse(r);\n        } catch  {}\n        return r;\n    }\n    parseRequestError(r) {\n        try {\n            return JSON.parse(r);\n        } catch  {}\n        return r;\n    }\n    on(r, n) {\n        if (r === \"beforeExit\") throw new Error('\"beforeExit\" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.');\n        this.logEmitter.on(r, n);\n    }\n    async start() {\n        if (await this.libraryInstantiationPromise, await this.libraryStoppingPromise, this.libraryStartingPromise) return $e(`library already starting, this.libraryStarted: ${this.libraryStarted}`), this.libraryStartingPromise;\n        if (this.libraryStarted) return;\n        let r = async ()=>{\n            $e(\"library starting\");\n            try {\n                let n = {\n                    traceparent: this.config.tracingHelper.getTraceParent()\n                };\n                await this.engine?.connect(JSON.stringify(n)), this.libraryStarted = !0, $e(\"library started\");\n            } catch (n) {\n                let i = this.parseInitError(n.message);\n                throw typeof i == \"string\" ? n : new k(i.message, this.config.clientVersion, i.error_code);\n            } finally{\n                this.libraryStartingPromise = void 0;\n            }\n        };\n        return this.libraryStartingPromise = this.config.tracingHelper.runInChildSpan(\"connect\", r), this.libraryStartingPromise;\n    }\n    async stop() {\n        if (await this.libraryStartingPromise, await this.executingQueryPromise, this.libraryStoppingPromise) return $e(\"library is already stopping\"), this.libraryStoppingPromise;\n        if (!this.libraryStarted) return;\n        let r = async ()=>{\n            await new Promise((i)=>setTimeout(i, 5)), $e(\"library stopping\");\n            let n = {\n                traceparent: this.config.tracingHelper.getTraceParent()\n            };\n            await this.engine?.disconnect(JSON.stringify(n)), this.libraryStarted = !1, this.libraryStoppingPromise = void 0, $e(\"library stopped\");\n        };\n        return this.libraryStoppingPromise = this.config.tracingHelper.runInChildSpan(\"disconnect\", r), this.libraryStoppingPromise;\n    }\n    version() {\n        return this.versionInfo = this.library?.version(), this.versionInfo?.version ?? \"unknown\";\n    }\n    debugPanic(r) {\n        return this.library?.debugPanic(r);\n    }\n    async request(r, { traceparent: n, interactiveTransaction: i }) {\n        $e(`sending request, this.libraryStarted: ${this.libraryStarted}`);\n        let o = JSON.stringify({\n            traceparent: n\n        }), s = JSON.stringify(r);\n        try {\n            await this.start(), this.executingQueryPromise = this.engine?.query(s, o, i?.id), this.lastQuery = s;\n            let a = this.parseEngineResponse(await this.executingQueryPromise);\n            if (a.errors) throw a.errors.length === 1 ? this.buildQueryError(a.errors[0]) : new z(JSON.stringify(a.errors), {\n                clientVersion: this.config.clientVersion\n            });\n            if (this.loggerRustPanic) throw this.loggerRustPanic;\n            return {\n                data: a,\n                elapsed: 0\n            };\n        } catch (a) {\n            if (a instanceof k) throw a;\n            if (a.code === \"GenericFailure\" && a.message?.startsWith(\"PANIC:\")) throw new he(this.getErrorMessageWithLink(a.message), this.config.clientVersion);\n            let l = this.parseRequestError(a.message);\n            throw typeof l == \"string\" ? a : new z(`${l.message}\n${l.backtrace}`, {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async requestBatch(r, { transaction: n, traceparent: i }) {\n        $e(\"requestBatch\");\n        let o = $n(r, n);\n        await this.start(), this.lastQuery = JSON.stringify(o), this.executingQueryPromise = this.engine.query(this.lastQuery, JSON.stringify({\n            traceparent: i\n        }), hl(n));\n        let s = await this.executingQueryPromise, a = this.parseEngineResponse(s);\n        if (a.errors) throw a.errors.length === 1 ? this.buildQueryError(a.errors[0]) : new z(JSON.stringify(a.errors), {\n            clientVersion: this.config.clientVersion\n        });\n        let { batchResult: l, errors: u } = a;\n        if (Array.isArray(l)) return l.map((c)=>c.errors && c.errors.length > 0 ? this.loggerRustPanic ?? this.buildQueryError(c.errors[0]) : {\n                data: c,\n                elapsed: 0\n            });\n        throw u && u.length === 1 ? new Error(u[0].error) : new Error(JSON.stringify(a));\n    }\n    buildQueryError(r) {\n        if (r.user_facing_error.is_panic) return new he(this.getErrorMessageWithLink(r.user_facing_error.message), this.config.clientVersion);\n        let n = this.getExternalAdapterError(r.user_facing_error);\n        return n ? n.error : Pr(r, this.config.clientVersion);\n    }\n    getExternalAdapterError(r) {\n        if (r.error_code === Mm && this.config.adapter) {\n            let n = r.meta?.id;\n            un(typeof n == \"number\", \"Malformed external JS error received from the engine\");\n            let i = this.config.adapter.errorRegistry.consumeError(n);\n            return un(i, \"External error with reported id was not registered\"), i;\n        }\n    }\n    async metrics(r) {\n        await this.start();\n        let n = await this.engine.metrics(JSON.stringify(r));\n        return r.format === \"prometheus\" ? n : this.parseEngineResponse(n);\n    }\n};\nfunction Im(e) {\n    return typeof e == \"object\" && e !== null && e.error_code !== void 0;\n}\nfunction Tl(e, t) {\n    let r;\n    try {\n        r = qn({\n            inlineDatasources: t.inlineDatasources,\n            overrideDatasources: t.overrideDatasources,\n            env: {\n                ...t.env,\n                ...process.env\n            },\n            clientVersion: t.clientVersion\n        });\n    } catch  {}\n    e.noEngine !== !0 && r?.startsWith(\"prisma://\") && ar(\"recommend--no-engine\", \"In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)\");\n    let n = mt(t.generator);\n    if (n === \"wasm\" && t.adapter !== void 0) return new Wt(t);\n    if (r?.startsWith(\"prisma://\") || e.noEngine) return new Nr(t);\n    if (n === \"library\") return new Wt(t);\n    throw \"binary\", new se(\"Invalid client engine type, please use `library` or `binary`\", {\n        clientVersion: t.clientVersion\n    });\n}\nfunction Jn({ generator: e }) {\n    return e?.previewFeatures ?? [];\n}\nvar Sl = I(_o());\nfunction Rl(e, t) {\n    let r = Ml(e), n = Fm(r), i = Om(n);\n    i ? Hn(i, t) : t.addErrorMessage(()=>\"Unknown error\");\n}\nfunction Ml(e) {\n    return e.errors.flatMap((t)=>t.kind === \"Union\" ? Ml(t) : [\n            t\n        ]);\n}\nfunction Fm(e) {\n    let t = new Map, r = [];\n    for (let n of e){\n        if (n.kind !== \"InvalidArgumentType\") {\n            r.push(n);\n            continue;\n        }\n        let i = `${n.selectionPath.join(\".\")}:${n.argumentPath.join(\".\")}`, o = t.get(i);\n        o ? t.set(i, {\n            ...n,\n            argument: {\n                ...n.argument,\n                typeNames: Dm(o.argument.typeNames, n.argument.typeNames)\n            }\n        }) : t.set(i, n);\n    }\n    return r.push(...t.values()), r;\n}\nfunction Dm(e, t) {\n    return [\n        ...new Set(e.concat(t))\n    ];\n}\nfunction Om(e) {\n    return Ui(e, (t, r)=>{\n        let n = _l(t), i = _l(r);\n        return n !== i ? n - i : Al(t) - Al(r);\n    });\n}\nfunction _l(e) {\n    let t = 0;\n    return Array.isArray(e.selectionPath) && (t += e.selectionPath.length), Array.isArray(e.argumentPath) && (t += e.argumentPath.length), t;\n}\nfunction Al(e) {\n    switch(e.kind){\n        case \"InvalidArgumentValue\":\n        case \"ValueTooLarge\":\n            return 20;\n        case \"InvalidArgumentType\":\n            return 10;\n        case \"RequiredArgumentMissing\":\n            return -10;\n        default:\n            return 0;\n    }\n}\nvar Ke = class {\n    constructor(t, r){\n        this.name = t;\n        this.value = r;\n        this.isRequired = !1;\n    }\n    makeRequired() {\n        return this.isRequired = !0, this;\n    }\n    write(t) {\n        let { colors: { green: r } } = t.context;\n        t.addMarginSymbol(r(this.isRequired ? \"+\" : \"?\")), t.write(r(this.name)), this.isRequired || t.write(r(\"?\")), t.write(r(\": \")), typeof this.value == \"string\" ? t.write(r(this.value)) : t.write(this.value);\n    }\n};\nvar Wn = class {\n    constructor(){\n        this.fields = [];\n    }\n    addField(t, r) {\n        return this.fields.push({\n            write (n) {\n                let { green: i, dim: o } = n.context.colors;\n                n.write(i(o(`${t}: ${r}`))).addMarginSymbol(i(o(\"+\")));\n            }\n        }), this;\n    }\n    write(t) {\n        let { colors: { green: r } } = t.context;\n        t.writeLine(r(\"{\")).withIndent(()=>{\n            t.writeJoined(jt, this.fields).newLine();\n        }).write(r(\"}\")).addMarginSymbol(r(\"+\"));\n    }\n};\nfunction Hn(e, t) {\n    switch(e.kind){\n        case \"IncludeAndSelect\":\n            Nm(e, t);\n            break;\n        case \"IncludeOnScalar\":\n            Lm(e, t);\n            break;\n        case \"EmptySelection\":\n            $m(e, t);\n            break;\n        case \"UnknownSelectionField\":\n            qm(e, t);\n            break;\n        case \"UnknownArgument\":\n            jm(e, t);\n            break;\n        case \"UnknownInputField\":\n            Vm(e, t);\n            break;\n        case \"RequiredArgumentMissing\":\n            Bm(e, t);\n            break;\n        case \"InvalidArgumentType\":\n            Um(e, t);\n            break;\n        case \"InvalidArgumentValue\":\n            Km(e, t);\n            break;\n        case \"ValueTooLarge\":\n            Qm(e, t);\n            break;\n        case \"SomeFieldsMissing\":\n            Gm(e, t);\n            break;\n        case \"TooManyFieldsGiven\":\n            Jm(e, t);\n            break;\n        case \"Union\":\n            Rl(e, t);\n            break;\n        default:\n            throw new Error(\"not implemented: \" + e.kind);\n    }\n}\nfunction Nm(e, t) {\n    let r = t.arguments.getDeepSubSelectionValue(e.selectionPath);\n    r && r instanceof Y && (r.getField(\"include\")?.markAsError(), r.getField(\"select\")?.markAsError()), t.addErrorMessage((n)=>`Please ${n.bold(\"either\")} use ${n.green(\"`include`\")} or ${n.green(\"`select`\")}, but ${n.red(\"not both\")} at the same time.`);\n}\nfunction Lm(e, t) {\n    let [r, n] = zn(e.selectionPath), i = e.outputType, o = t.arguments.getDeepSelectionParent(r)?.value;\n    if (o && (o.getField(n)?.markAsError(), i)) for (let s of i.fields)s.isRelation && o.addSuggestion(new Ke(s.name, \"true\"));\n    t.addErrorMessage((s)=>{\n        let a = `Invalid scalar field ${s.red(`\\`${n}\\``)} for ${s.bold(\"include\")} statement`;\n        return i ? a += ` on model ${s.bold(i.name)}. ${qr(s)}` : a += \".\", a += `\nNote that ${s.bold(\"include\")} statements only accept relation fields.`, a;\n    });\n}\nfunction $m(e, t) {\n    let r = e.outputType, n = t.arguments.getDeepSelectionParent(e.selectionPath)?.value, i = n?.isEmpty() ?? !1;\n    n && (n.removeAllFields(), Fl(n, r)), t.addErrorMessage((o)=>i ? `The ${o.red(\"`select`\")} statement for type ${o.bold(r.name)} must not be empty. ${qr(o)}` : `The ${o.red(\"`select`\")} statement for type ${o.bold(r.name)} needs ${o.bold(\"at least one truthy value\")}.`);\n}\nfunction qm(e, t) {\n    let [r, n] = zn(e.selectionPath), i = t.arguments.getDeepSelectionParent(r);\n    i && (i.value.getField(n)?.markAsError(), Fl(i.value, e.outputType)), t.addErrorMessage((o)=>{\n        let s = [\n            `Unknown field ${o.red(`\\`${n}\\``)}`\n        ];\n        return i && s.push(`for ${o.bold(i.kind)} statement`), s.push(`on model ${o.bold(`\\`${e.outputType.name}\\``)}.`), s.push(qr(o)), s.join(\" \");\n    });\n}\nfunction jm(e, t) {\n    let r = e.argumentPath[0], n = t.arguments.getDeepSubSelectionValue(e.selectionPath);\n    n instanceof Y && (n.getField(r)?.markAsError(), Hm(n, e.arguments)), t.addErrorMessage((i)=>kl(i, r, e.arguments.map((o)=>o.name)));\n}\nfunction Vm(e, t) {\n    let [r, n] = zn(e.argumentPath), i = t.arguments.getDeepSubSelectionValue(e.selectionPath);\n    if (i instanceof Y) {\n        i.getDeepField(e.argumentPath)?.markAsError();\n        let o = i.getDeepFieldValue(r);\n        o instanceof Y && Dl(o, e.inputType);\n    }\n    t.addErrorMessage((o)=>kl(o, n, e.inputType.fields.map((s)=>s.name)));\n}\nfunction kl(e, t, r) {\n    let n = [\n        `Unknown argument \\`${e.red(t)}\\`.`\n    ], i = zm(t, r);\n    return i && n.push(`Did you mean \\`${e.green(i)}\\`?`), r.length > 0 && n.push(qr(e)), n.join(\" \");\n}\nfunction Bm(e, t) {\n    let r;\n    t.addErrorMessage((l)=>r?.value instanceof Z && r.value.text === \"null\" ? `Argument \\`${l.green(o)}\\` must not be ${l.red(\"null\")}.` : `Argument \\`${l.green(o)}\\` is missing.`);\n    let n = t.arguments.getDeepSubSelectionValue(e.selectionPath);\n    if (!(n instanceof Y)) return;\n    let [i, o] = zn(e.argumentPath), s = new Wn, a = n.getDeepFieldValue(i);\n    if (a instanceof Y) if (r = a.getField(o), r && a.removeField(o), e.inputTypes.length === 1 && e.inputTypes[0].kind === \"object\") {\n        for (let l of e.inputTypes[0].fields)s.addField(l.name, l.typeNames.join(\" | \"));\n        a.addSuggestion(new Ke(o, s).makeRequired());\n    } else {\n        let l = e.inputTypes.map(Il).join(\" | \");\n        a.addSuggestion(new Ke(o, l).makeRequired());\n    }\n}\nfunction Il(e) {\n    return e.kind === \"list\" ? `${Il(e.elementType)}[]` : e.name;\n}\nfunction Um(e, t) {\n    let r = e.argument.name, n = t.arguments.getDeepSubSelectionValue(e.selectionPath);\n    n instanceof Y && n.getDeepFieldValue(e.argumentPath)?.markAsError(), t.addErrorMessage((i)=>{\n        let o = Yn(\"or\", e.argument.typeNames.map((s)=>i.green(s)));\n        return `Argument \\`${i.bold(r)}\\`: Invalid value provided. Expected ${o}, provided ${i.red(e.inferredType)}.`;\n    });\n}\nfunction Km(e, t) {\n    let r = e.argument.name, n = t.arguments.getDeepSubSelectionValue(e.selectionPath);\n    n instanceof Y && n.getDeepFieldValue(e.argumentPath)?.markAsError(), t.addErrorMessage((i)=>{\n        let o = [\n            `Invalid value for argument \\`${i.bold(r)}\\``\n        ];\n        if (e.underlyingError && o.push(`: ${e.underlyingError}`), o.push(\".\"), e.argument.typeNames.length > 0) {\n            let s = Yn(\"or\", e.argument.typeNames.map((a)=>i.green(a)));\n            o.push(` Expected ${s}.`);\n        }\n        return o.join(\"\");\n    });\n}\nfunction Qm(e, t) {\n    let r = e.argument.name, n = t.arguments.getDeepSubSelectionValue(e.selectionPath), i;\n    if (n instanceof Y) {\n        let s = n.getDeepField(e.argumentPath)?.value;\n        s?.markAsError(), s instanceof Z && (i = s.text);\n    }\n    t.addErrorMessage((o)=>{\n        let s = [\n            \"Unable to fit value\"\n        ];\n        return i && s.push(o.red(i)), s.push(`into a 64-bit signed integer for field \\`${o.bold(r)}\\``), s.join(\" \");\n    });\n}\nfunction Gm(e, t) {\n    let r = e.argumentPath[e.argumentPath.length - 1], n = t.arguments.getDeepSubSelectionValue(e.selectionPath);\n    if (n instanceof Y) {\n        let i = n.getDeepFieldValue(e.argumentPath);\n        i instanceof Y && Dl(i, e.inputType);\n    }\n    t.addErrorMessage((i)=>{\n        let o = [\n            `Argument \\`${i.bold(r)}\\` of type ${i.bold(e.inputType.name)} needs`\n        ];\n        return e.constraints.minFieldCount === 1 ? e.constraints.requiredFields ? o.push(`${i.green(\"at least one of\")} ${Yn(\"or\", e.constraints.requiredFields.map((s)=>`\\`${i.bold(s)}\\``))} arguments.`) : o.push(`${i.green(\"at least one\")} argument.`) : o.push(`${i.green(`at least ${e.constraints.minFieldCount}`)} arguments.`), o.push(qr(i)), o.join(\" \");\n    });\n}\nfunction Jm(e, t) {\n    let r = e.argumentPath[e.argumentPath.length - 1], n = t.arguments.getDeepSubSelectionValue(e.selectionPath), i = [];\n    if (n instanceof Y) {\n        let o = n.getDeepFieldValue(e.argumentPath);\n        o instanceof Y && (o.markAsError(), i = Object.keys(o.getFields()));\n    }\n    t.addErrorMessage((o)=>{\n        let s = [\n            `Argument \\`${o.bold(r)}\\` of type ${o.bold(e.inputType.name)} needs`\n        ];\n        return e.constraints.minFieldCount === 1 && e.constraints.maxFieldCount == 1 ? s.push(`${o.green(\"exactly one\")} argument,`) : e.constraints.maxFieldCount == 1 ? s.push(`${o.green(\"at most one\")} argument,`) : s.push(`${o.green(`at most ${e.constraints.maxFieldCount}`)} arguments,`), s.push(`but you provided ${Yn(\"and\", i.map((a)=>o.red(a)))}. Please choose`), e.constraints.maxFieldCount === 1 ? s.push(\"one.\") : s.push(`${e.constraints.maxFieldCount}.`), s.join(\" \");\n    });\n}\nfunction Fl(e, t) {\n    for (let r of t.fields)e.hasField(r.name) || e.addSuggestion(new Ke(r.name, \"true\"));\n}\nfunction Hm(e, t) {\n    for (let r of t)e.hasField(r.name) || e.addSuggestion(new Ke(r.name, r.typeNames.join(\" | \")));\n}\nfunction Dl(e, t) {\n    if (t.kind === \"object\") for (let r of t.fields)e.hasField(r.name) || e.addSuggestion(new Ke(r.name, r.typeNames.join(\" | \")));\n}\nfunction zn(e) {\n    let t = [\n        ...e\n    ], r = t.pop();\n    if (!r) throw new Error(\"unexpected empty path\");\n    return [\n        t,\n        r\n    ];\n}\nfunction qr({ green: e, enabled: t }) {\n    return \"Available options are \" + (t ? `listed in ${e(\"green\")}` : \"marked with ?\") + \".\";\n}\nfunction Yn(e, t) {\n    if (t.length === 1) return t[0];\n    let r = [\n        ...t\n    ], n = r.pop();\n    return `${r.join(\", \")} ${e} ${n}`;\n}\nvar Wm = 3;\nfunction zm(e, t) {\n    let r = 1 / 0, n;\n    for (let i of t){\n        let o = (0, Sl.default)(e, i);\n        o > Wm || o < r && (r = o, n = i);\n    }\n    return n;\n}\nfunction Zn({ args: e, errors: t, errorFormat: r, callsite: n, originalMethod: i, clientVersion: o }) {\n    let s = An(e);\n    for (let p of t)Hn(p, s);\n    let a = r === \"pretty\" ? ma : Cn, l = s.renderAllMessages(a), u = new Dt(0, {\n        colors: a\n    }).write(s).toString(), c = Ut({\n        message: l,\n        callsite: n,\n        originalMethod: i,\n        showColors: r === \"pretty\",\n        callArguments: u\n    });\n    throw new se(c, {\n        clientVersion: o\n    });\n}\nvar Ym = {\n    findUnique: \"findUnique\",\n    findUniqueOrThrow: \"findUniqueOrThrow\",\n    findFirst: \"findFirst\",\n    findFirstOrThrow: \"findFirstOrThrow\",\n    findMany: \"findMany\",\n    count: \"aggregate\",\n    create: \"createOne\",\n    createMany: \"createMany\",\n    update: \"updateOne\",\n    updateMany: \"updateMany\",\n    upsert: \"upsertOne\",\n    delete: \"deleteOne\",\n    deleteMany: \"deleteMany\",\n    executeRaw: \"executeRaw\",\n    queryRaw: \"queryRaw\",\n    aggregate: \"aggregate\",\n    groupBy: \"groupBy\",\n    runCommandRaw: \"runCommandRaw\",\n    findRaw: \"findRaw\",\n    aggregateRaw: \"aggregateRaw\"\n};\nfunction Ol({ modelName: e, action: t, args: r, runtimeDataModel: n, extensions: i, callsite: o, clientMethod: s, errorFormat: a, clientVersion: l }) {\n    let u = new Ao({\n        runtimeDataModel: n,\n        modelName: e,\n        action: t,\n        rootArgs: r,\n        callsite: o,\n        extensions: i,\n        selectionPath: [],\n        argumentPath: [],\n        originalMethod: s,\n        errorFormat: a,\n        clientVersion: l\n    });\n    return {\n        modelName: e,\n        action: Ym[t],\n        query: Ro(r, u)\n    };\n}\nfunction Ro({ select: e, include: t, ...r } = {}, n) {\n    return {\n        arguments: Ll(r, n),\n        selection: Zm(e, t, n)\n    };\n}\nfunction Zm(e, t, r) {\n    return e && t && r.throwValidationError({\n        kind: \"IncludeAndSelect\",\n        selectionPath: r.getSelectionPath()\n    }), e ? tf(e, r) : Xm(r, t);\n}\nfunction Xm(e, t) {\n    let r = {};\n    return e.model && !e.isRawAction() && (r.$composites = !0, r.$scalars = !0), t && ef(r, t, e), r;\n}\nfunction ef(e, t, r) {\n    for (let [n, i] of Object.entries(t)){\n        let o = r.findField(n);\n        o && o?.kind !== \"object\" && r.throwValidationError({\n            kind: \"IncludeOnScalar\",\n            selectionPath: r.getSelectionPath().concat(n),\n            outputType: r.getOutputTypeDescription()\n        }), i === !0 ? e[n] = !0 : typeof i == \"object\" && (e[n] = Ro(i, r.nestSelection(n)));\n    }\n}\nfunction tf(e, t) {\n    let r = {}, n = t.getComputedFields(), i = Ha(e, n);\n    for (let [o, s] of Object.entries(i)){\n        let a = t.findField(o);\n        n?.[o] && !a || (s === !0 ? r[o] = !0 : typeof s == \"object\" && (r[o] = Ro(s, t.nestSelection(o))));\n    }\n    return r;\n}\nfunction Nl(e, t) {\n    if (e === null) return null;\n    if (typeof e == \"string\" || typeof e == \"number\" || typeof e == \"boolean\") return e;\n    if (typeof e == \"bigint\") return {\n        $type: \"BigInt\",\n        value: String(e)\n    };\n    if (Ot(e)) {\n        if (gn(e)) return {\n            $type: \"DateTime\",\n            value: e.toISOString()\n        };\n        t.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            selectionPath: t.getSelectionPath(),\n            argumentPath: t.getArgumentPath(),\n            argument: {\n                name: t.getArgumentName(),\n                typeNames: [\n                    \"Date\"\n                ]\n            },\n            underlyingError: \"Provided Date object is invalid\"\n        });\n    }\n    if (qt(e)) return {\n        $type: \"FieldRef\",\n        value: {\n            _ref: e.name,\n            _container: e.modelName\n        }\n    };\n    if (Array.isArray(e)) return rf(e, t);\n    if (ArrayBuffer.isView(e)) return {\n        $type: \"Bytes\",\n        value: Buffer.from(e).toString(\"base64\")\n    };\n    if (nf(e)) return e.values;\n    if ($t(e)) return {\n        $type: \"Decimal\",\n        value: e.toFixed()\n    };\n    if (e instanceof ke) {\n        if (e !== dn.instances[e._getName()]) throw new Error(\"Invalid ObjectEnumValue\");\n        return {\n            $type: \"Enum\",\n            value: e._getName()\n        };\n    }\n    if (of(e)) return e.toJSON();\n    if (typeof e == \"object\") return Ll(e, t);\n    t.throwValidationError({\n        kind: \"InvalidArgumentValue\",\n        selectionPath: t.getSelectionPath(),\n        argumentPath: t.getArgumentPath(),\n        argument: {\n            name: t.getArgumentName(),\n            typeNames: []\n        },\n        underlyingError: `We could not serialize ${Object.prototype.toString.call(e)} value. Serialize the object to JSON or implement a \".toJSON()\" method on it`\n    });\n}\nfunction Ll(e, t) {\n    if (e.$type) return {\n        $type: \"Json\",\n        value: JSON.stringify(e)\n    };\n    let r = {};\n    for(let n in e){\n        let i = e[n];\n        i !== void 0 && (r[n] = Nl(i, t.nestArgument(n)));\n    }\n    return r;\n}\nfunction rf(e, t) {\n    let r = [];\n    for(let n = 0; n < e.length; n++){\n        let i = t.nestArgument(String(n)), o = e[n];\n        o === void 0 && t.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            selectionPath: i.getSelectionPath(),\n            argumentPath: i.getArgumentPath(),\n            argument: {\n                name: `${t.getArgumentName()}[${n}]`,\n                typeNames: []\n            },\n            underlyingError: \"Can not use `undefined` value within array. Use `null` or filter out `undefined` values\"\n        }), r.push(Nl(o, i));\n    }\n    return r;\n}\nfunction nf(e) {\n    return typeof e == \"object\" && e !== null && e.__prismaRawParameters__ === !0;\n}\nfunction of(e) {\n    return typeof e == \"object\" && e !== null && typeof e.toJSON == \"function\";\n}\nvar Ao = class e {\n    constructor(t){\n        this.params = t;\n        this.params.modelName && (this.model = this.params.runtimeDataModel.models[this.params.modelName]);\n    }\n    throwValidationError(t) {\n        Zn({\n            errors: [\n                t\n            ],\n            originalMethod: this.params.originalMethod,\n            args: this.params.rootArgs ?? {},\n            callsite: this.params.callsite,\n            errorFormat: this.params.errorFormat,\n            clientVersion: this.params.clientVersion\n        });\n    }\n    getSelectionPath() {\n        return this.params.selectionPath;\n    }\n    getArgumentPath() {\n        return this.params.argumentPath;\n    }\n    getArgumentName() {\n        return this.params.argumentPath[this.params.argumentPath.length - 1];\n    }\n    getOutputTypeDescription() {\n        if (!(!this.params.modelName || !this.model)) return {\n            name: this.params.modelName,\n            fields: this.model.fields.map((t)=>({\n                    name: t.name,\n                    typeName: \"boolean\",\n                    isRelation: t.kind === \"object\"\n                }))\n        };\n    }\n    isRawAction() {\n        return [\n            \"executeRaw\",\n            \"queryRaw\",\n            \"runCommandRaw\",\n            \"findRaw\",\n            \"aggregateRaw\"\n        ].includes(this.params.action);\n    }\n    getComputedFields() {\n        if (this.params.modelName) return this.params.extensions.getAllComputedFields(this.params.modelName);\n    }\n    findField(t) {\n        return this.model?.fields.find((r)=>r.name === t);\n    }\n    nestSelection(t) {\n        let r = this.findField(t), n = r?.kind === \"object\" ? r.type : void 0;\n        return new e({\n            ...this.params,\n            modelName: n,\n            selectionPath: this.params.selectionPath.concat(t)\n        });\n    }\n    nestArgument(t) {\n        return new e({\n            ...this.params,\n            argumentPath: this.params.argumentPath.concat(t)\n        });\n    }\n};\nvar $l = (e)=>({\n        command: e\n    });\nvar ql = (e)=>e.strings.reduce((t, r, n)=>`${t}@P${n}${r}`);\nfunction jr(e) {\n    try {\n        return jl(e, \"fast\");\n    } catch  {\n        return jl(e, \"slow\");\n    }\n}\nfunction jl(e, t) {\n    return JSON.stringify(e.map((r)=>sf(r, t)));\n}\nfunction sf(e, t) {\n    return typeof e == \"bigint\" ? {\n        prisma__type: \"bigint\",\n        prisma__value: e.toString()\n    } : Ot(e) ? {\n        prisma__type: \"date\",\n        prisma__value: e.toJSON()\n    } : Oe.isDecimal(e) ? {\n        prisma__type: \"decimal\",\n        prisma__value: e.toJSON()\n    } : Buffer.isBuffer(e) ? {\n        prisma__type: \"bytes\",\n        prisma__value: e.toString(\"base64\")\n    } : af(e) || ArrayBuffer.isView(e) ? {\n        prisma__type: \"bytes\",\n        prisma__value: Buffer.from(e).toString(\"base64\")\n    } : typeof e == \"object\" && t === \"slow\" ? Bl(e) : e;\n}\nfunction af(e) {\n    return e instanceof ArrayBuffer || e instanceof SharedArrayBuffer ? !0 : typeof e == \"object\" && e !== null ? e[Symbol.toStringTag] === \"ArrayBuffer\" || e[Symbol.toStringTag] === \"SharedArrayBuffer\" : !1;\n}\nfunction Bl(e) {\n    if (typeof e != \"object\" || e === null) return e;\n    if (typeof e.toJSON == \"function\") return e.toJSON();\n    if (Array.isArray(e)) return e.map(Vl);\n    let t = {};\n    for (let r of Object.keys(e))t[r] = Vl(e[r]);\n    return t;\n}\nfunction Vl(e) {\n    return typeof e == \"bigint\" ? e.toString() : Bl(e);\n}\nvar lf = /^(\\s*alter\\s)/i, Ul = L(\"prisma:client\");\nfunction Mo(e, t, r, n) {\n    if (!(e !== \"postgresql\" && e !== \"cockroachdb\") && r.length > 0 && lf.exec(t)) throw new Error(`Running ALTER using ${n} is not supported\nUsing the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.\n\nExample:\n  await prisma.$executeRawUnsafe(\\`ALTER USER prisma WITH PASSWORD '\\${password}'\\`)\n\nMore Information: https://pris.ly/d/execute-raw\n`);\n}\nvar So = ({ clientMethod: e, activeProvider: t, activeProviderFlavour: r })=>(n)=>{\n        r !== void 0 && (t = r);\n        let i = \"\", o;\n        if (Array.isArray(n)) {\n            let [s, ...a] = n;\n            i = s, o = {\n                values: jr(a || []),\n                __prismaRawParameters__: !0\n            };\n        } else switch(t){\n            case \"sqlite\":\n            case \"mysql\":\n                {\n                    i = n.sql, o = {\n                        values: jr(n.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"cockroachdb\":\n            case \"postgresql\":\n            case \"postgres\":\n                {\n                    i = n.text, o = {\n                        values: jr(n.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"sqlserver\":\n                {\n                    i = ql(n), o = {\n                        values: jr(n.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            default:\n                throw new Error(`The ${t} provider does not support ${e}`);\n        }\n        return o?.values ? Ul(`prisma.${e}(${i}, ${o.values})`) : Ul(`prisma.${e}(${i})`), {\n            query: i,\n            parameters: o\n        };\n    }, Kl = {\n    requestArgsToMiddlewareArgs (e) {\n        return [\n            e.strings,\n            ...e.values\n        ];\n    },\n    middlewareArgsToRequestArgs (e) {\n        let [t, ...r] = e;\n        return new me(t, r);\n    }\n}, Ql = {\n    requestArgsToMiddlewareArgs (e) {\n        return [\n            e\n        ];\n    },\n    middlewareArgsToRequestArgs (e) {\n        return e[0];\n    }\n};\nfunction ko(e) {\n    return function(r) {\n        let n, i = (o = e)=>{\n            try {\n                return o === void 0 || o?.kind === \"itx\" ? n ?? (n = Gl(r(o))) : Gl(r(o));\n            } catch (s) {\n                return Promise.reject(s);\n            }\n        };\n        return {\n            then (o, s) {\n                return i().then(o, s);\n            },\n            catch (o) {\n                return i().catch(o);\n            },\n            finally (o) {\n                return i().finally(o);\n            },\n            requestTransaction (o) {\n                let s = i(o);\n                return s.requestTransaction ? s.requestTransaction(o) : s;\n            },\n            [Symbol.toStringTag]: \"PrismaPromise\"\n        };\n    };\n}\nfunction Gl(e) {\n    return typeof e.then == \"function\" ? e : Promise.resolve(e);\n}\nvar Jl = {\n    isEnabled () {\n        return !1;\n    },\n    getTraceParent () {\n        return \"00-10-10-00\";\n    },\n    async createEngineSpan () {},\n    getActiveContext () {},\n    runInChildSpan (e, t) {\n        return t();\n    }\n}, Io = class {\n    isEnabled() {\n        return this.getGlobalTracingHelper().isEnabled();\n    }\n    getTraceParent(t) {\n        return this.getGlobalTracingHelper().getTraceParent(t);\n    }\n    createEngineSpan(t) {\n        return this.getGlobalTracingHelper().createEngineSpan(t);\n    }\n    getActiveContext() {\n        return this.getGlobalTracingHelper().getActiveContext();\n    }\n    runInChildSpan(t, r) {\n        return this.getGlobalTracingHelper().runInChildSpan(t, r);\n    }\n    getGlobalTracingHelper() {\n        return globalThis.PRISMA_INSTRUMENTATION?.helper ?? Jl;\n    }\n};\nfunction Hl(e) {\n    return e.includes(\"tracing\") ? new Io : Jl;\n}\nfunction Wl(e, t = ()=>{}) {\n    let r, n = new Promise((i)=>r = i);\n    return {\n        then (i) {\n            return --e === 0 && r(t()), i?.(n);\n        }\n    };\n}\nvar uf = [\n    \"$connect\",\n    \"$disconnect\",\n    \"$on\",\n    \"$transaction\",\n    \"$use\",\n    \"$extends\"\n], Fo = uf;\nfunction zl(e) {\n    return typeof e == \"string\" ? e : e.reduce((t, r)=>{\n        let n = typeof r == \"string\" ? r : r.level;\n        return n === \"query\" ? t : t && (r === \"info\" || t === \"info\") ? \"info\" : n;\n    }, void 0);\n}\nvar Xn = class {\n    constructor(){\n        this._middlewares = [];\n    }\n    use(t) {\n        this._middlewares.push(t);\n    }\n    get(t) {\n        return this._middlewares[t];\n    }\n    has(t) {\n        return !!this._middlewares[t];\n    }\n    length() {\n        return this._middlewares.length;\n    }\n};\nvar Zl = I(ji());\nfunction ei(e) {\n    return typeof e.batchRequestIdx == \"number\";\n}\nfunction ti(e) {\n    return e === null ? e : Array.isArray(e) ? e.map(ti) : typeof e == \"object\" ? cf(e) ? pf(e) : It(e, ti) : e;\n}\nfunction cf(e) {\n    return e !== null && typeof e == \"object\" && typeof e.$type == \"string\";\n}\nfunction pf({ $type: e, value: t }) {\n    switch(e){\n        case \"BigInt\":\n            return BigInt(t);\n        case \"Bytes\":\n            return Buffer.from(t, \"base64\");\n        case \"DateTime\":\n            return new Date(t);\n        case \"Decimal\":\n            return new Oe(t);\n        case \"Json\":\n            return JSON.parse(t);\n        default:\n            ft(t, \"Unknown tagged value\");\n    }\n}\nfunction Yl(e) {\n    if (e.action !== \"findUnique\" && e.action !== \"findUniqueOrThrow\") return;\n    let t = [];\n    return e.modelName && t.push(e.modelName), e.query.arguments && t.push(Do(e.query.arguments)), t.push(Do(e.query.selection)), t.join(\"\");\n}\nfunction Do(e) {\n    return `(${Object.keys(e).sort().map((r)=>{\n        let n = e[r];\n        return typeof n == \"object\" && n !== null ? `(${r} ${Do(n)})` : r;\n    }).join(\" \")})`;\n}\nvar df = {\n    aggregate: !1,\n    aggregateRaw: !1,\n    createMany: !0,\n    createOne: !0,\n    deleteMany: !0,\n    deleteOne: !0,\n    executeRaw: !0,\n    findFirst: !1,\n    findFirstOrThrow: !1,\n    findMany: !1,\n    findRaw: !1,\n    findUnique: !1,\n    findUniqueOrThrow: !1,\n    groupBy: !1,\n    queryRaw: !1,\n    runCommandRaw: !0,\n    updateMany: !0,\n    updateOne: !0,\n    upsertOne: !0\n};\nfunction Oo(e) {\n    return df[e];\n}\nvar ri = class {\n    constructor(t){\n        this.options = t;\n        this.tickActive = !1;\n        this.batches = {};\n    }\n    request(t) {\n        let r = this.options.batchBy(t);\n        return r ? (this.batches[r] || (this.batches[r] = [], this.tickActive || (this.tickActive = !0, process.nextTick(()=>{\n            this.dispatchBatches(), this.tickActive = !1;\n        }))), new Promise((n, i)=>{\n            this.batches[r].push({\n                request: t,\n                resolve: n,\n                reject: i\n            });\n        })) : this.options.singleLoader(t);\n    }\n    dispatchBatches() {\n        for(let t in this.batches){\n            let r = this.batches[t];\n            delete this.batches[t], r.length === 1 ? this.options.singleLoader(r[0].request).then((n)=>{\n                n instanceof Error ? r[0].reject(n) : r[0].resolve(n);\n            }).catch((n)=>{\n                r[0].reject(n);\n            }) : (r.sort((n, i)=>this.options.batchOrder(n.request, i.request)), this.options.batchLoader(r.map((n)=>n.request)).then((n)=>{\n                if (n instanceof Error) for(let i = 0; i < r.length; i++)r[i].reject(n);\n                else for(let i = 0; i < r.length; i++){\n                    let o = n[i];\n                    o instanceof Error ? r[i].reject(o) : r[i].resolve(o);\n                }\n            }).catch((n)=>{\n                for(let i = 0; i < r.length; i++)r[i].reject(n);\n            }));\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"DataLoader\";\n    }\n};\nvar mf = L(\"prisma:client:request_handler\"), ni = class {\n    constructor(t, r){\n        this.logEmitter = r, this.client = t, this.dataloader = new ri({\n            batchLoader: Ua(async ({ requests: n, customDataProxyFetch: i })=>{\n                let { transaction: o, otelParentCtx: s } = n[0], a = n.map((p)=>p.protocolQuery), l = this.client._tracingHelper.getTraceParent(s), u = n.some((p)=>Oo(p.protocolQuery.action));\n                return (await this.client._engine.requestBatch(a, {\n                    traceparent: l,\n                    transaction: ff(o),\n                    containsWrite: u,\n                    customDataProxyFetch: i\n                })).map((p, d)=>{\n                    if (p instanceof Error) return p;\n                    try {\n                        return this.mapQueryEngineResult(n[d], p);\n                    } catch (f) {\n                        return f;\n                    }\n                });\n            }),\n            singleLoader: async (n)=>{\n                let i = n.transaction?.kind === \"itx\" ? Xl(n.transaction) : void 0, o = await this.client._engine.request(n.protocolQuery, {\n                    traceparent: this.client._tracingHelper.getTraceParent(),\n                    interactiveTransaction: i,\n                    isWrite: Oo(n.protocolQuery.action),\n                    customDataProxyFetch: n.customDataProxyFetch\n                });\n                return this.mapQueryEngineResult(n, o);\n            },\n            batchBy: (n)=>n.transaction?.id ? `transaction-${n.transaction.id}` : Yl(n.protocolQuery),\n            batchOrder (n, i) {\n                return n.transaction?.kind === \"batch\" && i.transaction?.kind === \"batch\" ? n.transaction.index - i.transaction.index : 0;\n            }\n        });\n    }\n    async request(t) {\n        try {\n            return await this.dataloader.request(t);\n        } catch (r) {\n            let { clientMethod: n, callsite: i, transaction: o, args: s } = t;\n            this.handleAndLogRequestError({\n                error: r,\n                clientMethod: n,\n                callsite: i,\n                transaction: o,\n                args: s\n            });\n        }\n    }\n    mapQueryEngineResult({ dataPath: t, unpacker: r }, n) {\n        let i = n?.data, o = n?.elapsed, s = this.unpack(i, t, r);\n        return process.env.PRISMA_CLIENT_GET_TIME ? {\n            data: s,\n            elapsed: o\n        } : s;\n    }\n    handleAndLogRequestError(t) {\n        try {\n            this.handleRequestError(t);\n        } catch (r) {\n            throw this.logEmitter && this.logEmitter.emit(\"error\", {\n                message: r.message,\n                target: t.clientMethod,\n                timestamp: new Date\n            }), r;\n        }\n    }\n    handleRequestError({ error: t, clientMethod: r, callsite: n, transaction: i, args: o }) {\n        if (mf(t), gf(t, i) || t instanceof Ve) throw t;\n        if (t instanceof W && yf(t)) {\n            let a = eu(t.meta);\n            Zn({\n                args: o,\n                errors: [\n                    a\n                ],\n                callsite: n,\n                errorFormat: this.client._errorFormat,\n                originalMethod: r,\n                clientVersion: this.client._clientVersion\n            });\n        }\n        let s = t.message;\n        throw n && (s = Ut({\n            callsite: n,\n            originalMethod: r,\n            isPanic: t.isPanic,\n            showColors: this.client._errorFormat === \"pretty\",\n            message: s\n        })), s = this.sanitizeMessage(s), t.code ? new W(s, {\n            code: t.code,\n            clientVersion: this.client._clientVersion,\n            meta: t.meta,\n            batchRequestIdx: t.batchRequestIdx\n        }) : t.isPanic ? new he(s, this.client._clientVersion) : t instanceof z ? new z(s, {\n            clientVersion: this.client._clientVersion,\n            batchRequestIdx: t.batchRequestIdx\n        }) : t instanceof k ? new k(s, this.client._clientVersion) : t instanceof he ? new he(s, this.client._clientVersion) : (t.clientVersion = this.client._clientVersion, t);\n    }\n    sanitizeMessage(t) {\n        return this.client._errorFormat && this.client._errorFormat !== \"pretty\" ? (0, Zl.default)(t) : t;\n    }\n    unpack(t, r, n) {\n        if (!t || (t.data && (t = t.data), !t)) return t;\n        let i = Object.values(t)[0], o = r.filter((a)=>a !== \"select\" && a !== \"include\"), s = ti(so(i, o));\n        return n ? n(s) : s;\n    }\n    get [Symbol.toStringTag]() {\n        return \"RequestHandler\";\n    }\n};\nfunction ff(e) {\n    if (e) {\n        if (e.kind === \"batch\") return {\n            kind: \"batch\",\n            options: {\n                isolationLevel: e.isolationLevel\n            }\n        };\n        if (e.kind === \"itx\") return {\n            kind: \"itx\",\n            options: Xl(e)\n        };\n        ft(e, \"Unknown transaction kind\");\n    }\n}\nfunction Xl(e) {\n    return {\n        id: e.id,\n        payload: e.payload\n    };\n}\nfunction gf(e, t) {\n    return ei(e) && t?.kind === \"batch\" && e.batchRequestIdx !== t.index;\n}\nfunction yf(e) {\n    return e.code === \"P2009\" || e.code === \"P2012\";\n}\nfunction eu(e) {\n    if (e.kind === \"Union\") return {\n        kind: \"Union\",\n        errors: e.errors.map(eu)\n    };\n    if (Array.isArray(e.selectionPath)) {\n        let [, ...t] = e.selectionPath;\n        return {\n            ...e,\n            selectionPath: t\n        };\n    }\n    return e;\n}\nvar tu = \"5.6.0\";\nvar ru = tu;\nfunction nu(e) {\n    return e.map((t)=>{\n        let r = {};\n        for (let n of Object.keys(t))r[n] = iu(t[n]);\n        return r;\n    });\n}\nfunction iu({ prisma__type: e, prisma__value: t }) {\n    switch(e){\n        case \"bigint\":\n            return BigInt(t);\n        case \"bytes\":\n            return Buffer.from(t, \"base64\");\n        case \"decimal\":\n            return new Oe(t);\n        case \"datetime\":\n        case \"date\":\n            return new Date(t);\n        case \"time\":\n            return new Date(`1970-01-01T${t}Z`);\n        case \"array\":\n            return t.map(iu);\n        default:\n            return t;\n    }\n}\nvar lu = I(_o());\nvar B = class extends Error {\n    constructor(t){\n        super(t + `\nRead more at https://pris.ly/d/client-constructor`), this.name = \"PrismaClientConstructorValidationError\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientConstructorValidationError\";\n    }\n};\nE(B, \"PrismaClientConstructorValidationError\");\nvar ou = [\n    \"datasources\",\n    \"datasourceUrl\",\n    \"errorFormat\",\n    \"adapter\",\n    \"log\",\n    \"__internal\"\n], su = [\n    \"pretty\",\n    \"colorless\",\n    \"minimal\"\n], au = [\n    \"info\",\n    \"query\",\n    \"warn\",\n    \"error\"\n], xf = {\n    datasources: (e, { datasourceNames: t })=>{\n        if (e) {\n            if (typeof e != \"object\" || Array.isArray(e)) throw new B(`Invalid value ${JSON.stringify(e)} for \"datasources\" provided to PrismaClient constructor`);\n            for (let [r, n] of Object.entries(e)){\n                if (!t.includes(r)) {\n                    let i = zt(r, t) || ` Available datasources: ${t.join(\", \")}`;\n                    throw new B(`Unknown datasource ${r} provided to PrismaClient constructor.${i}`);\n                }\n                if (typeof n != \"object\" || Array.isArray(n)) throw new B(`Invalid value ${JSON.stringify(e)} for datasource \"${r}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                if (n && typeof n == \"object\") for (let [i, o] of Object.entries(n)){\n                    if (i !== \"url\") throw new B(`Invalid value ${JSON.stringify(e)} for datasource \"${r}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                    if (typeof o != \"string\") throw new B(`Invalid value ${JSON.stringify(o)} for datasource \"${r}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                }\n            }\n        }\n    },\n    adapter: (e, t)=>{\n        if (e === null) return;\n        if (e === void 0) throw new B('\"adapter\" property must not be undefined, use null to conditionally disable driver adapters.');\n        if (!Jn(t).includes(\"driverAdapters\")) throw new B('\"adapter\" property can only be provided to PrismaClient constructor when \"driverAdapters\" preview feature is enabled.');\n        if (mt() === \"binary\") throw new B('Cannot use a driver adapter with the \"binary\" Query Engine. Please use the \"library\" Query Engine.');\n    },\n    datasourceUrl: (e)=>{\n        if (typeof e < \"u\" && typeof e != \"string\") throw new B(`Invalid value ${JSON.stringify(e)} for \"datasourceUrl\" provided to PrismaClient constructor.\nExpected string or undefined.`);\n    },\n    errorFormat: (e)=>{\n        if (e) {\n            if (typeof e != \"string\") throw new B(`Invalid value ${JSON.stringify(e)} for \"errorFormat\" provided to PrismaClient constructor.`);\n            if (!su.includes(e)) {\n                let t = zt(e, su);\n                throw new B(`Invalid errorFormat ${e} provided to PrismaClient constructor.${t}`);\n            }\n        }\n    },\n    log: (e)=>{\n        if (!e) return;\n        if (!Array.isArray(e)) throw new B(`Invalid value ${JSON.stringify(e)} for \"log\" provided to PrismaClient constructor.`);\n        function t(r) {\n            if (typeof r == \"string\" && !au.includes(r)) {\n                let n = zt(r, au);\n                throw new B(`Invalid log level \"${r}\" provided to PrismaClient constructor.${n}`);\n            }\n        }\n        for (let r of e){\n            t(r);\n            let n = {\n                level: t,\n                emit: (i)=>{\n                    let o = [\n                        \"stdout\",\n                        \"event\"\n                    ];\n                    if (!o.includes(i)) {\n                        let s = zt(i, o);\n                        throw new B(`Invalid value ${JSON.stringify(i)} for \"emit\" in logLevel provided to PrismaClient constructor.${s}`);\n                    }\n                }\n            };\n            if (r && typeof r == \"object\") for (let [i, o] of Object.entries(r))if (n[i]) n[i](o);\n            else throw new B(`Invalid property ${i} for \"log\" provided to PrismaClient constructor`);\n        }\n    },\n    __internal: (e)=>{\n        if (!e) return;\n        let t = [\n            \"debug\",\n            \"hooks\",\n            \"engine\",\n            \"measurePerformance\"\n        ];\n        if (typeof e != \"object\") throw new B(`Invalid value ${JSON.stringify(e)} for \"__internal\" to PrismaClient constructor`);\n        for (let [r] of Object.entries(e))if (!t.includes(r)) {\n            let n = zt(r, t);\n            throw new B(`Invalid property ${JSON.stringify(r)} for \"__internal\" provided to PrismaClient constructor.${n}`);\n        }\n    }\n};\nfunction uu(e, t) {\n    for (let [r, n] of Object.entries(e)){\n        if (!ou.includes(r)) {\n            let i = zt(r, ou);\n            throw new B(`Unknown property ${r} provided to PrismaClient constructor.${i}`);\n        }\n        xf[r](n, t);\n    }\n    if (e.datasourceUrl && e.datasources) throw new B('Can not use \"datasourceUrl\" and \"datasources\" options at the same time. Pick one of them');\n}\nfunction zt(e, t) {\n    if (t.length === 0 || typeof e != \"string\") return \"\";\n    let r = bf(e, t);\n    return r ? ` Did you mean \"${r}\"?` : \"\";\n}\nfunction bf(e, t) {\n    if (t.length === 0) return null;\n    let r = t.map((i)=>({\n            value: i,\n            distance: (0, lu.default)(e, i)\n        }));\n    r.sort((i, o)=>i.distance < o.distance ? -1 : 1);\n    let n = r[0];\n    return n.distance < 3 ? n.value : null;\n}\nfunction cu(e) {\n    return e.length === 0 ? Promise.resolve([]) : new Promise((t, r)=>{\n        let n = new Array(e.length), i = null, o = !1, s = 0, a = ()=>{\n            o || (s++, s === e.length && (o = !0, i ? r(i) : t(n)));\n        }, l = (u)=>{\n            o || (o = !0, r(u));\n        };\n        for(let u = 0; u < e.length; u++)e[u].then((c)=>{\n            n[u] = c, a();\n        }, (c)=>{\n            if (!ei(c)) {\n                l(c);\n                return;\n            }\n            c.batchRequestIdx === u ? l(c) : (i || (i = c), a());\n        });\n    });\n}\nvar at = L(\"prisma:client\");\ntypeof globalThis == \"object\" && (globalThis.NODE_CLIENT = !0);\nvar wf = {\n    requestArgsToMiddlewareArgs: (e)=>e,\n    middlewareArgsToRequestArgs: (e)=>e\n}, Ef = Symbol.for(\"prisma.client.transaction.id\"), Pf = {\n    id: 0,\n    nextId () {\n        return ++this.id;\n    }\n};\nfunction gu(e) {\n    class t {\n        constructor(n){\n            this._middlewares = new Xn;\n            this._createPrismaPromise = ko();\n            this.$extends = Oa;\n            Ya(e), n && uu(n, e);\n            let i = n?.adapter ? Hi(n.adapter) : void 0, o = new mu.EventEmitter().on(\"error\", ()=>{});\n            this._extensions = Dn.empty(), this._previewFeatures = Jn(e), this._clientVersion = e.clientVersion ?? ru, this._activeProvider = e.activeProvider, this._tracingHelper = Hl(this._previewFeatures);\n            let s = {\n                rootEnvPath: e.relativeEnvPaths.rootEnvPath && Vr.default.resolve(e.dirname, e.relativeEnvPaths.rootEnvPath),\n                schemaEnvPath: e.relativeEnvPaths.schemaEnvPath && Vr.default.resolve(e.dirname, e.relativeEnvPaths.schemaEnvPath)\n            }, a = !i && nr(s, {\n                conflictCheck: \"none\"\n            }) || e.injectableEdgeEnv?.();\n            try {\n                let l = n ?? {}, u = l.__internal ?? {}, c = u.debug === !0;\n                c && L.enable(\"prisma:client\");\n                let p = Vr.default.resolve(e.dirname, e.relativePath);\n                fu.default.existsSync(p) || (p = e.dirname), at(\"dirname\", e.dirname), at(\"relativePath\", e.relativePath), at(\"cwd\", p);\n                let d = u.engine || {};\n                if (l.errorFormat ? this._errorFormat = l.errorFormat :  false ? 0 : process.env.NO_COLOR ? this._errorFormat = \"colorless\" : this._errorFormat = \"colorless\", this._runtimeDataModel = e.runtimeDataModel, this._engineConfig = {\n                    cwd: p,\n                    dirname: e.dirname,\n                    enableDebugLogs: c,\n                    allowTriggerPanic: d.allowTriggerPanic,\n                    datamodelPath: Vr.default.join(e.dirname, e.filename ?? \"schema.prisma\"),\n                    prismaPath: d.binaryPath ?? void 0,\n                    engineEndpoint: d.endpoint,\n                    generator: e.generator,\n                    showColors: this._errorFormat === \"pretty\",\n                    logLevel: l.log && zl(l.log),\n                    logQueries: l.log && !!(typeof l.log == \"string\" ? l.log === \"query\" : l.log.find((f)=>typeof f == \"string\" ? f === \"query\" : f.level === \"query\")),\n                    env: a?.parsed ?? {},\n                    flags: [],\n                    getQueryEngineWasmModule: e.getQueryEngineWasmModule,\n                    clientVersion: e.clientVersion,\n                    engineVersion: e.engineVersion,\n                    previewFeatures: this._previewFeatures,\n                    activeProvider: e.activeProvider,\n                    inlineSchema: e.inlineSchema,\n                    overrideDatasources: Za(l, e.datasourceNames),\n                    inlineDatasources: e.inlineDatasources,\n                    inlineSchemaHash: e.inlineSchemaHash,\n                    tracingHelper: this._tracingHelper,\n                    logEmitter: o,\n                    isBundled: e.isBundled,\n                    adapter: i\n                }, at(\"clientVersion\", e.clientVersion), this._engine = Tl(e, this._engineConfig), this._requestHandler = new ni(this, o), l.log) for (let f of l.log){\n                    let y = typeof f == \"string\" ? f : f.emit === \"stdout\" ? f.level : null;\n                    y && this.$on(y, (g)=>{\n                        sr.log(`${sr.tags[y] ?? \"\"}`, g.message || g.query);\n                    });\n                }\n                this._metrics = new Ft(this._engine);\n            } catch (l) {\n                throw l.clientVersion = this._clientVersion, l;\n            }\n            return this._appliedParent = wr(this);\n        }\n        get [Symbol.toStringTag]() {\n            return \"PrismaClient\";\n        }\n        $use(n) {\n            this._middlewares.use(n);\n        }\n        $on(n, i) {\n            n === \"beforeExit\" ? this._engine.on(\"beforeExit\", i) : this._engine.on(n, (o)=>{\n                let s = o.fields;\n                return i(n === \"query\" ? {\n                    timestamp: o.timestamp,\n                    query: s?.query ?? o.query,\n                    params: s?.params ?? o.params,\n                    duration: s?.duration_ms ?? o.duration,\n                    target: o.target\n                } : {\n                    timestamp: o.timestamp,\n                    message: s?.message ?? o.message,\n                    target: o.target\n                });\n            });\n        }\n        $connect() {\n            try {\n                return this._engine.start();\n            } catch (n) {\n                throw n.clientVersion = this._clientVersion, n;\n            }\n        }\n        async $disconnect() {\n            try {\n                await this._engine.stop();\n            } catch (n) {\n                throw n.clientVersion = this._clientVersion, n;\n            } finally{\n                rs();\n            }\n        }\n        $executeRawInternal(n, i, o, s) {\n            let a = this._activeProvider, l = this._engineConfig.adapter?.flavour;\n            return this._request({\n                action: \"executeRaw\",\n                args: o,\n                transaction: n,\n                clientMethod: i,\n                argsMapper: So({\n                    clientMethod: i,\n                    activeProvider: a,\n                    activeProviderFlavour: l\n                }),\n                callsite: it(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s\n            });\n        }\n        $executeRaw(n, ...i) {\n            return this._createPrismaPromise((o)=>{\n                if (n.raw !== void 0 || n.sql !== void 0) {\n                    let [s, a] = pu(n, i);\n                    return Mo(this._activeProvider, s.text, s.values, Array.isArray(n) ? \"prisma.$executeRaw`<SQL>`\" : \"prisma.$executeRaw(sql`<SQL>`)\"), this.$executeRawInternal(o, \"$executeRaw\", s, a);\n                }\n                throw new se(\"`$executeRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $executeRawUnsafe(n, ...i) {\n            return this._createPrismaPromise((o)=>(Mo(this._activeProvider, n, i, \"prisma.$executeRawUnsafe(<SQL>, [...values])\"), this.$executeRawInternal(o, \"$executeRawUnsafe\", [\n                    n,\n                    ...i\n                ])));\n        }\n        $runCommandRaw(n) {\n            if (e.activeProvider !== \"mongodb\") throw new se(`The ${e.activeProvider} provider does not support $runCommandRaw. Use the mongodb provider.`, {\n                clientVersion: this._clientVersion\n            });\n            return this._createPrismaPromise((i)=>this._request({\n                    args: n,\n                    clientMethod: \"$runCommandRaw\",\n                    dataPath: [],\n                    action: \"runCommandRaw\",\n                    argsMapper: $l,\n                    callsite: it(this._errorFormat),\n                    transaction: i\n                }));\n        }\n        async $queryRawInternal(n, i, o, s) {\n            let a = this._activeProvider, l = this._engineConfig.adapter?.flavour;\n            return this._request({\n                action: \"queryRaw\",\n                args: o,\n                transaction: n,\n                clientMethod: i,\n                argsMapper: So({\n                    clientMethod: i,\n                    activeProvider: a,\n                    activeProviderFlavour: l\n                }),\n                callsite: it(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s\n            }).then(nu);\n        }\n        $queryRaw(n, ...i) {\n            return this._createPrismaPromise((o)=>{\n                if (n.raw !== void 0 || n.sql !== void 0) return this.$queryRawInternal(o, \"$queryRaw\", ...pu(n, i));\n                throw new se(\"`$queryRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $queryRawUnsafe(n, ...i) {\n            return this._createPrismaPromise((o)=>this.$queryRawInternal(o, \"$queryRawUnsafe\", [\n                    n,\n                    ...i\n                ]));\n        }\n        _transactionWithArray({ promises: n, options: i }) {\n            let o = Pf.nextId(), s = Wl(n.length), a = n.map((l, u)=>{\n                if (l?.[Symbol.toStringTag] !== \"PrismaPromise\") throw new Error(\"All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.\");\n                let c = i?.isolationLevel, p = {\n                    kind: \"batch\",\n                    id: o,\n                    index: u,\n                    isolationLevel: c,\n                    lock: s\n                };\n                return l.requestTransaction?.(p) ?? l;\n            });\n            return cu(a);\n        }\n        async _transactionWithCallback({ callback: n, options: i }) {\n            let o = {\n                traceparent: this._tracingHelper.getTraceParent()\n            }, s = await this._engine.transaction(\"start\", o, i), a;\n            try {\n                let l = {\n                    kind: \"itx\",\n                    ...s\n                };\n                a = await n(this._createItxClient(l)), await this._engine.transaction(\"commit\", o, s);\n            } catch (l) {\n                throw await this._engine.transaction(\"rollback\", o, s).catch(()=>{}), l;\n            }\n            return a;\n        }\n        _createItxClient(n) {\n            return wr(Fe(kn(this), [\n                ue(\"_appliedParent\", ()=>this._appliedParent._createItxClient(n)),\n                ue(\"_createPrismaPromise\", ()=>ko(n)),\n                ue(Ef, ()=>n.id),\n                yr(Fo)\n            ]));\n        }\n        $transaction(n, i) {\n            let o;\n            typeof n == \"function\" ? o = ()=>this._transactionWithCallback({\n                    callback: n,\n                    options: i\n                }) : o = ()=>this._transactionWithArray({\n                    promises: n,\n                    options: i\n                });\n            let s = {\n                name: \"transaction\",\n                attributes: {\n                    method: \"$transaction\"\n                }\n            };\n            return this._tracingHelper.runInChildSpan(s, o);\n        }\n        _request(n) {\n            n.otelParentCtx = this._tracingHelper.getActiveContext();\n            let i = n.middlewareArgsMapper ?? wf, o = {\n                args: i.requestArgsToMiddlewareArgs(n.args),\n                dataPath: n.dataPath,\n                runInTransaction: !!n.transaction,\n                action: n.action,\n                model: n.model\n            }, s = {\n                middleware: {\n                    name: \"middleware\",\n                    middleware: !0,\n                    attributes: {\n                        method: \"$use\"\n                    },\n                    active: !1\n                },\n                operation: {\n                    name: \"operation\",\n                    attributes: {\n                        method: o.action,\n                        model: o.model,\n                        name: o.model ? `${o.model}.${o.action}` : o.action\n                    }\n                }\n            }, a = -1, l = async (u)=>{\n                let c = this._middlewares.get(++a);\n                if (c) return this._tracingHelper.runInChildSpan(s.middleware, (v)=>c(u, (C)=>(v?.end(), l(C))));\n                let { runInTransaction: p, args: d, ...f } = u, y = {\n                    ...n,\n                    ...f\n                };\n                d && (y.args = i.middlewareArgsToRequestArgs(d)), n.transaction !== void 0 && p === !1 && delete y.transaction;\n                let g = await Ba(this, y);\n                return y.model ? $a({\n                    result: g,\n                    modelName: y.model,\n                    args: y.args,\n                    extensions: this._extensions,\n                    runtimeDataModel: this._runtimeDataModel\n                }) : g;\n            };\n            return this._tracingHelper.runInChildSpan(s.operation, ()=>new du.AsyncResource(\"prisma-client-request\").runInAsyncScope(()=>l(o)));\n        }\n        async _executeRequest({ args: n, clientMethod: i, dataPath: o, callsite: s, action: a, model: l, argsMapper: u, transaction: c, unpacker: p, otelParentCtx: d, customDataProxyFetch: f }) {\n            try {\n                n = u ? u(n) : n;\n                let y = {\n                    name: \"serialize\"\n                }, g = this._tracingHelper.runInChildSpan(y, ()=>Ol({\n                        modelName: l,\n                        runtimeDataModel: this._runtimeDataModel,\n                        action: a,\n                        args: n,\n                        clientMethod: i,\n                        callsite: s,\n                        extensions: this._extensions,\n                        errorFormat: this._errorFormat,\n                        clientVersion: this._clientVersion\n                    }));\n                return L.enabled(\"prisma:client\") && (at(\"Prisma Client call:\"), at(`prisma.${i}(${ha(n)})`), at(\"Generated request:\"), at(JSON.stringify(g, null, 2) + `\n`)), c?.kind === \"batch\" && await c.lock, this._requestHandler.request({\n                    protocolQuery: g,\n                    modelName: l,\n                    action: a,\n                    clientMethod: i,\n                    dataPath: o,\n                    callsite: s,\n                    args: n,\n                    extensions: this._extensions,\n                    transaction: c,\n                    unpacker: p,\n                    otelParentCtx: d,\n                    otelChildCtx: this._tracingHelper.getActiveContext(),\n                    customDataProxyFetch: f\n                });\n            } catch (y) {\n                throw y.clientVersion = this._clientVersion, y;\n            }\n        }\n        get $metrics() {\n            if (!this._hasPreviewFlag(\"metrics\")) throw new se(\"`metrics` preview feature must be enabled in order to access metrics API\", {\n                clientVersion: this._clientVersion\n            });\n            return this._metrics;\n        }\n        _hasPreviewFlag(n) {\n            return !!this._engineConfig.previewFeatures?.includes(n);\n        }\n    }\n    return t;\n}\nfunction pu(e, t) {\n    return vf(e) ? [\n        new me(e, t),\n        Kl\n    ] : [\n        e,\n        Ql\n    ];\n}\nfunction vf(e) {\n    return Array.isArray(e) && Array.isArray(e.raw);\n}\nvar Tf = new Set([\n    \"toJSON\",\n    \"$$typeof\",\n    \"asymmetricMatch\",\n    Symbol.iterator,\n    Symbol.toStringTag,\n    Symbol.isConcatSpreadable,\n    Symbol.toPrimitive\n]);\nfunction yu(e) {\n    return new Proxy(e, {\n        get (t, r) {\n            if (r in t) return t[r];\n            if (!Tf.has(r)) throw new TypeError(`Invalid enum value: ${String(r)}`);\n        }\n    });\n}\nfunction hu(e) {\n    nr(e, {\n        conflictCheck: \"warn\"\n    });\n}\n0 && (0); /*! Bundled license information:\n\ndecimal.js/decimal.mjs:\n  (*!\n   *  decimal.js v10.4.3\n   *  An arbitrary-precision Decimal type for JavaScript.\n   *  https://github.com/MikeMcl/decimal.js\n   *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\n   *  MIT Licence\n   *)\n*/  //# sourceMappingURL=library.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@prisma/client/runtime/library.js\n");

/***/ })

};
;